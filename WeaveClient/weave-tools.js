/**
 * Queries a Weave data server, assumed to be at the root folder at the current host.
 * Available methods are listed here: http://ivpr.github.io/Weave-Binaries/javadoc/weave/servlets/DataService.html
 * This function requires jQuery for the $.post() functionality.
 * @param {string} method Name of the method to call on the server.
 * @param {?Array|Object} params Parameters for the server method.
 * @param {Function} resultHandler Function to call when the RPC call returns.  This function will be passed the result of the method as the first parameter.
 * @param {string|number=} queryId Optional id to be associated with this RPC call.  This will be passed as the second parameter to the resultHandler function.
 */
function queryDataService(method, params, resultHandler, queryId)
{
    var url = '/WeaveServices/DataService';
    var request = {
        jsonrpc: "2.0",
        id: queryId || "no_id",
        method: method,
        params: params
    };
    $.post(url, JSON.stringify(request), handleResponse, "json");

    function handleResponse(response)
    {
        if (response.error)
            console.log(JSON.stringify(response, null, 3));
        else if (resultHandler)
            resultHandler(response.result, queryId);
    }
}

/**
 * This will create or update a DynamicColumn to refer to an attribute column on a Weave data server.
 * @param {Weave} weave A Weave instance.
 * @param {Array|WeavePath} path The path to an existing DynamicColumn object, or the path specifying the location to create one inside a LinkableHashMap.
 * @param {number} columnId The id of an attribute column on a Weave server (visible through the Admin Console and in its configuration tables).
 * @param {string=} dataSourceName The name of an existing WeaveDataSource object in the Weave session state.
 */
function setWeaveColumnId(weave, path, columnId, dataSourceName)
{
    // convert an Array to a WeavePath object
    if (Array.isArray(path))
    	path = weave.path(path);
    
    if (!dataSourceName)
    	dataSourceName = weave.path()
    		.libs('weave.data.DataSources::WeaveDataSource')
    		.getValue('getNames(WeaveDataSource)[0]');
    
    // make sure path refers to a DynamicColumn, create a ReferencedColumn inside the DynamicColumn, and set the column reference
    path.request('DynamicColumn')
		.push(null)
			.request('ReferencedColumn')
			.push('dynamicColumnReference',null)
				.request('HierarchyColumnReference')
				.state({
					"dataSourceName": dataSourceName,
					"hierarchyPath": '<attribute weaveEntityId="'+columnId+'"/>'
				})
			.pop()
		.pop();
}

/**
 * This will show or hide a layer on a visualization.
 * @param weave Weave instance
 * @param toolName String
 * @param layerName String
 * @param enable true to show, false to hide
 * @returns true on success
 */
function enableWeaveVisLayer(weave, toolName, layerName, enable)
{
	return weave.setSessionState([toolName,'children','visualization','plotManager','layerSettings',layerName,'visible'], enable);
}

/**
 * This function modifies a session state object generated by Weave by inserting a value at a specified path.
 * @param stateToModify The session state object to modify.
 * @param path A series of object names in the Weave session state hierarchy.
 * @param value The replacement session state to insert at the given path.
 * @return true on success, false on failure
 */
function modifySessionState(stateToModify, path, value)
{
    if (path.length == 0)
        return false
    var property = path[0];
    path = path.slice(1);
    if (stateToModify.constructor == Array)
    {
        for (var i in stateToModify)
        {
        	var dynamicState = stateToModify[i];
            if (property == dynamicState.objectName)
            {
                if (path.length)
                    return modifySessionState(dynamicState.sessionState, path, value);
                dynamicState.sessionState = value;
                return true;
            }
        }
        return false;
    }
    if (path.length)
        return modifySessionState(stateToModify[property], path, value)
    stateToModify[property] = value;
    return true;
}
