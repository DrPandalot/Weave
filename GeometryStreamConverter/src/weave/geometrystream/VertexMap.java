/*
    Weave (Web-based Analysis and Visualization Environment)
    Copyright (C) 2008-2011 University of Massachusetts Lowell

    This file is a part of Weave.

    Weave is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License, Version 3,
    as published by the Free Software Foundation.

    Weave is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with Weave.  If not, see <http://www.gnu.org/licenses/>.
*/

package weave.geometrystream;

import java.util.HashMap;
import java.util.LinkedList;

/**
 * @author adufilie
 */
public class VertexMap
{
	/**
	 * This Map is used as a hash lookup for CombinedPoint objects.
	 * Using this Map, we can look up a CombinedPoint object and add new vertex IDs to it.
	 */
	private HashMap<CombinedPoint, CombinedPoint> map = new HashMap<CombinedPoint, CombinedPoint>();

	public int getCombinedPointCount()
	{
		return map.size();
	}
	
	private int totalStreamSize = 0;
	public int getTotalStreamSize()
	{
		return totalStreamSize;
	}
	
	/**
	 * This will call CombinedPoint.addPoint() on a CombinedPoint object matching
	 * the x,y coordinates of the given vertex.
	 * @param shapeID The ID of the shape in which the vertex exists.
	 * @param point Information about a vertex in the specified shape.
	 * @param maxImportance Maximum possible importance to use in place of VertexChainLink.IMPORTANCE_REQUIRED
	 */
	public void addPoint(int shapeID, VertexChainLink point, double maxImportance)
	{
		// get a new CombinedPoint object to be used when a
		CombinedPoint newCombinedPoint = CombinedPoint.getUnusedInstance(point.x, point.y);

		// check the hash map for a matching CombinedPoint object
		CombinedPoint existingCombinedPoint = map.get(newCombinedPoint);
		if (existingCombinedPoint == null)
		{
			// hash map doesn't have a matching CombinedPoint object, so save the new one
			map.put(newCombinedPoint, newCombinedPoint);
			totalStreamSize += newCombinedPoint.getStreamSize(); // include new CombinedPoint in total stream size
			existingCombinedPoint = newCombinedPoint;
		}
		else
		{
			// map already has matching CombinedPoint ... save the new one for later use
			CombinedPoint.saveUnusedInstance(newCombinedPoint);
		}

		// add a VertexIdentifier to the existing CombinedPoint and update total stream size
		totalStreamSize -= existingCombinedPoint.getStreamSize();
		existingCombinedPoint.addPoint(shapeID, point);
		totalStreamSize += existingCombinedPoint.getStreamSize();
		
		// update importance
		double importance = point.importance;
		if (importance == VertexChainLink.IMPORTANCE_REQUIRED)
			importance = maxImportance;
		existingCombinedPoint.updateMinimumImportance(importance);
	}

	/**
	 * This function retrieves all the CombinedPoint objects that have been generated by calls to addPoint().
	 * @return A Vector of CombinedPoint objects.
	 */
	public LinkedList<StreamObject> getStreamObjects()
	{
		return new LinkedList<StreamObject>(map.values());
	}

	/**
	 * This returns all CombinedPoint instances this object is using back to the CombinedPoint object pool.
	 */
	public void clear()
	{
		Object[] values = map.values().toArray();
		for (int i = 0; i < values.length; i++)
			CombinedPoint.saveUnusedInstance((CombinedPoint)values[i]);
		map.clear();
		totalStreamSize = 0;
	}
}
