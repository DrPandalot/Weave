<?xml version="1.0" encoding="utf-8"?>
<!--
/*
    Weave (Web-based Analysis and Visualization Environment)
    Copyright (C) 2008-2011 University of Massachusetts Lowell

    This file is a part of Weave.

    Weave is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License, Version 3,
    as published by the Free Software Foundation.

    Weave is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with Weave.  If not, see <http://www.gnu.org/licenses/>.
*/
-->

<!--
EquationEditor


@skolman
-->
<DraggablePanel xmlns="weave.ui.*" xmlns:mx="http://www.adobe.com/2006/mxml" 
				width="672" height="700"
				backgroundColor="#EFF4BC" 
				horizontalScrollPolicy="off" verticalScrollPolicy="off"
				xmlns:LinkableObjectList="weave.ui.LinkableObjectList.*"
				title="Equation Editor"
				>
	
	<mx:HDividedBox id="equationContainer" width="100%" height="100%"
			paddingBottom="5" paddingTop="5" paddingRight="5" paddingLeft="5"
		>
		<mx:VBox width="100%" height="100%" horizontalScrollPolicy="off" verticalScrollPolicy="off">
			<mx:HBox width="100%" horizontalGap="0" verticalAlign="middle">
				<mx:Label text="Equation"/>
				<mx:TextInput id="titleInput" toolTip="Enter a title for this column." width="100%"/>
			</mx:HBox>
			<mx:VDividedBox width="100%" height="100%">
			<mx:TextArea id="textEditor" width="100%" />
			<mx:Canvas id="equationBox" width="100%" backgroundColor="#F2F2F2" borderThickness="1" height="100%" borderStyle="solid" dragEnter="handleDragEnter(event)" dragDrop="handleDragDrop(event)">
				<EquationUIComponent id="baseEquationUIComp"/>
			</mx:Canvas>
			</mx:VDividedBox>
		</mx:VBox>
		<mx:VBox height="100%" horizontalScrollPolicy="off" verticalScrollPolicy="off">
			<mx:Label text="Available functions"/>
			<mx:Accordion id="functionLists" height="100%" minHeight="300" width="100%"/>
		</mx:VBox>
		<mx:VBox width="100%" height="100%" horizontalScrollPolicy="off" verticalScrollPolicy="off">
			<ColumnListComponent label="Variables" hashMap="{equationColumn.variables}" dragMoveEnabled="false" width="100%" height="100%"/>
		</mx:VBox>
	</mx:HDividedBox>
	<mx:Fade id="fadeIn" duration="800" alphaFrom="0.0" alphaTo="1.0"/>
	<mx:Fade id="fadeOut" duration="800" alphaFrom="1.0" alphaTo="0.0"/>
	
	<mx:Script>
		<![CDATA[
			import flash.utils.describeType;
			
			import mx.controls.Alert;
			import mx.controls.Image;
			import mx.controls.List;
			import mx.controls.Text;
			import mx.controls.TextInput;
			import mx.core.DragSource;
			import mx.core.IUIComponent;
			import mx.events.DragEvent;
			import mx.events.ListEvent;
			import mx.managers.DragManager;
			import mx.utils.StringUtil;
			
			import weave.Weave;
			import weave.api.compiler.ICompiledObject;
			import weave.api.core.ILinkableObject;
			import weave.api.data.IDataSource;
			import weave.api.linkBindableProperty;
			import weave.api.linkSessionState;
			import weave.api.newLinkableChild;
			import weave.api.registerLinkableChild;
			import weave.api.unlinkSessionState;
			import weave.compiler.ArrayLib;
			import weave.compiler.BooleanLib;
			import weave.compiler.EquationCompiler;
			import weave.compiler.MathLib;
			import weave.compiler.StringLib;
			import weave.core.SessionManager;
			import weave.data.AttributeColumns.DynamicColumn;
			import weave.data.AttributeColumns.EquationColumn;
			import weave.utils.EventUtils;
			
			override protected function constructor():void
			{
				super.constructor();
			}
			
			override protected function childrenCreated():void
			{
				super.childrenCreated();
				
				panelWidth.value = "60%";
				panelHeight.value = "50%";
				panelX.value = "20%";
				panelY.value = "25%";
				
				var constantVBox:VBox = new VBox();
				constantVBox.percentWidth = 100;
				constantVBox.percentHeight = 100;
				constantVBox.label = "Constants";
				var constants:Array = new Array();
				
				var libraries:Array = EquationCompiler.getAllLibraries();
				for each (var library:Object in libraries)
				{
					var functions:Array = new Array();
					
					var classInfo:XML = describeType(library);
					for each (var constantTag:XML in classInfo.child("constant"))
						if (constantTag.@name.toString() != 'VERSION')
							constants.push(constantTag);
					for each (var functionTag:XML in classInfo.child("method"))
						functions.push(functionTag);
					
					functions.sortOn("@name",Array.CASEINSENSITIVE);
					
					var listVBox:VBox = new VBox();
					listVBox.percentWidth = 100;
					listVBox.percentHeight = 100;
					listVBox.label = classInfo.@name;
					var lastIndex:int = listVBox.label.lastIndexOf(":");
					if(lastIndex != -1)
						listVBox.label = listVBox.label.substring(lastIndex+1,listVBox.label.length);
					var functionList:List = new List();
					functionList.dataProvider = functions; 
					functionList.labelFunction= getLabel;
					functionList.minHeight = 300;
					functionList.percentWidth = 100;
					functionList.dragEnabled = true;
					functionList.doubleClickEnabled = true;
					functionList.rowCount = functionList.dataProvider.length;
					functionList.setStyle("borderStyle","none");
					functionList.addEventListener(MouseEvent.DOUBLE_CLICK,handleListItemDoubleClick);
					listVBox.addChild(functionList);
					
					functionLists.addChild(listVBox);
				}
			
				constants.sortOn("@name",Array.CASEINSENSITIVE);
				
				var constantsList:List = new List();
				constantsList.dataProvider = constants; 
				constantsList.labelFunction = getLabel;
				constantsList.minHeight = 300;
				constantsList.percentWidth = 100;
				constantsList.dragEnabled = true;
				constantsList.rowCount = constantsList.dataProvider.length;
				constantsList.setStyle("borderStyle", "none");
				constantVBox.addChild(constantsList);
				
				functionLists.addChild(constantVBox);
				
				equationBox.addEventListener(DragEvent.DRAG_DROP, captureDragDrop, true);

				linkSessionState(equationColumn.equation, baseEquationUIComp.equation);
//				linkBindableProperty(equationColumn.equation, textEditor, "text");
//				linkBindableProperty(equationColumn.columnTitle, titleInput, "text");
				
				titleInput.text = equationColumn.columnTitle.value;
				EventUtils.addDelayedCallback(titleInput,Event.CHANGE,handleEqTitleChange);
				equationColumn.columnTitle.addImmediateCallback(this,handleColumnTitleChange);
				
				
				textEditor.text = equationColumn.equation.value;
				EventUtils.addDelayedCallback(textEditor,Event.CHANGE,handleEqChange);
				equationColumn.equation.addImmediateCallback(this,handleEquationChange);
				
				dynamicColumn.requestGlobalObject(Weave.root.generateUniqueName("EquationEditorColumn"), EquationColumn, false);
			}
			
			public const dynamicColumn:DynamicColumn = registerLinkableChild(this, new DynamicColumn(EquationColumn), handleGlobalColumnChange);
			private const equationColumn:EquationColumn = newLinkableChild(this, EquationColumn);
			
			private var _previousGlobalColumn:EquationColumn = null;
			private function handleGlobalColumnChange():void
			{
				if (_previousGlobalColumn != dynamicColumn.internalColumn as EquationColumn)
				{
					title = 'Equation Editor (Editing global column: "' + dynamicColumn.globalName + '")'
					if (_previousGlobalColumn)
						unlinkSessionState(_previousGlobalColumn, equationColumn);
					_previousGlobalColumn = dynamicColumn.internalColumn as EquationColumn;
					if (_previousGlobalColumn)
						linkSessionState(_previousGlobalColumn, equationColumn);
				}
			}
			
			private function handleListItemDoubleClick(event:MouseEvent):void
			{
				baseEquationUIComp.replaceEquation(((event.currentTarget as List).selectedItem) as XML);
					
			}
			private function handleDragEnter(event:DragEvent):void
			{
				var dropTarget:IUIComponent = event.currentTarget as IUIComponent
				DragManager.acceptDragDrop(dropTarget);
			}
			
			private function handleDragDrop(event:DragEvent):void
			{
				baseEquationUIComp.replaceEquation(((event.dragInitiator as List).selectedItem) as XML);
			}
			
			private function captureDragDrop(event:DragEvent):void
			{
				var items:Array = event.dragSource.dataForFormat("items") as Array;
				if (items[0] is ILinkableObject)
				{
					var eqName:String = equationColumn.variables.getName(items[0] as ILinkableObject);
				
					eqName = "get(" + EquationCompiler.encodeString(eqName) + ")";
					
					event.draggedItem = eqName;
				}
				
			}
			
			private function getLabel(item:Object):String
			{
				if ((item as XML).localName() == "constant")
					return item.@name;
				var label:String = (item as XML).@name + "(";
				var params:XMLList = item.parameter;
				for (var i:int = 0; i < params.length(); i++)
				{
					if (i > 0)
						label += ',';
					label += String(params[i].@type).split("::").pop();
				}
				label += ")";
				return label;
			}
			
			private function openAttrSelector():void
			{
				var className:String = getQualifiedClassName(AttributeSelectorPanel).split("::")[1];
				var attrSelectorObjects:Array = Weave.root.getObjects(AttributeSelectorPanel);
				var attrSelector:AttributeSelectorPanel = new AttributeSelectorPanel();
				if(attrSelectorObjects == null || attrSelectorObjects.length == 0)
					attrSelector = Weave.root.requestObject(Weave.root.generateUniqueName(className), AttributeSelectorPanel, false);
				else
					attrSelector = attrSelectorObjects[0];
				
				attrSelector.restorePanel();
			}
			
			private function handleEqTitleChange():void
			{
				equationColumn.columnTitle.value = titleInput.text;
			}
			private function handleColumnTitleChange():void
			{
				titleInput.text = equationColumn.columnTitle.value;
			}
			
			
			private function handleEqChange():void
			{
				equationColumn.equation.value = textEditor.text;
			}
			private function handleEquationChange():void
			{
				textEditor.text = equationColumn.equation.value;
			}
			
		]]>
	</mx:Script>
	
</DraggablePanel>
