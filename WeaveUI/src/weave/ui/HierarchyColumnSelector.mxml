<?xml version="1.0" encoding="utf-8"?>
<!--
/*
    Weave (Web-based Analysis and Visualization Environment)
    Copyright (C) 2008-2011 University of Massachusetts Lowell

    This file is a part of Weave.

    Weave is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License, Version 3,
    as published by the Free Software Foundation.

    Weave is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with Weave.  If not, see <http://www.gnu.org/licenses/>.
*/
-->

<mx:VBox width="100%" height="100%"
	xmlns:ui ="weave.ui.*"
	xmlns:mx="http://www.adobe.com/2006/mxml"
	verticalScrollPolicy="off" horizontalScrollPolicy="off"
	implements="weave.api.core.ILinkableObject"
	show="this.invalidateSize();"
	>
	<mx:Script>
		<![CDATA[
			import weave.api.WeaveAPI;
		]]>
	</mx:Script>
	<ui:HierarchySelector height="100%" visible="true" id="hierarchySelector"/>
	<mx:HBox id="dummyHBox" minWidth="0" width="100%"
			 borderColor="#000000" 
			 horizontalScrollPolicy="off" verticalScrollPolicy="off">
		<ui:TextInputWithPrompt id="searchCategoryTerms"
					  prompt="Search categories"
					  keyUp="loadFilteredCategories();"
					  clear="loadFilteredCategories();"
					  width="100%"/>
		<ui:TextInputWithPrompt id="searchAttrTerms"
					  prompt="Search attribute columns"
					  keyUp="loadFilteredAttributes();"
					  clear="loadFilteredAttributes();"
					  width="100%"/>
		<mx:HBox id="keyTypeControls" width="100%">
			<!--  toolTip="Select a desired key type.  Use this feature when you want to match up this data to a key type other than its own." -->
			<mx:Label text="Key type:"/>
			<ui:CustomComboBox id="keyTypeCombo" width="100%" change="handleKeyTypeComboChange();"/>
		</mx:HBox>
	</mx:HBox>
	
	<mx:Script>
		<![CDATA[
			import weave.core.weave_internal;
			import weave.utils.VectorUtils;
			import weave.data.AttributeColumnCache;
			import weave.utils.ColumnUtils;
			import weave.api.data.IColumnReference;
			import weave.data.AttributeColumns.EquationColumn;
			import weave.core.LinkableXML;
			import weave.api.data.AttributeColumnMetadata;
			import weave.api.data.IDataSource;
			import weave.api.getSessionState;
			import weave.api.core.ICallbackCollection;
			import weave.api.getCallbackCollection;
			import weave.api.linkSessionState;
			import weave.api.registerLinkableChild;
			import weave.utils.HierarchyUtils;
			import weave.api.newLinkableChild;
			import mx.collections.ArrayCollection;
			import mx.collections.XMLListCollection;
			import mx.controls.Alert;
			import mx.controls.Label;
			import mx.controls.LinkButton;
			import mx.controls.List;
			import mx.core.DragSource;
			import mx.core.IUIComponent;
			import mx.effects.easing.Circular;
			import mx.events.DragEvent;
			import mx.events.ItemClickEvent;
			import mx.events.ListEvent;
			import mx.graphics.Stroke;
			import mx.managers.CursorManager;
			import mx.managers.DragManager;
			import mx.utils.ObjectUtil;
			
			import weave.Weave;
			import weave.data.AttributeColumns.DynamicColumn;
			import weave.api.data.IAttributeColumn;
			import weave.data.AttributeColumns.ProxyColumn;
			import weave.data.AttributeColumns.ReferencedColumn;
			import weave.data.ColumnReferences.HierarchyColumnReference;
			import weave.api.data.IDataSource;
			import weave.data.DataSources.MultiDataSource;
			import weave.primitives.AttributeHierarchy;
			import weave.core.SessionManager;
			import weave.core.WeaveXMLEncoder;
			
			override protected function createChildren():void
			{
				super.createChildren();
				
				// remove the dummy because we don't want it on the screen
				removeChild(dummyHBox);
				// alter the category selection interface
				hierarchySelector.categoryVBox.addChildAt(searchCategoryTerms, 0);
				// alter the attribute selection interface
				hierarchySelector.attributeVBox.addChildAt(searchAttrTerms, 0);
				//dimensionTreeView.attributeVBox.addChild(keyTypeControls);
				
				// when the available key types change or the selectedPath changes, refresh the keyTypeCombo
				getCallbackCollection(WeaveAPI.QKeyManager).addGroupedCallback(this, updateKeyTypeCombo, true);
				getCallbackCollection(selectedPath).addGroupedCallback(this, updateKeyTypeCombo, true);
				
				registerLinkableChild(this, hierarchySelector);

				linkSessionState(multiDataSource.attributeHierarchy, hierarchySelector.attributeHierarchy);
				selectedPath.addGroupedCallback(this, handleSelectedPathChange);
				hierarchySelector.attributesView.dragEnabled = true;
				hierarchySelector.attributesView.addEventListener(DragEvent.DRAG_START, handleAttributeDrag);
				
				_timer.addEventListener(TimerEvent.TIMER,handleTimer);
			}
			
			private const multiDataSource:MultiDataSource = MultiDataSource.instance;
			private function get selectedPath():LinkableXML { return hierarchySelector.selectedPath; }
			public const dynamicColumn:DynamicColumn = newLinkableChild(this, DynamicColumn, handleDynamicColumnChange);
			
			private static const DATA_VARIABLE:String = 'data' // the name of the HierarchyColumnReference variable in equation columns
			private static const LOOKUP_VARIABLE:String = 'lookup' // the name of the HierarchyColumnReference variable in equation columns
				
			private function handleSelectedPathChange():void
			{
				if (selectedPath.value == null)
					return;
				// initialize categories up until leaf node
				var depth:int = HierarchyUtils.getPathDepth(selectedPath.value);
				for (var i:int = 1; i <= depth; i++)
				{
					var hierarchy:XML = (multiDataSource.attributeHierarchy as AttributeHierarchy).value;
					var node:XML = HierarchyUtils.getNodeFromPath(hierarchy, selectedPath.value, i);
					if (node != null && node.localName().toString() != 'attribute')
						multiDataSource.initializeHierarchySubtree(node);
				}
				var attribute:XMLList = selectedPath.value.descendants("attribute");
				if (attribute.length() > 0)
				{
					// if the internal column is not a ReferencedColumn, initialize it now
					var refCol:ReferencedColumn = dynamicColumn.internalColumn as ReferencedColumn;
					if (refCol == null)
						refCol = dynamicColumn.requestLocalObject(ReferencedColumn, false);
					// if the internal column reference is not a HierarchyColumnReference, initialize it now, then return it
					var ref:HierarchyColumnReference = refCol.internalColumnReference as HierarchyColumnReference;
					if (ref == null)
						ref = refCol.dynamicColumnReference.requestLocalObject(HierarchyColumnReference, false);
					
					if (ref != null)
						copyPathToRef(selectedPath.value, ref);
				}
			}
			
			public function copyPathToRef(path:XML, ref:HierarchyColumnReference):void
			{
				// convert the multiDataSource path to a path for a column reference
				path = (path.category[0] as XML).copy();
				path.setName("hierarchy");
				var source:IDataSource = Weave.root.getObject(path.@dataSourceName) as IDataSource;
				var sourceName:String = path.@dataSourceName;
				delete path.@dataSourceName;
				
				// set both data source and path variables before allowing callbacks to run
				var cc:ICallbackCollection = getCallbackCollection(ref);
				cc.delayCallbacks();
				ref.dataSourceName.value = sourceName;
				ref.hierarchyPath.value = path;
				cc.resumeCallbacks();
			}
			
			/**
			 * This function gets called when the user selects something from the key type combo.
			 */
			private function handleKeyTypeComboChange():void
			{
				dynamicColumn.delayCallbacks();
				
				var path:XML = selectedPath.value;
				var equationColumn:EquationColumn = dynamicColumn.requestLocalObject(EquationColumn, false);
				
				//TODO: check the dataType and keyType of the lookup and determine which equation to use
				// lookup is mapping fips -> cube... equation is:   getAvgValue(data, getKeysFromValue(lookup, getKey()))    // active key is a fips
				
				equationColumn.equation.value = 'getValueFromKey(data, getKey(lookup))'; // lookup is mapping cube -> fips
				var dataCol:ReferencedColumn = equationColumn.requestVariable(DATA_VARIABLE, ReferencedColumn);
				var dataRef:HierarchyColumnReference = dataCol.dynamicColumnReference.requestLocalObject(HierarchyColumnReference, false);
				copyPathToRef(selectedPath.value, dataRef);
				var actualKeyType:String = dataRef.getMetadata(AttributeColumnMetadata.KEY_TYPE);
				var desiredKeyType:String = keyTypeCombo.selectedItem as String;
				var mappings:Array = WeaveAPI.QKeyManager.getKeyMappings(desiredKeyType, actualKeyType);
				var lookupCol:ReferencedColumn = equationColumn.requestVariable(LOOKUP_VARIABLE, ReferencedColumn);
				if (mappings.length > 0)
					lookupCol.dynamicColumnReference.requestLocalObjectCopy(mappings[0]);
				else
					lookupCol.dynamicColumnReference.removeObject();
				var title:String = "{ this.variables.getObject('"+DATA_VARIABLE+"').getMetadata('"+AttributeColumnMetadata.TITLE+"') }";
//				var title:String = dataRef.getMetadata(AttributeColumnMetadata.TITLE);
				equationColumn.setMetadata(AttributeColumnMetadata.TITLE, title);
				equationColumn.setMetadata(AttributeColumnMetadata.KEY_TYPE, desiredKeyType);
				equationColumn.setMetadata(AttributeColumnMetadata.DATA_TYPE, dataRef.getMetadata(AttributeColumnMetadata.DATA_TYPE));
				var keyCol:ReferencedColumn = equationColumn.keyColumn.requestLocalObject(ReferencedColumn, false);
				keyCol.dynamicColumnReference.requestLocalObjectCopy(equationColumn.variables.getObject(LOOKUP_VARIABLE));
				
				dynamicColumn.resumeCallbacks();
			}
			
			/**
			 * This function gets called whenever the DynamicColumn changes.
			 */
			private function handleDynamicColumnChange():void
			{
				var ref:HierarchyColumnReference = null;
				if (dynamicColumn.internalColumn is ReferencedColumn)
					ref = (dynamicColumn.internalColumn as ReferencedColumn).internalColumnReference as HierarchyColumnReference;
				if (dynamicColumn.internalColumn is EquationColumn)
					ref = (dynamicColumn.internalColumn as EquationColumn).variables.getObject(DATA_VARIABLE) as HierarchyColumnReference;
				if (ref && ref.hierarchyPath.value)
				{
					// convert the column reference path to a path in the multiDataSource.
					var path:XML = ref.hierarchyPath.value.copy();
					path.@dataSourceName = ref.dataSourceName.value;
					path.setName("category");
					
					var parent:XML = <hierarchy/>;
					parent.appendChild(path);
					selectedPath.value = parent;
				}
			}
			
			/**
			 * This function should be called whenever available key types change and whenever the selectedPath changes.
			 */
			private function updateKeyTypeCombo():void
			{
				return;
				var compatibleTypes:Array;
				var keyType:String = null;
				var node:XML = HierarchyUtils.getLeafNodeFromPath(selectedPath.value);
				if (node)
				{
					keyType = node.attribute(AttributeColumnMetadata.KEY_TYPE);
					compatibleTypes = WeaveAPI.QKeyManager.getCompatibleKeyTypes(keyType);
					compatibleTypes.push(keyType);
					compatibleTypes.sort(Array.CASEINSENSITIVE);
					VectorUtils.removeDuplicatesFromSortedArray(compatibleTypes);
				}
				else
				{
					compatibleTypes = [];
				}
				keyTypeCombo.dataProvider = compatibleTypes;
				keyTypeCombo.enabled = (compatibleTypes.length > 1);
				// determine selected keyType based on the current column
				keyTypeCombo.selectedLabel = ColumnUtils.getKeyType(dynamicColumn);
			}
			
			private function handleTimer(event:TimerEvent):void
			{
				hierarchySelector.categoryFilter.value = searchCategoryTerms.text;
				hierarchySelector.categoriesView.enabled = true;
				hierarchySelector.attributesView.enabled = true;
			}
			
			private function loadFilteredAttributes():void
			{
				hierarchySelector.attributeFilter.value = searchAttrTerms.text;
			}
			
			private var _timer:Timer = new Timer(400,1);
			private function loadFilteredCategories():void
			{
				hierarchySelector.categoriesView.enabled = false;
				hierarchySelector.attributesView.enabled = false;
				_timer.stop();
				_timer.start();
			}
			
			public function clearSearch():void
			{
				searchAttrTerms.text = '';
				searchCategoryTerms.text = '';
				
				hierarchySelector.attributeFilter.value = '';
				hierarchySelector.categoryFilter.value = '';
			}
			
			private function handleAttributeDrag(event:MouseEvent):void
			{
				//trace("handleAttributeDrag",event.target, event.currentTarget);
				
				var itemsArray:Array = new Array();
				itemsArray.push(dynamicColumn.internalColumn);
				
				var ds:DragSource = new DragSource();
				ds.addData(itemsArray,"items");
				
				var targetList:List = (event.currentTarget as List);
				if(targetList.dataProvider !=null)// && targetList.dropEnabled)
				{
					var selectedIndex:int = (event.currentTarget as List).selectedIndex;
					var dragInitiator:IUIComponent = (event.currentTarget as List).indexToItemRenderer(selectedIndex);
					if (dragInitiator)
						DragManager.doDrag(dragInitiator,ds,event);
				}
			}
			
			
		]]>
	</mx:Script>
</mx:VBox>
