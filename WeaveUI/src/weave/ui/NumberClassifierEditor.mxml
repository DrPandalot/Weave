<?xml version="1.0" encoding="utf-8"?>
<!--
/*
Weave (Web-based Analysis and Visualization Environment)
Copyright (C) 2008-2011 University of Massachusetts Lowell

This file is a part of Weave.

Weave is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License, Version 3,
as published by the Free Software Foundation.

Weave is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with Weave.  If not, see <http://www.gnu.org/licenses/>.
*/
-->
<!--	Number Classifier Editor
*  @author sanbalag
*  
-->
<s:VGroup xmlns:fx="http://ns.adobe.com/mxml/2009" 
		  xmlns:s="library://ns.adobe.com/flex/spark" 
		  xmlns:mx="library://ns.adobe.com/flex/mx"
		  xmlns="weave.ui.*"
		  implements="weave.api.core.ILinkableObject"
		  xmlns:LinkableObjectList="weave.ui.LinkableObjectList.*"
		  width="100%" height="100%" xmlns:utils="weave.utils.*">
	
	
	<!-- match 'real numbers, (optional space) real numbers', etc 
	This allows optional negative sign before a number, integers and real numbers, with optional extra 
	numbers following with a comma and optional spaces separating numbers-->
	<!--<mx:RegExpValidator 
	id="splitValuesValidator"
	source="{splitsInput}" property="text"
	expression="^\-?[1-9][0-9]*(\.[0-9]+)?(,\s*\-?[1-9][0-9]*(\.[0-9]+)?)*$"
	trigger="{splitsInput}" triggerEvent="keyUp"
	noMatchError="Please be sure the input is in the form 'number, number' etc."/>-->
	<!--	<utils:CommaSeparatedNumbersValidator 
	id="splitValuesValidator"
	minNumberAllowed="{dataMin}" maxNumberAllowed="{dataMax}"
	source="{splitsInput}" property="text"
	trigger="{splitsInput}" triggerEvent="keyUp"/>-->
	
	
	<s:HGroup id="valuesModule">
		<s:VGroup gap="0">
			<s:Label text="min:"/>
			<mx:TextInput text="{dataMin}" width="60" editable="false"/>
		</s:VGroup>
		
		<s:VGroup gap="0">
			<s:Label text="split values (comma separated):" width="190"/>
			<!-- restrict the input to only accept digits, space, comma, period, and minus sign only -->
			<mx:TextInput id="splitsInput" width="190" borderThickness="4"/>
		</s:VGroup>
		
		<s:VGroup gap="0">
			<s:Label text="max:"/>
			<mx:TextInput text="{dataMax}" width="60" editable="false"/>
		</s:VGroup>
	</s:HGroup>
	
	<fx:Script>
		<![CDATA[
			import mx.collections.ArrayCollection;
			import mx.controls.TextInput;
			import mx.events.ListEvent;
			
			import weave.api.copySessionState;
			import weave.api.getCallbackCollection;
			import weave.api.newLinkableChild;
			import weave.api.core.ILinkableObject;
			import weave.api.data.IBinClassifier;
			import weave.core.LinkableDynamicObject;
			import weave.core.LinkableNumber;
			import weave.core.SessionManager;
			import weave.data.BinClassifiers.BinClassifierCollection;
			import weave.data.BinClassifiers.NumberClassifier;
			import weave.data.BinningDefinitions.ExplicitBinningDefinition;
			
			[Bindable] private var dataMin:Number = 0;
			[Bindable] private var dataMax:Number = 1;
			

			private function createNewValueBox():void
			{
				var vbox:VGroup = new VGroup();
				vbox.setStyle("gap", 0);
				
				var label:Label = new Label();
				label.text = "split " + (valuesModule.numChildren-1) + ":";
				
				var newTextInput:TextInput = new TextInput();
				
				//newTextInput.text = (dataMax - dataMin)
				
				newTextInput.width = 60;
				
				vbox.addElement(label);
				vbox.addElement(newTextInput);
				
				// add the new text input to the end of module that holds them, if the module is empty, add it at 0, otherwise add it at the
				// end of the module
				valuesModule.addElementAt(vbox, Math.max(0, valuesModule.numChildren-1) );
			}
			
			override protected function childrenCreated():void
			{
				super.childrenCreated();
				
				//dynamicList.addEventListener(ListEvent.CHANGE, listElementHandler);
				
				/*linkBindableProperty(numClassifier.min,minNum,"text");
				linkBindableProperty(numClassifier.max,maxNum,"text");
				linkBindableProperty(numClassifier.minInclusive,minInclusive,"selected");
				linkBindableProperty(numClassifier.maxInclusive,maxInclusive,"selected");*/
				
				getCallbackCollection(numClassifier).addImmediateCallback(this, handleNumClassifierChange);
				handleBinClassifiersChange();
			}
			private function addButtonHandler():void{
				binClassifiers.requestObject(null, NumberClassifier, false);
				// select the newly created classifier
				//dynamicList.selectedIndex = binClassifiers.getNames().length - 1;
				handleBinClassifiersChange();
			}				
			private function removeButtonHandler():void
			{
				binClassifiers.removeObject(binClassifiers.getName(selectedNC));
			}
			
			
			private function listElementHandler(event:ListEvent):void
			{
				handleBinClassifiersChange();
			}
			
			
			private function get selectedNC():NumberClassifier
			{
				var objIndex:Number = -1;//dynamicList.selectedIndex;
				if (objIndex < 0)
					return null;
				return binClassifiers.getObjects()[objIndex];
			}
			
			private function handleBinClassifiersChange():void
			{
				//PropertyCanvas.enabled = dynamicList.selectedIndex >= 0;
				


				if (selectedNC)
					copySessionState(selectedNC, numClassifier);
			}
			
			private function handleNumClassifierChange():void
			{
				if (selectedNC)
					copySessionState(numClassifier, selectedNC);
			}
			
			private var _previouslySelectedNC:NumberClassifier = null;
			public const binClassifiers:ExplicitBinningDefinition = newLinkableChild(this, ExplicitBinningDefinition, handleBinClassifiersChange);
			private const numClassifier:NumberClassifier = newLinkableChild(this, NumberClassifier);
			
			
			
		]]>
	</fx:Script>
	
</s:VGroup>

