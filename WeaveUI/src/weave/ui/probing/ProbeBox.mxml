<?xml version="1.0" encoding="utf-8"?>
<!--
/*
    Weave (Web-based Analysis and Visualization Environment)
    Copyright (C) 2008-2011 University of Massachusetts Lowell

    This file is a part of Weave.

    Weave is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License, Version 3,
    as published by the Free Software Foundation.

    Weave is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with Weave.  If not, see <http://www.gnu.org/licenses/>.
*/
-->
<mx:VBox xmlns:mx="http://www.adobe.com/2006/mxml" minWidth="50" minHeight="20" cornerRadius="20" backgroundColor="0xFFFFCC" borderColor="0x000000" borderStyle="none"
		paddingLeft="4" paddingRight="4" paddingTop="4" paddingBottom="4"
		implements="mx.core.IToolTip"
		>
		
			
	<mx:Script>
		<![CDATA[
			import weave.api.ui.IProbeDisplay;
			import mx.managers.ToolTipManager;
			import mx.core.Application;
			import mx.effects.Glow;
			import mx.core.UIComponent;
			import mx.controls.Label;
			import mx.managers.PopUpManager;	
			
			override protected function createChildren():void
			{
				super.createChildren();

				var glow1:GlowFilter = new GlowFilter(0xffffff, 1.0, 2, 2, 5);
	    		var glow2:GlowFilter = new GlowFilter(0x000000, 1.0, 2, 2, 5);
	    		filters = [glow1, glow2];
			}
			private var _tooltipText:String = null;
			public function set text(value:String):void
			{
				_tooltipText = value;
			}
			public function get text():String
			{
				return _tooltipText;	
			}
			
			private var _probePointX:int = 0;
		    private var _probePointY:int = 0;
			override public function move(x:Number, y:Number):void
			{
				_probePointX = x;
		    	_probePointY = y;
		    	
		    	super.move(x, y);
			}

			   
			protected var flipHorizontal:Boolean = false; 
			protected var flipVertical:Boolean = false;  
			
		    protected var arrowThickness:int = 15;
		    protected var cornerRadius:int = 15;
		    protected var xOffset:int = 30;
		    protected var yOffset:int = 10;
		    override protected function updateDisplayList(unscaledWidth:Number, unscaledHeight:Number):void
		    {
		    	super.updateDisplayList(unscaledWidth, unscaledHeight);
		    	 
		    	y = _probePointY - unscaledHeight - yOffset - 5;
		    	  
		    	if( (_probePointX + unscaledWidth + xOffset) > parent.width)
		    	{
		    		flipHorizontal = true;
		    		x = _probePointX - unscaledWidth - xOffset + 5;
		    	}
		    	else
		    	{	
		    		x = _probePointX + xOffset + 5;
		    		flipHorizontal = false;
			    }
		    	
		    	
		    	graphics.clear();
		    	
		    	graphics.beginFill( this.getStyle("backgroundColor") );
		    	graphics.lineStyle(1, this.getStyle("backgroundColor"));
		    	
		    	if(flipHorizontal)
		    	{
		    		// arrow point
			    	graphics.moveTo(unscaledWidth+xOffset, unscaledHeight+yOffset);
			    	// top side of arrow
			    	graphics.lineTo(unscaledWidth, unscaledHeight*3/4+yOffset-arrowThickness/2);
					
					graphics.lineTo(unscaledWidth, unscaledHeight*3/4+yOffset+arrowThickness/2);
			    	graphics.lineTo(unscaledWidth+xOffset, unscaledHeight+yOffset);
		    	}
		    	else
		    	{
		    		// arrow point
			    	graphics.moveTo(-xOffset, unscaledHeight+yOffset);
			    	// top side of arrow
			    	graphics.lineTo(0, unscaledHeight*3/4+yOffset-arrowThickness/2);
					
					graphics.lineTo(0, unscaledHeight*3/4+yOffset+arrowThickness/2);
			    	graphics.lineTo(-xOffset, unscaledHeight+yOffset);
		    	}
		    }
		]]>
	</mx:Script>
</mx:VBox>
