<?xml version="1.0" encoding="utf-8"?>
<!--
/*
    Weave (Web-based Analysis and Visualization Environment)
    Copyright (C) 2008-2011 University of Massachusetts Lowell

    This file is a part of Weave.

    Weave is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License, Version 3,
    as published by the Free Software Foundation.

    Weave is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with Weave.  If not, see <http://www.gnu.org/licenses/>.
*/
-->
<mx:VBox xmlns:mx="http://www.adobe.com/2006/mxml" 
		 xmlns="weave.ui.*"
		 verticalGap="0" creationPolicy="all"
		 width="100%" height="100%" >
	<mx:HBox width="100%" id="titleHBox" horizontalGap="0">
		<mx:Label text="{label}" fontWeight="bold"/>
		<mx:HBox width="100%" id="selectorControls">
			<mx:Spacer width="100%"/>
			<mx:Button label="{lang('Reverse')}" id="reverseButton" 
					   click="controller.hashMap.setNameOrder(controller.hashMap.getNames().reverse());"
					   toolTip="{lang('Reverse the order of the attributes')}"/>
			<mx:Button label="{lang('Open selector...')}" click="openSelector()"/>
		</mx:HBox>
	</mx:HBox>
	<!-- internalList will be added as a child here -->
	<mx:HBox width="100%">
		<mx:Spacer width="100%"/>
		<mx:Button
			label="{lang('Remove all')}"
			toolTip="{lang('Click here to remove all attributes from the list.')}"
			click="controller.removeAllItems()"
			enabled="{_internalList.dataProvider.length > 0}"/>
		<mx:Button
			label="{lang('Remove selected')}"
			toolTip="{lang('Click here to remove one or more selected attributes in the list above.')}"
			click="controller.removeSelectedItems()"
			enabled="{_internalList.selectedIndex >= 0}"/>
	</mx:HBox>
	<mx:Script>
		<![CDATA[
			import mx.controls.DataGrid;
			import mx.controls.List;
			import mx.controls.listClasses.ListBase;
			
			import weave.api.core.ILinkableHashMap;
			import weave.api.newDisposableChild;
			import weave.api.ui.IVisToolWithSelectableAttributes;
			import weave.utils.ColumnUtils;
			
			/**
			 * This code will be executed at the time the object is being created.
			 */
			private var _constructor:* = function():void
			{
				// title is set here instead of in the mxml because if it is set through binding,
				// it will overwrite any other value set in mxml components based on this class.
				label = lang('Attributes');
			}();
			
			override protected function createChildren():void
			{
				super.createChildren();
				if (!_internalList)
					showVariableNames = false;
				controller.labelFunction = ColumnUtils.getColumnListLabel;
				if (controller.view)
					addChildAt(controller.view, _internalListChildIndex);
			}
			
			private const _internalListChildIndex:int = 1;
			[Bindable] private var _internalList:ListBase = null;
			private const controller:VariableListController = newDisposableChild(this, VariableListController);
			
			public function get showVariableNames():Boolean
			{
				return _internalList is DataGrid;
			}
			
			public function set showVariableNames(value:Boolean):void
			{
				if (value && !(_internalList is DataGrid))
				{
					if (_internalList)
						removeChild(_internalList);
					_internalList = new DataGrid();
				}
				
				if (!value && !(_internalList is List))
				{
					_internalList = new List();
				}
				
				if (controller.view != _internalList)
				{
					if (controller.view && controller.view.parent == this)
						removeChild(controller.view);
					
					controller.view = _internalList;
					
					_internalList.percentWidth = 100;
					_internalList.percentHeight = 100;
					_internalList.minWidth = 0;
					_internalList.minHeight = 0;
					if (numChildren > 0)
						addChildAt(_internalList, _internalListChildIndex);
				}
			}
			
			[Bindable] private var _visTool:IVisToolWithSelectableAttributes = null;
			
			public function set visTool(value:IVisToolWithSelectableAttributes):void
			{
				_visTool = value;
				updateLabel();
			}
			
			private function updateLabel():void
			{
				if (!_internalList)
				{
					callLater(updateLabel);
					return;
				}
				if (!_visTool)
					return;
				var names:Array = _visTool.getSelectableAttributeNames();
				var attrs:Array = _visTool.getSelectableAttributes();
				var index:int = attrs.indexOf(controller.hashMap);
				if (index >= 0)
					label = names[index];
			}
			
			private function openSelector():void
			{
				if (_visTool)
					AttributeSelectorPanel.openToolSelector(_visTool, controller.hashMap, showVariableNames);
				else
					AttributeSelectorPanel.openDefaultSelector(controller.hashMap, label, showVariableNames);
			}
			
			public function set hashMap(value:ILinkableHashMap):void
			{
				controller.hashMap = value;
				updateLabel();
			}
			public function get hashMap():ILinkableHashMap
			{
				return controller.hashMap;
			}
		]]>
	</mx:Script>
</mx:VBox>
