<?xml version="1.0" encoding="utf-8"?>
<!--
/*
    Weave (Web-based Analysis and Visualization Environment)
    Copyright (C) 2008-2011 University of Massachusetts Lowell

    This file is a part of Weave.

    Weave is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License, Version 3,
    as published by the Free Software Foundation.

    Weave is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with Weave.  If not, see <http://www.gnu.org/licenses/>.
*/
-->
<mx:HBox
    xmlns:mx="http://www.adobe.com/2006/mxml"
    xmlns="weave.ui.*"
	verticalAlign="middle"
    horizontalScrollPolicy="off"
	verticalScrollPolicy="off"
	creationPolicy="all"
	width="100%"
	addedToStage="handleAddedToStage()"
    >
    <mx:Script>
    	<![CDATA[
			import mx.controls.Label;
			import mx.core.IUIComponent;

			private static const _groups:Dictionary = new Dictionary(true);
			
			/**
			 * This is the label component that will appear to the left of the other children of the Indent component.
			 */
			public const labelComponent:Label = new Label();
			private var _useFirstChildAsLabel:Boolean = false;
			private var _group:* = undefined;
			private var _untranslatedLabel:String;
			private var _translate:Boolean;
			
			/**
			 * If this is set to true, the first child added to the Indent component
			 * will be used as the indentation spacer instead of a Label component.
			 */
			public function set useFirstChildAsLabel(value:Boolean):void
			{
				_useFirstChildAsLabel = value;
				if (_useFirstChildAsLabel) // remove label
				{
					if (labelComponent.parent == this)
						removeChild(labelComponent);
				}
				else // add label
				{
					if (labelComponent.parent != this)
						addChildAt(labelComponent, 0);
				}
				invalidateSize();
			}
			
			
			public function set labelFontWeight(value:String):void
			{
				labelComponent.setStyle('fontWeight', value);
			}
			
			/**
			 * @inheritDoc
			 */
    		override protected function createChildren():void
    		{
    			super.createChildren();
				
				labelTextAlign = "right";
				useFirstChildAsLabel = _useFirstChildAsLabel;
    		}
			
			/**
			 * @private
			 */
			private function handleAddedToStage():void
			{
				// If there is no group set, group this Indent componet with others having the same parent.
				if (parent && _group === undefined)
					setGroup(parent);
			}
			
			/**
			 * Set this to false if this Indent component should not be grouped with others having the same parent.
			 * @default true
			 */
			public function set grouped(value:Boolean):void
			{
				if (value)
				{
					if (!_group)
					{
						if (parent)
							setGroup(parent);
						else
							_group = undefined;
					}
				}
				else
				{
					setGroup(null);
				}
			}
			
			/**
			 * Set this to an IndentGroup to coordinate the indentation of several Indent components.
			 */
			public function set group(indentGroup:Object):void
			{
				setGroup(indentGroup);
			}
			
			/**
			 * @private
			 */
			private function setGroup(newGroup:Object):void
			{
				var ind:Indent;
				var array:Array;
				// remove from existing group
				if (_group)
				{
					array = _groups[_group] as Array;
					array.splice(array.indexOf(this), 1);
					for each (ind in array)
						ind.invalidateSize();
				}
				
				_group = newGroup;
				
				// add to new group
				if (_group)
				{
					array = _groups[_group] as Array;
					if (!array)
						_groups[_group] = array = [];
					array.push(this);
					for each (ind in array)
						ind.invalidateSize();
				}
			}
			
			/**
			 * @inheritDoc
			 */
			override public function validateSize(recursive:Boolean=false):void
			{
				if (_group)
				{
					// find the maximum measuredWidth of all grouped Indent components
					var array:Array = _groups[_group] as Array;
					var max:Number = 0;
					var item:Indent;
					for each (item in array)
						max = Math.max(max, IUIComponent(item.getChildAt(0)).measuredWidth);
					for each (item in array)
						item.getChildAt(0).width = max;
					
					if (_group is IndentGroup)
						(_group as IndentGroup).measuredIndent = max;
				}
				super.validateSize(recursive);
			}

			/**
			 * This controls the textAlign style of the label component.
			 */
			public function set labelTextAlign(value:String):void
			{
				labelComponent.setStyle("textAlign", value);
			}
			
			/**
			 * Set this to ungroup the Indent component and specify an explicit indentation.
			 */
    		[Bindable] public function get indent():int
			{
				return IUIComponent(numChildren > 0 ? getChildAt(0) : labelComponent).width;
			}
    		public function set indent(value:int):void
			{
				group = null; // remove from group
				IUIComponent(numChildren > 0 ? getChildAt(0) : labelComponent).width = value;
			}
			
			/**
			 * This is the label that will appear to the left of the other children of the Indent component.
			 */
			[Bindable] override public function get label():String
			{
				return labelComponent.text;
			}
    		override public function set label(value:String):void
			{
				_untranslatedLabel = value;
				super.label = labelComponent.text = _translate ? lang(value) : value;
			}
			
			/**
			 * Set this to true to automatically call lang() on the label property.
			 */
			public function get translate():Boolean
			{
				return _translate;
			}
			public function set translate(value:Boolean):void
			{
				if (_translate != value)
				{
					_translate = value;
					label = _untranslatedLabel;
				}
			}
    	]]>
    </mx:Script>
</mx:HBox>
