<?xml version="1.0" encoding="utf-8"?>
<!--
/*
Weave (Web-based Analysis and Visualization Environment)
Copyright (C) 2008-2011 University of Massachusetts Lowell

This file is a part of Weave.

Weave is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License, Version 3,
as published by the Free Software Foundation.

Weave is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with Weave.  If not, see <http://www.gnu.org/licenses/>.
*/
-->
<mx:TitleWindow xmlns="weave.ui.*" xmlns:mx="http://www.adobe.com/2006/mxml" 
				title="{lang('Quick Menu')}"
				width="300" height="300"
				layout="vertical"
				horizontalAlign="center"
				paddingTop="20"
				showCloseButton="true"
				close="close();">
	
	<mx:HBox paddingTop="20" width="100%">
		<mx:Label text="{lang('Type command:')}" fontWeight="bold" />
		<mx:TextInput id="keyword" width="150" change="filter()"/>
	</mx:HBox>
	<mx:Script>
		<![CDATA[
			import mx.events.MenuEvent;
			import mx.managers.PopUpManager;
			import mx.utils.ObjectUtil;
			
			import weave.compiler.StandardLib;
			import weave.menus.WeaveMenuItem;
			import weave.ui.controlBars.WeaveMenuBar;
			
			private var autosuggest:SubMenu;
			
			override protected function childrenCreated():void
			{
				super.childrenCreated();
				
				keyword.setFocus();
				keyword.addEventListener(KeyboardEvent.KEY_DOWN,handleUpDown);
				
				autosuggest = new SubMenu(keyword);
				autosuggest.setSubMenuEvents([], []);
				autosuggest.addEventListener(MenuEvent.ITEM_CLICK,close);
			}
			
			private function close(event:Event=null):void
			{
				autosuggest.hide();
				PopUpManager.removePopUp(this);
			}
			
			private function handleUpDown(event:KeyboardEvent):void
			{
				if (event.keyCode == Keyboard.DOWN)
				{
					autosuggest.setFocus();
					autosuggest.selectedIndex = 0;
				}
				else if(event.keyCode == Keyboard.ESCAPE)
				{
					close();
				}
			}

			private function getMenuItems():Array
			{
				var menus:Array = WeaveMenuBar.defaultMenus;
				
				var leafItems:Array = [];
				menus.forEach(getLeafItems);
				function getLeafItems(item:WeaveMenuItem, i:int, a:Array):void
				{
					var children:Array = item.children;
					if (children)
						children.forEach(getLeafItems);
					else
						leafItems.push(item);
				}
				return leafItems;
			}
			private function sortMenuItems(item1:WeaveMenuItem, item2:WeaveMenuItem):int
			{
				return ObjectUtil.stringCompare(item1.label, item2.label, true);
			}
			private function filterMenuItems(item:WeaveMenuItem, i:int, a:Array):Boolean
			{
				return item.label.toLowerCase().search(keyword.text.toLowerCase()) > -1;
			}
			
			private function filter():void
			{
				autosuggest.hide();
				
				var items:Array = getMenuItems().filter(filterMenuItems);
				StandardLib.sort(items, sortMenuItems);
				
				autosuggest.dataProvider = items;
				
				autosuggest.showSubMenu();
				keyword.setFocus();
				keyword.setSelection(keyword.text.length,keyword.text.length);
			}
		]]>	
	</mx:Script>
	
</mx:TitleWindow>