<?xml version="1.0" encoding="utf-8"?>
<!--
/*
	Weave (Web-based Analysis and Visualization Environment)
	Copyright (C) 2008-2011 University of Massachusetts Lowell
	
	This file is a part of Weave.
	
	Weave is free software: you can redistribute it and/or modify
	it under the terms of the GNU General Public License, Version 3,
	as published by the Free Software Foundation.
	
	Weave is distributed in the hope that it will be useful,
	but WITHOUT ANY WARRANTY; without even the implied warranty of
	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
	GNU General Public License for more details.
	
	You should have received a copy of the GNU General Public License
	along with Weave.  If not, see <http://www.gnu.org/licenses/>.
*/
-->
<DraggablePanel xmlns="weave.ui.*" xmlns:mx="http://www.adobe.com/2006/mxml" 
					 title="{lang('Saved Subsets')}"
					 width="25%" height="10%"
					 layout="vertical" xmlns:tools="weave.visualization.tools.*" xmlns:editors="weave.editors.*">
	<mx:ViewStack width="100%" height="100%" id="viewStack">
		<mx:Box width="100%" height="100%" id="comboView">
			<CustomComboBox id="subsetSelectorBox" prompt="{lang('Select a subset...')}"
						 width="100%" height="100%" minHeight="0"
						 labelFunction="subsetsListLabelFunction"
						 valueCommit="itemSelected()"
						 />
		</mx:Box>
		<mx:Box width="100%" height="100%" id="sliderView">
			<mx:VSlider id="subsetSelectorSlider" width="100%" height="100%" minHeight="0" liveDragging="true" showDataTip="false" minimum="0" snapInterval="1"
						change="itemSelected()"/>
		</mx:Box>
	</mx:ViewStack>
	<mx:Script>
		<![CDATA[
			import weave.Weave;
			import weave.api.copySessionState;
			import weave.api.core.ILinkableObject;
			import weave.api.getCallbackCollection;
			import weave.api.linkBindableProperty;
			import weave.api.registerLinkableChild;
			import weave.core.LinkableBoolean;
			import weave.data.KeySets.KeyFilter;
			
			public const includeAllRecordsOption:LinkableBoolean = registerLinkableChild(this, new LinkableBoolean(false), updateSubsets);
			public const displayRecordInfo:LinkableBoolean = registerLinkableChild(this, new LinkableBoolean(true), updateSubsets);
			public const sliderMode:LinkableBoolean = registerLinkableChild(this, new LinkableBoolean(false), updateSubsets);
			private var setToIndex:int = -1;
			
			override protected function constructor():void
			{
				super.constructor();
				
				minimizable.value = false;
				maximizable.value = false;
				zOrder.value = Infinity;
				sliderMode.addGroupedCallback(this, handleSliderMode, true);
			}
			private function handleSliderMode():void
			{
				viewStack.selectedChild = sliderMode.value ? sliderView : comboView;
			}
			override protected function childrenCreated():void
			{
				super.childrenCreated();
				Weave.savedSubsetsKeyFilters.addGroupedCallback(this, updateSubsets, true);
				getCallbackCollection(Weave.defaultSubsetKeyFilter).addGroupedCallback(this, handleGlobalSubsetChange);
			}
			private function handleGlobalSubsetChange():void
			{
				if( !Weave.defaultSubsetKeyFilter.included.keys.length ) // IF SHOWING ALL RECORDS
				{
					selectedIndex = -1;
				}
			}
			private static const ALL_RECORDS:String = lang("All records");
			private function updateSubsets():void
			{
				_subsets = Weave.savedSubsetsKeyFilters.getObjects();
				if (includeAllRecordsOption.value)
					_subsets.unshift(false); // placeholder for "all records"
				
				var names:Array = _subsets.map(function(item:*,..._):*{ return subsetsListLabelFunction(item); });
				
				subsetSelectorBox.dataProvider = _subsets;
				subsetSelectorSlider.labels = names.reverse();
				subsetSelectorSlider.maximum = _subsets.length - 1;
				
				if (setToIndex >= 0)
				{
					selectedIndex = setToIndex;
					setToIndex = -1;
				}
			}
			public function selectItem(name:String):void
			{
				if (name)
					setToIndex = Weave.savedSubsetsKeyFilters.getNames().indexOf(name) + (includeAllRecordsOption.value ? 1 : 0);
				else
					setToIndex = 0;
				updateSubsets();
			}
			public function set selectedIndex(value:int):void
			{
				if (viewStack.selectedChild == comboView)
				{
					subsetSelectorBox.selectedIndex = value;
				}
				else
				{
					if (value == -1)
						value = 0;
					subsetSelectorSlider.value = subsetSelectorSlider.maximum - value;
				}
			}
			public function get selectedIndex():int
			{
				if (viewStack.selectedChild == comboView)
				{
					return subsetSelectorBox.selectedIndex;
				}
				else
				{
					return subsetSelectorSlider.maximum - subsetSelectorSlider.value;
				}
			}
			
			/**
			 * Function used solely to get the label for each list item
			 **/
			private function subsetsListLabelFunction(item:Object):String
			{
				if (!item)
					return ALL_RECORDS;
				
				// get the subset by its name
				var keyFilter:KeyFilter = item as KeyFilter;
				
				// the label will be the name of the item followed by the included/excluded records count
				var name:String = Weave.savedSubsetsKeyFilters.getName(keyFilter);
				
				if (!displayRecordInfo.value)
					return name;
				
				// create a string for the number of included keys followed by " records"
				// if the excluded keys are used instead, the string will be excluded keys followed by " excluded records"
				if (keyFilter.includeMissingKeys.value && keyFilter.excluded.keys.length > 0)
					return lang('{0} ({1} excluded records)', name, keyFilter.excluded.keys.length);
				else
					return lang('{0} ({1} records)', name, keyFilter.included.keys.length);
			}
			
			private var _subsets:Array = [];
			
			protected function itemSelected():void
			{
				var index:int = selectedIndex;
				
				if (index == -1)
					return;
				
				var subset:KeyFilter = _subsets[index] as KeyFilter;
				if (subset)
					copySessionState(subset, Weave.defaultSubsetKeyFilter);
				else
					Weave.defaultSubsetKeyFilter.replaceKeys(true, true); // all records
				
				// reset the selected item to what it was before we set the global subset
				if (selectedIndex != index)
					selectedIndex = index;
			}
		]]>
	</mx:Script>
	<ControlPanel>
		<mx:VBox label="{lang('Settings')}">
			<mx:CheckBox label='{lang("Include \"All records\" option")}' creationComplete="linkBindableProperty(includeAllRecordsOption, event.target, 'selected')"/>
			<mx:CheckBox label='{lang("Display record counts")}' creationComplete="linkBindableProperty(displayRecordInfo, event.target, 'selected')"/>
			<mx:CheckBox label='{lang("Use vertical slider layout")}' creationComplete="linkBindableProperty(sliderMode, event.target, 'selected')"/>
		</mx:VBox>
		<editors:WindowSettingsEditor target="{this}"/>
	</ControlPanel>
</DraggablePanel>
