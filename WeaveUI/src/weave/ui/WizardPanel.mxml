<?xml version="1.0" encoding="utf-8"?>
<!--
/*
    Weave (Web-based Analysis and Visualization Environment)
    Copyright (C) 2008-2011 University of Massachusetts Lowell

    This file is a part of Weave.

    Weave is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License, Version 3,
    as published by the Free Software Foundation.

    Weave is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with Weave.  If not, see <http://www.gnu.org/licenses/>.
*/
-->
<!--
	This is a generic panel for a wizard interface, containing back/next/finish/cancel buttons.
	@author adufilie
-->
<DraggablePanel
		xmlns:fx="http://ns.adobe.com/mxml/2009" 
 xmlns:s="library://ns.adobe.com/flex/spark" 
 xmlns:mx="library://ns.adobe.com/flex/mx"
		xmlns="weave.ui.*"
		layout="{new BasicLayout()}"
		title="{viewStack.label}"		
		percentX="NaN" percentY="NaN" percentWidth="NaN" percentHeight="NaN"
		sessionPanelCoordsAsPercentages="false"
		escapeKeyClosesPanel="true"
		>
	<!--recommendation use skin to set the appaerance of the tool
	borderAlpha="1"
	borderColor="#939178"
	borderThicknessBottom="0" borderThicknessLeft="5" borderThicknessRight="5" borderThicknessTop="0"
	roundedBottomCorners="true"-->

	<mx:Box id="viewStackContainer"
			
			/>
	
	<mx:ControlBar paddingTop="5" paddingBottom="5">
		<s:Label text="Step {viewStack.selectedIndex + 1} of {viewStackNumChildren}"/>
		<s:Spacer width="100%"/>
		<s:Button id="backButton" label="{lang('Back')}" enabled="{viewStack.backEnabled &amp;&amp; (viewStack.selectedIndex &gt; 0)}" click="viewStack.back()"/>
		<s:Button id="nextButton" label="{lang('Next')}" enabled="{viewStack.nextEnabled &amp;&amp; (viewStack.selectedIndex &lt; viewStackNumChildren - 1)}" click="viewStack.next()"/>
		<s:Button id="finishButton" label="{lang('Finish')}" visible="{viewStack.finishEnabled}" enabled="{viewStack.finishEnabled}" click="viewStack.finish()" emphasized="true"/>
		<s:Button id="cancelButton" label="{lang('Close')}" click="viewStack.cancel();"/>
	</mx:ControlBar>
	
	<fx:Script>
		<![CDATA[
			import flash.utils.getQualifiedClassName;
			
			import mx.containers.ViewStack;
			import mx.controls.Alert;
			import mx.core.Container;
			import mx.core.IFlexDisplayObject;
			import mx.core.IUIComponent;
			import mx.core.UIComponent;
			import mx.events.CloseEvent;
			import mx.events.FlexEvent;
			import mx.managers.PopUpManager;
			
			import spark.layouts.BasicLayout;
			
			override protected function constructor():void
			{
				super.constructor();
				minimizable.value = false;
				maximizable.value = false;
			}
			
			[Bindable] private var viewStack:WizardViewStack = null;
			[Bindable] private var viewStackNumChildren:int = 0; // this is used because numChildren is not bindable

			/**
			 * This function must be called to initialize the WizardViewStack used by the WizardPanel.
			 * @param viewStack A WizardViewStack that the WizardPanel will control.
			 */
			public function setWizardViewStack(viewStack:WizardViewStack):void
			{
				this.viewStack = viewStack;
				viewStackContainer.addElement(viewStack);
				viewStack.addEventListener(FlexEvent.CREATION_COMPLETE, function(..._):void { viewStackNumChildren = viewStack.numChildren; });
				
			}
			
			/**
			 * This function creates a Wizard Panel using a specified WizardViewStack object.
			 * @param parent The parent of the popup window to be created.
			 * @param wizardPanelClass A Class that extends WizardPanel and contains controls you want to display inside a popup.
			 */
			public static function createWizard(parent:DisplayObject, wizardViewStack:WizardViewStack):void
			{
				var wiz:WizardPanel = PopUpManager.createPopUp(parent, WizardPanel,false) as WizardPanel;
				wiz.setWizardViewStack(wizardViewStack);
				PopUpManager.centerPopUp(wiz);
				wiz.cancelButton.addEventListener(MouseEvent.CLICK, function(..._):void{ PopUpManager.removePopUp(wiz); });
				wizardViewStack.addEventListener(CloseEvent.CLOSE,function(..._):void{ PopUpManager.removePopUp(wiz); });
//				return wiz;
			}
		]]>
	</fx:Script>
	<fx:Style>
		.weavePanelStyle, .weaveSystemStyle {
			borderAlpha: 0.95;
			alpha: 1.0;
			backgroundAlpha: 1.0;
			borderColor: #4D5258;
			
			headerHeight: 20;
			
			paddingLeft: 0;
			paddingRight: 0;
			paddingTop: 0;
			paddingBottom: 0;
			
			resizeBorderThickness: 5;
			
			borderThicknessTop: 2;
			borderThicknessBottom: 2;
			borderThicknessLeft: 2;
			borderThicknessRight: 2;
			
			roundedBottomCorners: false;
			cornerRadius: 0;
		}
		.weaveSystemStyle, .weaveSystemTitleStyle {
			fontFamily: Verdana;
			fontWeight: normal;
			fontSize: 10;
			fontStyle: normal;
			textDecoration: none;
		}
		.weavePanelTitleStyle, .weaveSystemTitleStyle {
			fontWeight: normal;
			color: white;
		}
	</fx:Style>
</DraggablePanel>
