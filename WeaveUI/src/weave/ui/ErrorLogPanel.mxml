<?xml version="1.0" encoding="utf-8"?>
<!--
/*
    Weave (Web-based Analysis and Visualization Environment)
    Copyright (C) 2008-2011 University of Massachusetts Lowell

    This file is a part of Weave.

    Weave is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License, Version 3,
    as published by the Free Software Foundation.

    Weave is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with Weave.  If not, see <http://www.gnu.org/licenses/>.
*/
-->
<DraggablePanel xmlns:mx="http://www.adobe.com/2006/mxml"
		xmlns="weave.ui.*" 
		borderColor="#939178"
		title="Error Log"
		escapeKeyClosesPanel="true"
		>
	<Console id="console" context="{errorManager}" padding="0"/>
	<HelpComponent id="help" visible="false" includeInLayout="false">
		How to get a pointer to a display object:
		
		Move the mouse over a component and press F8.
		You will see a list of objects under the mouse along with ID numbers, such as Stage#0.
		In the console, you can use the # operator followed by an ID number to get a pointer to an object.
		If you use the # operator followed by an object pointer, it will generate an ID for that object.
		Use the # operator by itself to see a list of object IDs which have been generated so far.
	</HelpComponent>
	<mx:Script>
		<![CDATA[
			import mx.core.UIComponent;
			import mx.managers.PopUpManager;
			
			import weave.Weave;
			import weave.api.core.IErrorManager;
			import weave.api.getCallbackCollection;
			import weave.compiler.StandardLib;
			import weave.core.ErrorManager;
			import weave.core.LinkableBoolean;
			import weave.utils.DebugUtils;
			import weave.utils.Identify;
			
			[Bindable] private var errorManager:IErrorManager = WeaveAPI.ErrorManager;
			
			override protected function createChildren():void
			{
				if (createdChildren)
					return;
				super.createChildren();
				initSubMenu();
			}
			
			private function initSubMenu():void
			{
				var allMenuToggles:Array = [
					Weave.properties.enableRightClick,
					Weave.properties.enableMenuBar,
					Weave.properties.enableDataMenu,
					Weave.properties.enableDynamicTools,
					Weave.properties.enableSelectionsMenu,
					Weave.properties.enableSubsetsMenu,
					Weave.properties.enableSessionMenu,
					Weave.properties.enableWindowMenu,
					Weave.properties.enableAboutMenu,
					Weave.properties.enableToolControls,
					Weave.properties.enableSessionHistoryControls
				];
				enableSubMenu.value = true;
				subMenuButton.data = [
					{
						label: function():String {
							return Identify.enabled
								? lang("Stop identifying UI components")
								: lang("Identify UI components");
						},
						click: Identify.identify
					},{
						label: lang("Print display list"),
						click: function():void {
							weaveTrace(DebugUtils.debugDisplayList(stage));
						}
					},{
						label: lang("Show all menus and controls"),
						click: function():void {
							for each (var lb:LinkableBoolean in allMenuToggles)
								lb.value = true;
							for each (var dp:DraggablePanel in WeaveAPI.globalHashMap.getObjects(DraggablePanel))
								for each (lb in [dp.enableBorders, dp.enableMoveResize, dp.enableZOrder, dp.minimizable, dp.maximizable, dp.closeable])
									lb.value = true;
						},
						shown: function():Boolean {
							for each (var lb:LinkableBoolean in allMenuToggles)
								if (!lb.value)
									return true;
							for each (var dp:DraggablePanel in WeaveAPI.globalHashMap.getObjects(DraggablePanel))
								for each (lb in [dp.enableBorders, dp.enableMoveResize, dp.enableZOrder, dp.minimizable, dp.maximizable, dp.closeable])
									if (!lb.value)
										return true;
							return false;
						}
					},{
						label: lang("Clear log"),
						click: console.consoleClear
					},{
						label: lang("Console help"),
						click: help.showHelp
					}
				];
			}
			
			override protected function childrenCreated():void
			{
				super.childrenCreated();
				
				enableZOrder.value = false;
				getCallbackCollection(WeaveAPI.ErrorManager).addGroupedCallback(this, handleError, true);
			}
			
			private var errorIndex:int = 0;
			private function handleError():void
			{
				while (errorIndex < WeaveAPI.ErrorManager.errors.length)
				{
					if (errorIndex == 0)
						console.log.text += StandardLib.substitute('\r\rWeave {0}; Flash {1}', Weave.properties.version.value, Capabilities.version);
					var error:Error = WeaveAPI.ErrorManager.errors[errorIndex++];
					console.log.text += '\r\r' + ErrorManager.errorToString(error);
				}
				console.log.validateProperties();
				console.log.verticalScrollPosition = console.log.maxVerticalScrollPosition;
			}
			
			public static function getInstance():ErrorLogPanel
			{
				if (!_instance)
					_instance = new ErrorLogPanel();
				return _instance;
			}
			public static function openErrorLog():void
			{
				var instance:ErrorLogPanel = getInstance();
				if (!instance.parent)
				{
					var app:UIComponent = WeaveAPI.topLevelApplication as UIComponent;
					var desiredHeight:Number = 150;
					var percentHeight:Number = Math.round(desiredHeight / app.stage.stageHeight * 100);
					
					instance.panelY.value = (98 - percentHeight) + "%";
					instance.panelHeight.value = percentHeight + "%";
					
					instance.panelX.value = "0%";
					instance.panelWidth.value = "100%";
					
					PopUpManager.addPopUp(instance, app);
				}
				instance.restorePanel();
			}
			private static var _instance:ErrorLogPanel;
		]]>
	</mx:Script>
</DraggablePanel>
