<?xml version="1.0" encoding="utf-8"?>
<!--
/*
    Weave (Web-based Analysis and Visualization Environment)
    Copyright (C) 2008-2011 University of Massachusetts Lowell

    This file is a part of Weave.

    Weave is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License, Version 3,
    as published by the Free Software Foundation.

    Weave is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with Weave.  If not, see <http://www.gnu.org/licenses/>.
*/
-->
<ui:DraggablePanel xmlns="weave.ui.annotation.*"
				   xmlns:mx="http://www.adobe.com/2006/mxml"
				   xmlns:ui="weave.ui.*"
				   width="25%" height="25%" backgroundAlpha="0" borderThickness="0"
				   horizontalScrollPolicy="off" layout="absolute" verticalScrollPolicy="off">
	<mx:TextArea id="textArea" width="100%" height="100%" minWidth="5" minHeight="5"
				 borderStyle="solid" editable="false" wordWrap="true"/>
	<ui:ControlPanel added="if (event.target == controlPanel) updateTextArea()"
					 percentHeight="NaN" percentWidth="NaN"
					 removed="if (event.target == controlPanel) callLater(updateTextArea)"
					 sessionPanelCoordsAsPercentages="false" title="Annotation Editor">
		<mx:VBox id="toolbar" width="100%" height="100%" horizontalGap="7"
				 horizontalScrollPolicy="off" paddingBottom="2" paddingLeft="2" paddingRight="2"
				 paddingTop="2" verticalScrollPolicy="off">

			<mx:CheckBox id="lockCheckBox" label="Enable window borders and resizing"/>
			
			<mx:HBox width="100%" horizontalScrollPolicy="off" paddingBottom="2" paddingLeft="2"
					 paddingRight="2" paddingTop="2" verticalScrollPolicy="off">
				
				<mx:ColorPicker id="colorPicker" width="22" height="22"
								change="applyTextFormat(event)"/>
				
				<ui:CustomComboBox id="fontFamilyCombo" change="applyTextFormat(event)"
								   dataProvider="{fontFamilyArray}" editable="false"/>
				
				<ui:CustomComboBox id="fontSizeCombo" change="applyTextFormat(event)"
								   dataProvider="{fontSizeArray}" editable="false" paddingLeft="2"
								   paddingRight="2"/>
				
				<mx:HBox id="toolBar2" horizontalGap="0">
					<mx:Button id="boldButton" width="30" label="B" change="applyTextFormat(event)"
							   fontFamily="_serif" fontWeight="bold" toggle="true" toolTip="Bold"/>
					<mx:Button id="italicButton" width="30" label="I" change="applyTextFormat(event)"
							   fontFamily="_serif" fontStyle="italic" toggle="true" toolTip="Italic"/>
					<mx:Button id="underlineButton" width="30" label="U"
							   change="applyTextFormat(event)" fontFamily="_serif"
							   textDecoration="underline" toggle="true" toolTip="Underline"/>
				</mx:HBox>
			</mx:HBox>
			
			<mx:Grid>
				<mx:GridRow>
					<mx:GridItem>
						<mx:Label text="Paragraph style:"/>
					</mx:GridItem>
					<mx:GridItem>
						<ui:CustomComboBox id="paragraphCombo" change="applyParagraphFormat(event);"
										   dataProvider="{['Left align','Right align','Center','Justify','Bullet']}"
										   selectedIndex="0"/>
					</mx:GridItem>
				</mx:GridRow>
				<mx:GridRow>
					<mx:GridItem>
						<mx:Label id="roundingLabel" text="Corner rounding:"/>
					</mx:GridItem>
					<mx:GridItem>
						<mx:HSlider id="cornerRadiusSlider" width="100%" liveDragging="true"
									maximum="30" minimum="0" snapInterval="1"
									toolTip="Change the editing text area's corner rounding."
									value="0"/>
					</mx:GridItem>
				</mx:GridRow>
				<mx:GridRow>
					<mx:GridItem>
						<mx:Label id="paddingLabel" text="Padding around text:"/>
					</mx:GridItem>
					<mx:GridItem>
						<mx:HSlider id="paddingSlider" width="100%" liveDragging="true" maximum="25"
									minimum="0" snapInterval="1"
									toolTip="Set the space between the text and the text box."
									value="0"/>
					</mx:GridItem>
				</mx:GridRow>
				<mx:GridRow>
					<mx:GridItem>
						<mx:Label id="backgroundLabel" text="Background properties:"/>
					</mx:GridItem>
					<mx:GridItem>
						<mx:HBox width="100%">
							<mx:ColorPicker id="backgroundColorPicker" selectedColor="white"
											toolTip="Change the editing text area's background color."/>
							<mx:HSlider id="backgroundAlphaSlider" width="100%" liveDragging="true"
										maximum="1" minimum="0"
										toolTip="Change the editing text area's background transparency.  A value of 1 (slider to the right) is fully opaque, 0 (slider to the left) is fully transparent."
										value="1.0"/>
						</mx:HBox>
					</mx:GridItem>
				</mx:GridRow>
				<mx:GridRow>
					<mx:GridItem>
						<mx:Label id="borderLabel" text="Border properties:"/>
					</mx:GridItem>
					<mx:GridItem>
						<mx:HBox width="100%">
							<mx:ColorPicker id="borderColorPicker"
											enabled="{borderThicknessSlider.value &gt; 0}"
											toolTip="Change the editing text area's border color."/>
							
							<mx:HSlider id="borderThicknessSlider"
										value="1" minimum="0" maximum="25" snapInterval="1" 
										toolTip = "Change the editing text area's border thickness."
										width="100%" liveDragging="true"/>
						</mx:HBox>
					</mx:GridItem>
				</mx:GridRow>
			</mx:Grid>
		</mx:VBox>
	</ui:ControlPanel>
	<mx:Script>
		<![CDATA[
			import mx.binding.utils.BindingUtils;
			import mx.core.IUITextField;
			import mx.core.mx_internal;
			import mx.utils.ObjectUtil;
			
			import weave.Weave;
			import weave.api.WeaveAPI;
			import weave.api.core.ILinkableContainer;
			import weave.api.core.ILinkableObject;
			import weave.api.data.IAttributeColumn;
			import weave.api.data.IDataSource;
			import weave.api.getCallbackCollection;
			import weave.api.linkBindableProperty;
			import weave.api.linkSessionState;
			import weave.api.newDisposableChild;
			import weave.api.registerLinkableChild;
			import weave.api.reportError;
			import weave.core.LinkableFunction;
			import weave.core.LinkableNumber;
			import weave.core.LinkableString;
			import weave.core.SessionManager;
			import weave.data.ColumnReferences.HierarchyColumnReference;
			import weave.primitives.AttributeHierarchy;
			import weave.ui.CustomContextMenuManager;
			import weave.utils.ColumnUtils;
			
			public const htmlText:LinkableString        = registerLinkableChild(this, new LinkableString(''), handleLinkableHtmlText, true);
			public const backgroundAlpha:LinkableNumber = registerLinkableChild(this, new LinkableNumber(1, isFinite), applyStyle, true);
			public const backgroundColor:LinkableNumber = registerLinkableChild(this, new LinkableNumber(0xFFFFFF, isFinite), applyStyle, true);
			public const cornerRadius:LinkableNumber    = registerLinkableChild(this, new LinkableNumber(0, isFinite), applyStyle, true);
			public const borderColor:LinkableNumber     = registerLinkableChild(this, new LinkableNumber(0x000000, isFinite), applyStyle, true);
			public const borderThickness:LinkableNumber = registerLinkableChild(this, new LinkableNumber(1.0, isFinite), applyStyle, true);
			public const padding:LinkableNumber         = registerLinkableChild(this, new LinkableNumber(10, isFinite), applyStyle, true);
			
			private const htmlTextFunction:LinkableFunction = newDisposableChild(this, LinkableFunction);
			
			override protected function constructor():void
			{
				super.constructor();
				
				minimizable.value = false;
				maximizable.value = false;
				enableBorders.addImmediateCallback(this, updateBorders);
			}
			
			override protected function updateForceEnableBorders():void
			{
				if (controlPanel.parent)
					super.updateForceEnableBorders();
				else
					forceEnableBorders.value = false;
			}
			
			override protected function childrenCreated():void
			{
				super.childrenCreated();
				
				linkSessionState(enableBorders, resizeable);
				linkBindableProperty(enableBorders, lockCheckBox, 'selected');
				linkBindableProperty(backgroundAlpha, backgroundAlphaSlider, "value");
				linkBindableProperty(backgroundColor, backgroundColorPicker, "selectedColor");
				linkBindableProperty(cornerRadius,    cornerRadiusSlider, "value" );
				linkBindableProperty(borderColor,     borderColorPicker, "selectedColor");
				linkBindableProperty(borderThickness, borderThicknessSlider, "value");
				linkBindableProperty(padding,         paddingSlider, "value");
				BindingUtils.bindSetter(handleTextAreaChange, textArea, 'htmlText');
				getCallbackCollection(Weave.root).addGroupedCallback(this, handleWeaveRootChange);

				getTextField().alwaysShowSelection = true;
				textArea.setStyle("focusAlpha", 0);
				
				applyStyle();
			}

			private function handleTextAreaChange(value:String):void
			{
				// we only want to save the session state if the control panel is open (the user is editing the text).
				if (controlPanel.parent)
					htmlText.value = value;
			}
			
			private function handleLinkableHtmlText():void
			{
				if (!parent)
				{
					callLater(handleLinkableHtmlText);
					return;
				}
				
				// use internal text field because the real _tempTextField loses formatting.
				var _tempTextField:IUITextField = textArea.mx_internal::getTextField();
				
				if (!_tempTextField)
				{
					reportError("Unexpected: textArea.mx_internal::getTextField() is null");
					return;
				}
				
				_tempTextField.htmlText = htmlText.value; // use the textField temporarily for getTextFormat,setTextFormat
				// make sure the text between each pair of { and } brackets only has a single format.
				var begin:int;
				var end:int = 0;
				while (true)
				{
					// find a pair of { and } brackets
					begin = _tempTextField.text.indexOf("{", end);
					if (begin < 0)
						break;
					end = _tempTextField.text.indexOf("}", begin);
					if (end < 0)
						break;
					
					// make sure the text between begin & end only has a single format
					var f:TextFormat = _tempTextField.getTextFormat(begin, end + 1);
					_tempTextField.setTextFormat(f, begin, end + 1);
					
//					// replace the text from { to }
//					var script:String = _tempTextField.text.substring(begin + 1, end);
//					htmlTextFunction.value = script;
//					_tempTextField.replaceText(begin, end + 1, String(htmlTextFunction.apply()));
				}
				
				htmlTextFunction.value = '`' + _tempTextField.htmlText.split('`').join('\\`') + '`';
				
				updateTextArea();
			}
			
			/**
			 * This function gets called when anything in Weave changes so that inline code within brackets can be re-evaluated.
			 */
			private function handleWeaveRootChange():void
			{
				// while the control panel is closed, update the text area in case inline code needs to be re-evaluated
				if (!controlPanel.parent)
					updateTextArea();
			}
			
			private function updateTextArea():void
			{
				if (!parent)
				{
					callLater(updateTextArea);
					return;
				}
				
				// if control panel is closed, evaluate inline code
				if (!controlPanel.parent)
				{
					textArea.editable = false;
					var newHtmlText:String;
					try
					{
						newHtmlText = htmlTextFunction.apply();
					}
					catch (e:Error)
					{
						reportError(e);
						newHtmlText = htmlText.value; // show literally what the user has typed
					}
					newHtmlText = resolveVariables(newHtmlText); // AAthesis
					textArea.htmlText = newHtmlText;
				}
				else
				{
					textArea.editable = true;
					textArea.htmlText = htmlText.value; // show literally what the user has typed
				}
			}
			
			private function applyStyle():void
			{
				if (!parent)
					return;
				textArea.setStyle("backgroundAlpha", backgroundAlpha.value);
				textArea.setStyle("backgroundColor", backgroundColor.value);
				textArea.setStyle("cornerRadius", cornerRadius.value);
				textArea.setStyle("paddingLeft", padding.value);
				textArea.setStyle("paddingRight", padding.value);
				textArea.setStyle("borderColor", borderColor.value);
				textArea.setStyle("borderThickness", borderThickness.value);
			}

			/**
			 * This function is called when the user presses the tool button.
			 */
			override public function toggleControlPanel():void
			{
				super.toggleControlPanel();
			}
			
 			private function getTextField():TextField
			{
				return textArea.mx_internal::getTextField();
			}
 			
			private function applyParagraphFormat(e:Event):void
			{
				if (false)
				{
					//TODO: fix this buggy code
					
					// Apply the paragraph styles to the whole paragraph instead of just the selected text
					var beginIndex:int = getTextField().selectionBeginIndex;
					var endIndex:int = getTextField().selectionEndIndex;
					
					beginIndex = getTextField().getFirstCharInParagraph(beginIndex) - 1;
					beginIndex = Math.max(0, beginIndex);
					endIndex = getTextField().getFirstCharInParagraph(endIndex);
					if (endIndex >= 0)
						endIndex += getTextField().getParagraphLength(endIndex) - 1;
					else
						endIndex = beginIndex + getTextField().getParagraphLength(beginIndex);
					applyTextFormat(e, beginIndex, endIndex);
				}
				else
				{
					applyTextFormat(e, 0, getTextField().length);
				}
			}
			
			private function applyTextFormat(e:Event, beginIndex:int = -1, endIndex:int = -1):void
			{
				// save selection & scroll position
				var selectionBeginIndex:int = getTextField().selectionBeginIndex;
				var selectionEndIndex:int = getTextField().selectionEndIndex;
				var vsp:int = textArea.verticalScrollPosition;
				if (beginIndex < 0)
					beginIndex = selectionBeginIndex;
				if (endIndex < 0)
					endIndex = selectionEndIndex;
				
				// get text format from gui
				var f:TextFormat = new TextFormat();
				if (e.target == fontFamilyCombo)
					f.font = fontFamilyCombo.selectedItem as String;
				if (e.target == fontSizeCombo)
					f.size = fontSizeCombo.selectedItem;
				if (e.target == boldButton)
					f.bold = boldButton.selected;
				if (e.target == italicButton)
					f.italic = italicButton.selected;
				if (e.target == underlineButton)
					f.underline = underlineButton.selected;
				if (e.target == colorPicker)
					f.color = colorPicker.selectedColor;
				if (e.target == paragraphCombo)
				{
					if (paragraphCombo.selectedIndex == 4)
					{
						f.bullet = true;
					}
					else
					{
						f.bullet = false;
						f.align = ['left','right','center','justify'][paragraphCombo.selectedIndex];
					}
				}
				
				// set text format using temporary text field
				getTextField().defaultTextFormat = f;
				if (beginIndex >= 0 && beginIndex < getTextField().length)
				{
					// compute new htmlText using temporary text field
					_tempTextField.htmlText = textArea.htmlText;
					// extra newline may get removed from htmlText, so make sure endIndex <= length
					endIndex = Math.min(endIndex, _tempTextField.length);
					if (beginIndex < endIndex)
						_tempTextField.setTextFormat(f, beginIndex, endIndex);
					htmlText.value = _tempTextField.htmlText;
				}
				
				textArea.setFocus();
				textArea.validateNow();
				
				// restore selection & scroll position
				selectionEndIndex = Math.min(selectionEndIndex, getTextField().length);
				getTextField().setSelection(selectionBeginIndex, selectionEndIndex);
				textArea.verticalScrollPosition = vsp;
			}
			
			private static const _tempTextField:TextField = new TextField(); // temporary reusable object
			
			
			
			/*************************************************
			 *                static section                 *
			 *************************************************/
			
		
		
			/**
			 * This function is called whenever the context menu is opened.
			 * The function will change the caption displayed depending upon where the context menu was opened.
			 */
			private static var _textAreaEditContextMenuItem:ContextMenuItem 	= null;
			private static var _textAreaAddRemoveContextMenuItem:ContextMenuItem = null;
			private static const ADD_CAPTION:String           = "Add Annotation"
			private static const REMOVE_CAPTION:String        = "Remove Annotation"
			private static const EDIT_TEXT_CAPTION:String     = "Edit Annotation"
			private static const fontSizeArray:Array = [8,9,10,11,12,14,16,18,20,22,24,26,28,36,48,72];
			private static const fontFamilyArray:Array = ['_sans','_serif','_typewriter','Arial','Courier','Courier New', 'Geneva', 'Georgia', 'Helvetica', 'Times New Roman', 'Times', 'Verdana'];
			
			private static function handleContextMenuOpened(e:ContextMenuEvent):void
			{	
				var textArea:SessionedTextBox = getTextAreaFromTarget(e.mouseTarget);	
				
				if( getLinkableContainer(e.mouseTarget) )
				{
					_textAreaAddRemoveContextMenuItem.enabled = true;
				}
				else
				{
					_textAreaAddRemoveContextMenuItem.enabled = false;
				}
				
				if ( textArea == null)
				{ 
					_textAreaAddRemoveContextMenuItem.caption = ADD_CAPTION;
					_textAreaEditContextMenuItem.enabled = false;
				}
				else
				{
					_textAreaAddRemoveContextMenuItem.caption = REMOVE_CAPTION;
					_textAreaEditContextMenuItem.enabled = true;
				}
			}
			
			public static function createContextMenuItems(destination:DisplayObject):Boolean
			{
				if(!destination.hasOwnProperty("contextMenu") )
					return false;
				
				
				// Add a listener to this destination context menu for when it is opened
				var contextMenu:ContextMenu = destination["contextMenu"] as ContextMenu;
				contextMenu.addEventListener(ContextMenuEvent.MENU_SELECT, handleContextMenuOpened);
				
				// Create a context menu item for printing of a single tool with title and logo
				_textAreaAddRemoveContextMenuItem   = CustomContextMenuManager.createAndAddMenuItemToDestination(ADD_CAPTION,destination,handleAddRemove,"2.1 textBoxMenuItem");
				_textAreaEditContextMenuItem        = CustomContextMenuManager.createAndAddMenuItemToDestination(EDIT_TEXT_CAPTION,destination,handleEdit,"2.1 textBoxMenuItem");
				
				return true;
			}
			
			
			/**
			 * This function is called by ChangeWindows.
			 * This will add a Text Box to whatever parent has been indicated.
			 * If the container passed is not an ILinkableContainer the Text Box is automatically placed on the visdesktop.
			 */
			private static function addTextAreaAndLabelToLocation(container:*, x:Number=0, y:Number=0):void
			{	
				var linkableContainer:ILinkableContainer = container as ILinkableContainer;
				
				if ( linkableContainer )
				{
					var name:String = linkableContainer.getLinkableChildren().generateUniqueName("Label");
					var newTextArea:SessionedTextBox = linkableContainer.getLinkableChildren().requestObject(name, SessionedTextBox,false);
					newTextArea.toggleControlPanel();
				}
			}
			
			/**
			 * This function is called when Remove is selected in the Context Menu.
			 * It checks for a TextArea, and if found will attempt to remove the TextArea and associated TextBox. 
			 */
			private static function removeWindows(e:ContextMenuEvent):void
			{
				var parent:ILinkableContainer = getLinkableContainer(getTextAreaFromTarget(e.mouseTarget));
				
				if ( getTextAreaFromTarget(e.mouseTarget) != null ) {				
					if ( parent is ILinkableContainer ) {
						var textArea:SessionedTextBox = getTextAreaFromTarget(e.mouseTarget);
						
						var name:String = parent.getLinkableChildren().getName(textArea);
						parent.getLinkableChildren().removeObject(name);
					}
				}
			}
			/**
			 * This function is passed a target and checks to see if the target was a TextBox.
			 * Either a TextBox or null will be returned.
			 */
			private static function getTextAreaFromTarget(target:*):SessionedTextBox
			{
				var targetComponent:* = target;
				
				while(targetComponent)
				{
					if(targetComponent is SessionedTextBox)
						return targetComponent as SessionedTextBox;
					targetComponent = targetComponent.parent;
				}
				
				return targetComponent;
			}
			
			/**
			 * This function is passed a target and checks to see if the target is an ILinkableContainer.
			 * Either a ILinkableContainer or null will be returned.
			 */
			private static function getLinkableContainer(target:*):*
			{
				var targetComponent:* = target;
				
				while(targetComponent)
				{
					if(targetComponent is ILinkableContainer)
						return targetComponent as ILinkableContainer;
					
					targetComponent = targetComponent.parent;
				}
				
				return targetComponent;
			}
			
			/**
			 * This function handles what occurs when an option in the context menu involving the Text Box tool is selected.
			 * It is linked to the Text Box tool options by the createContextMenuItems function.
			 */
			private static function handleAddRemove(e:ContextMenuEvent):void
			{
				var parent:ILinkableContainer = getLinkableContainer(e.mouseTarget);
				var textArea:SessionedTextBox = getTextAreaFromTarget(e.mouseTarget);
				
				// if the user did not right click on a TextBox or the editor for one
				if ( textArea == null) 
				{
					// add text area to this container
					addTextAreaAndLabelToLocation(parent, e.mouseTarget.mouseX, e.mouseTarget.mouseY);
				}
				else
				{
					textArea.removePanel();
				}
			}
			
			private static function handleEdit(e:ContextMenuEvent):void
			{
				var textArea:SessionedTextBox = getTextAreaFromTarget(e.mouseTarget);
				if (textArea)
				{
					textArea.sendWindowToForeground();
					textArea.toggleControlPanel();
				}
			}
			
			
			
			
			
			
			
			
			
			
			
			
			
			//////////////////////////////////////////////////////////////////
			
			// AAthesis
			
			//Convert the variable name contained within <> to it's actual value
			private function resolveVariables(htmlText:String):String
			{
				if(textArea.editable)
					return htmlText;
				trace("html text is " + htmlText);
				//Find first occurence of &lt; &rt; (html equivalent of < >)
				var bracketLength:int = 4;
				var startIndex:int = htmlText.search("&lt;");
				var endIndex:int = htmlText.search("&rt;") + bracketLength;
				//Get the global session manager in order to get anything from the session state
				var sessionManager:SessionManager = (WeaveAPI.SessionManager as SessionManager);
				
				//Iterate through each {variable} in the user entered text
				//startIndex is -1 when it reaches the end of the string
				while(startIndex!=-1){
					
					//Get the start index of the next variable
					startIndex = htmlText.search("&lt;");
					//If startIndex is -1 we don't want to continue
					if(startIndex == -1) break;
					endIndex = htmlText.search("&gt;") + bracketLength;
					//Contains each variable the user entered with {}
					var variableTag:String = htmlText.substring(startIndex, endIndex);
					
					var strippedVariableTag:String = variableTag.replace(/<[^>]*>/g, "");
					
					//Removes the {} from variableTag
					var variable:String = strippedVariableTag.substring(bracketLength, strippedVariableTag.length-bracketLength);
					
					//Obtains the path the user entered
					var path:Array = variable.split("/");
					//The session state associated with each variable in the path
					var state:Object = null;
					//If user is requesting a value from a column, get the specific value to replace the variable with
					if(path[0].toString().search("getValueAt")>=0){
						state = getValueFromTag(path[0].toString());
					}
						//Otherwise, resolve the variable to a path from the session state
					else {
						//Try to get the object associated with the first variable in the path from the root session state
						var root:ILinkableObject = Weave.root.getObject(path[0]);
						trace("root is " + root);
						//If the requested object is contained in the root, get the session state for that object
						if(root){
							//Get the session state associated with the first item in the path
							state =  sessionManager.getSessionState(root);
							//Iterate through the rest of the items in the path
							for(var i:int=1;i<path.length;i++){						
								state = state[path[i]];
								
								if(state == null)
									break;
							}
						}
						//If the user entered an invalid path/variable, alert them
						if(root==null)
							state = "~" + variable + "~";
					}
					if(state==null)
						state = "null";
					
					trace("variable tag and state " + htmlText + " " + variableTag + " " + state);
					
					
					htmlText = htmlText.replace(variableTag,state);
					//Replace the current variable tag with the resolved variable value
					//				htmlText = htmlText.("[[","{");				
					//				htmlText = htmlText.replace("]]","}");
					
				}
				return htmlText;
			}
			
			
			private const DATA_SOURCE:int = 0;
			private const COLUMN_NAME:int = 1;
			private const ROW_IDENTIFIER:int = 2;
			private const NUM_PARAMS:int = 3;
			
			private function getValueFromTag(tag:String):String
			{
				var params:Array = tag.replace("getValueAt(", "").replace(")","").split(",");
				//User needs to enter a value for data source, column name and either a key or row index
				if(params.length!=NUM_PARAMS)
					return null;
				
				return getValueAt(params[DATA_SOURCE], params[COLUMN_NAME], params[ROW_IDENTIFIER]);
			}
			
			/*
			<getValueAt(obesity.csv,State,39)>
			*/
			
			private function getValueAt(dataSourceName:String, columnName:String, key:String):String {
				
				var path:Array = dataSourceName.split("/");
				if(dataSourceName.search("/") > 0) {
					//The session state associated with each variable in the path
					var state:Object = null;
					
					var dataSource:IDataSource = Weave.root.getObject(path[0]) as IDataSource;
					trace( (dataSource.attributeHierarchy as AttributeHierarchy).value.children().toXMLString() );
					//If the requested object is contained in the root, get the session state for that object
					if(dataSource){
						var sessionManager:SessionManager = (WeaveAPI.SessionManager as SessionManager);
						//Get the session state associated with the first item in the path
						state =  sessionManager.getSessionState(dataSource.attributeHierarchy);
						//Iterate through the rest of the items in the path
						for(var i:int=1;i<path.length;i++){						
							state = state[path[i]];
							
							if(state == null)
								break;
						}
						
						ObjectUtil.toString(state);
					}
				}
				else {
					var dataSource:IDataSource = Weave.root.getObject(path[0]) as IDataSource;
				}
				var columnList:XMLList = (dataSource.attributeHierarchy as AttributeHierarchy).value.descendants();
				var columnReference:HierarchyColumnReference = new HierarchyColumnReference();
				columnReference.dataSourceName.value = dataSourceName;
				trace(columnList.toXMLString());
				columnReference.hierarchyPath.value = columnList.(@csvColumn == columnName)[0];
				var column:IAttributeColumn = WeaveAPI.AttributeColumnCache.getColumn(columnReference);
				var type:String = ColumnUtils.getKeyType(column);
				
				return column.getValueFromKey(WeaveAPI.QKeyManager.getQKey(type,key));;
				return null;
			}
		]]>
	</mx:Script>
</ui:DraggablePanel>
