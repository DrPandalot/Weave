<?xml version="1.0" encoding="utf-8"?>
<!--
/*
Weave (Web-based Analysis and Visualization Environment)
Copyright (C) 2008-2011 University of Massachusetts Lowell

This file is a part of Weave.

Weave is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License, Version 3,
as published by the Free Software Foundation.

Weave is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with Weave.  If not, see <http://www.gnu.org/licenses/>.
*/


@author skolman
@author adufilie
-->

<ControlPanel xmlns="weave.ui.*" xmlns:mx="http://www.adobe.com/2006/mxml"
			  backgroundColor="#EFF4BC"
			  horizontalScrollPolicy="off" verticalScrollPolicy="off"
			  xmlns:LinkableObjectList="weave.ui.LinkableObjectList*"
			  title="Disability Options"
			  sessionPanelCoordsAsPercentages="false"
			  width="400"
			  height="400"
			  >
	
	<mx:HDividedBox id="disabilityOptions" width="100%"
					height="100%"
					paddingBottom="{padding}"
					paddingTop="{padding}"
					paddingRight="{padding}"
					paddingLeft="{padding}">
		<mx:TabNavigator borderStyle="inset" height="100%">
			
			
			<mx:VBox label="Basic"
					 width="100%"
					 height = "100%"
					 verticalAlign="top"
					 horizontalAlign="left"
					 >
				<mx:Label text="HTML Alt Text:"
						  textAlign="left"/>
				
				<mx:TextArea
					id="altTextInputBox"
					horizontalCenter="true"
					toolTip="Text entered here will be used to set the html alt attribute for this instance of Weave when it is embedded in a web page. This input field is restricted to 125 characters. The alt attribute is used by standard screen reading tools to give information about graphics elements for to blind or visually impaired individuals."
					width="100%"
					height = "30%"
					backgroundColor="#EEEEEE"
					editable = "true" 
					maxChars="50" 
					wordWrap="true"/>
				
			</mx:VBox>
			<mx:VBox label="Advanced"
					 width="100%"
					 height = "100%"
					 verticalAlign="top"
					 horizontalAlign="left"
					 >
				<mx:Label text="longdesc text"
						  textAlign="left"/>
				
				<mx:TextArea
					id="longDescTextInputBox"
					horizontalCenter="true"
					toolTip="Text entered here will be used to set the html longdesc attribute for this instance of Weave when it is embedded in a web page. This input size is not restricted but it is not recommended that it be any longer than necessary."
					width="100%"
					height = "30%"
					backgroundColor="#EEEEEE"  
					wordWrap="true"/>
				
				<mx:VBox verticalScrollPolicy="on" id="menuToggleVBox">
					
					
					<mx:Script>
						<![CDATA[
							import mx.controls.CheckBox;
							import mx.controls.TextInput;
							import mx.events.FlexEvent;
							
							import weave.Weave;
							import weave.api.WeaveAPI;
							import weave.api.reportError;

							
							private const padding:int = 5;
							private var cbArray:Array = [];
							private var selectedCB : CheckBox;
							public var disabilityAltText:String;
							
							override protected function constructor():void
							{
								super.constructor();
								
								panelWidth.value = "70%";
								panelHeight.value = "70%";
								panelX.value = "15%";
								panelY.value = "15%";
							}
							
						
							override protected function childrenCreated():void
							{
								super.childrenCreated();
								
								var panels:Array = [];
								panels = getWindowsOnStage();
						
								var cb:CheckBox;
								
								reportError("children create");
								
								for each(var panel:DraggablePanel in panels)
								{
									
									cb = new CheckBox();
									//        linkBindableProperty(, cb, 'selected');
									cb.label = panel.title;
									cb.toolTip = "Checking this box appends " + cb.label + " destination to the above text";
									
									
									cbArray.push(cb);
								}                      
								
								cbArray.sortOn('label');
								for each (cb in cbArray)
								{
									menuToggleVBox.addChild(cb);
									
									//cb.addEventListener( MouseEvent.CLICK, onChangeEvent_checkBox );//one checkbox is able to be checked in a time
									longDescTextInputBox.enabled = false;

									cb.addEventListener(MouseEvent.CLICK, clickHandler);
									
								}
								
								addEventListener(FlexEvent.SHOW, panelRemovedEventHandler);
								
								//addEventListener(FlexEvent.ENTER_FRAME, panelRemovedEventHandler);
								//menuToggleVBox.addEventListener(FlexEvent.REMOVE, panelRemovedEventHandler);
								//longDescTextInputBox.text = 
								//textEditor.text = equationColumn.equation.value;
								//EventUtils.addDelayedEventCallback(textEditor, Event.CHANGE, handleEquationTextEntry);
								
							}
							/**one checkbox is able to be checked in a time*/
							/*private function onChangeEvent_checkBox( event:MouseEvent) :void
							{
								var currentCB : CheckBox = CheckBox( event.target );
								if( selectedCB && currentCB !== selectedCB )
									selectedCB.selected = false;
								
								
						
								selectedCB = ( currentCB.selected ) ? currentCB : null;
							}*/

							
							protected function panelRemovedEventHandler(event:Event):void {
								
								var Name : String = WeaveAPI.getRegisteredImplementationDisplayName(event.currentTarget as Class) || getQualifiedClassName(event.currentTarget).split(':').pop();
								var cb:CheckBox   = null;
								
								var panels:Array = [];
								reportError("Enter Panel Removed Event Handler");
								
								
								cbArray = [];
								menuToggleVBox.removeAllChildren();
								
								panels = getWindowsOnStage();
								
								for each(var panel:DraggablePanel in panels)
								{
									
									cb = new CheckBox();
									//cb.label = WeaveAPI.getRegisteredImplementationDisplayName(panel as Class) || getQualifiedClassName(panel).split(':').pop();
									cb.label=panel.title;
									//        linkBindableProperty(, cb, 'selected');
									cb.toolTip = "Checking this box appends " + cb.label + " description to the above text";
									
									cbArray.push(cb);
									
								}             
								
								cbArray.sortOn('label');
								for each (cb in cbArray)
								{
									menuToggleVBox.addChild(cb);
			
									//cb.addEventListener(MouseEvent.CLICK, onChangeEvent_checkBox );
									longDescTextInputBox.enabled = false;
									cb.addEventListener(MouseEvent.CLICK, clickHandler);		
								}
							}
							
							protected function clickHandler(event:MouseEvent):void {
								
								
								
								//longDescTextInputBox.enabled = event.target.selected; //textInput is enabled only checkbox is selected
								longDescTextInputBox.text += event.target.text;
								
			
								//longDescTextInputBox.text += event.currentTarget.text;
								
								//longDescTextInputBox.text = event.currentTarget.value;
								
			
								
							}
							
							private function getAltText():void {
								
								disabilityAltText = altTextInputBox.text;
							}
						
							private function getWindowsOnStage(): Array
							{
								var panels:Array = Weave.root.getObjects(DraggablePanel);
								var panelsOnStage:Array = [];
								
								for each (var panel:DraggablePanel in panels)
								{
									if (!panel.minimized.value)
										panelsOnStage.push(panel);
									//panelsOnStage.push(panel.title);
								}
								
								return panelsOnStage;
							}
							private function handleLinkableHtmlText():void
							{
							
							}
							
						]]>
					</mx:Script>	
				</mx:VBox>	
			</mx:VBox>
		</mx:TabNavigator>
	</mx:HDividedBox>
</ControlPanel>
