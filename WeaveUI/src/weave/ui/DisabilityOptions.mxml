<?xml version="1.0" encoding="utf-8"?>
<!--
/*
Weave (Web-based Analysis and Visualization Environment)
Copyright (C) 2008-2011 University of Massachusetts Lowell

This file is a part of Weave.

Weave is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License, Version 3,
as published by the Free Software Foundation.

Weave is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with Weave.  If not, see <http://www.gnu.org/licenses/>.
*/
-->

<!---
@author fkamayou
@author mervetuccar
@author hbyrne
-->

<ControlPanel xmlns="weave.ui.*"
			  xmlns:mx="http://www.adobe.com/2006/mxml"
			  xmlns:LinkableObjectList="weave.ui.LinkableObjectList.*"
			  width="400" height="400" backgroundColor="#EFF4BC" horizontalScrollPolicy="off"
			  implements="weave.api.core.ILinkableObject" sessionPanelCoordsAsPercentages="false"
			  title="Disability Options" verticalScrollPolicy="off">
	<mx:HDividedBox id="disabilityOptions" width="100%" height="100%" paddingBottom="{padding}"
					paddingLeft="{padding}" paddingRight="{padding}" paddingTop="{padding}">
		
		<mx:TabNavigator y="11" width="331" height="341" borderStyle="inset">
			
			<mx:VBox width="100%" height="100%" label="General Description" horizontalAlign="left"
					 verticalAlign="top">
				<mx:TextArea id="generalDescriptionTextInputBox" width="367" height="93"
							  backgroundColor="#EEEEEE" editable="true" horizontalCenter="-1"
							  wordWrap="true" text="Weave Visualization."
							  toolTip="Enter a general desciption of your visualizations."
							  creationComplete="linkBindableProperty(generalDescription, event.target,'text')"/>
			</mx:VBox>
			
			<mx:VBox width="100%" height="100%" label="Detailed Description" horizontalAlign="left"
					 verticalAlign="top">

				<mx:TextArea id="detailedDescriptionTextInputBox" width="350" height="95"
							  backgroundColor="#EEEEEE" enabled="true" horizontalCenter="-9"
							  wordWrap="true"
							  editable="false" toolTip="Select the detailed description available from the visualizations below."
							  creationComplete="linkBindableProperty(detailedDescription, event.target, 'text')"/>
				
			<!--	<mx:Button label="Refresh Visualizations" click="updateCheckBoxes()" paddingLeft="2"
						   paddingRight="2" toolTip="Refresh the list of visualizations"/>	-->			
				
				<mx:List id="VisCheckboxes" width="350" height="189">
					<mx:itemRenderer>
						<mx:Component>
							<mx:CheckBox
								change="outerDocument.updateDetailedDescription()">
								<mx:Script>
									<![CDATA[
										import weave.api.WeaveAPI;
										import weave.api.linkBindableProperty;
										import weave.api.unlinkBindableProperty;
										import weave.visualization.tools.SimpleVisTool;
										
										private function get tool():SimpleVisTool
										{
											return data as SimpleVisTool;
										}
										
										override public function set data(value:Object):void
										{
											if (tool)
												unlinkBindableProperty(tool.disability.includeInDesc, this, 'selected');
											super.data = value;
											if (tool)
												linkBindableProperty(tool.disability.includeInDesc, this, 'selected');
											this.label = WeaveAPI.globalHashMap.getName(tool);
										}
									]]>
								</mx:Script>
							</mx:CheckBox>
						</mx:Component>
					</mx:itemRenderer>
				</mx:List>
				
			</mx:VBox>
				
			<mx:VBox width="100%" height="100%" label="Alt Text" horizontalAlign="left"
					 verticalAlign="top">

				<mx:CheckBox id="useGeneralDescriptionCheckBox" toolTip="Add the general description to the Alt Text"
							 label="General Description" selected="true"
							 creationComplete="linkBindableProperty(useGeneralDescription, event.target, 'selected')"/>
				<mx:CheckBox id="useDetailedDescriptionCheckBox" toolTip="Add the detailed description to the Alt Text"
							 label="Detailed Description"
							 creationComplete="linkBindableProperty(useDetailedDescription, event.target, 'selected')"/>
				<mx:TextArea id="AltTextTextArea" width="80%" height="50%"
							 backgroundColor="#EEEEEE" editable="false" text="{generalDescriptionTextInputBox.text}"
							 toolTip="This is the text that will be available for accessibility."/>
			</mx:VBox>
					
					<mx:Script>
						<![CDATA[
							import weave.api.ui.IAltText;
							import flash.external.ExternalInterface;
							
							import mx.accessibility.CheckBoxAccImpl;
							import mx.controls.CheckBox;
							import mx.controls.ComboBox;
							import mx.controls.List;
							import mx.controls.Menu;
							import mx.controls.TextArea;
							import mx.controls.TextInput;
							import mx.core.IUIComponent;
							import mx.events.DragEvent;
							import mx.events.FlexEvent;
							import mx.managers.DragManager;
							
							import weave.Weave;
							import weave.api.WeaveAPI;
							import weave.api.core.IDisposableObject;
							import weave.api.core.ILinkableObject;
							import weave.api.detectLinkableObjectChange;
							import weave.api.linkBindableProperty;
							import weave.api.linkSessionState;
							import weave.api.newDisposableChild;
							import weave.api.newLinkableChild;
							import weave.api.registerLinkableChild;
							import weave.api.reportError;
							import weave.api.ui.ILinkableObjectEditor;
							import weave.core.DynamicState;
							import weave.core.LinkableBoolean;
							import weave.core.LinkableHashMap;
							import weave.core.LinkableString;
							import weave.core.SessionManager;
							import weave.editors.Disability;
							import weave.ui.ControlPanel;
							import weave.ui.SessionStateEditor;
							import weave.visualization.tools.SimpleVisTool;							
							
							private const useGeneralDescription:LinkableBoolean = new LinkableBoolean(false);
							private const useDetailedDescription:LinkableBoolean = new LinkableBoolean(false);
							
							public const generalDescription:LinkableString = registerLinkableChild(this,new LinkableString("Weave instance"));
							public const detailedDescription:LinkableString = registerLinkableChild(this, new LinkableString());
							public const AltText:LinkableString = registerLinkableChild(this, new LinkableString());
							
							private const padding:int = 5;
							private var _visTools:Array = null;	
						
							private var _description:String = "";
							private var _selectedCheckBoxLabelArray : Array = [];
							
							override protected function constructor():void
							{
								super.constructor();
								WeaveAPI.globalHashMap.childListCallbacks.addGroupedCallback(this, setVisTools, true);
								panelWidth.value = "70%";
								panelHeight.value = "70%";
								panelX.value = "15%";
								panelY.value = "15%";
								
							}
						
							override protected function childrenCreated():void
							{
								super.childrenCreated();
								
								Weave.properties.disabilityAltText.addImmediateCallback(this, handleDisabilityAltTextChange);
								useGeneralDescription.addImmediateCallback(this, handleAltText);
								useDetailedDescription.addImmediateCallback(this, handleAltText);
								//addEventListener(FlexEvent.SHOW, panelRemovedEventHandler);	
								//Weave.properties.disabilityHashMap.addDisposeCallback(label, updateCheckBoxes);
							}
							protected function handleDisabilityAltTextChange() : void
							{
								ExternalInterface.call("function(altText) { var weaveAltImg = document.getElementById(\"weaveAltImg\"); weaveAltImg.alt = altText;}",
									Weave.properties.disabilityAltText.value
								);									  
							}
						
							private function setVisTools() : void
							{
								VisCheckboxes.dataProvider = _visTools = WeaveAPI.globalHashMap.getObjects(IAltText);
							}
							
							public function updateDetailedDescription():void
							{
								var text:String = "";
								
								for each (var visTool:SimpleVisTool in _visTools)
									if (visTool.disability.includeInDesc)
										detailedDescriptionTextInputBox.text += visTool.disability.toolDescription.value  + "\n";
							}
							
							protected function handleAltText():void
							{
								if (useGeneralDescription.value)
								{
									if(useDetailedDescription.value)
									{
		
										Weave.properties.disabilityAltText.value = generalDescriptionTextInputBox.text + "\n" + detailedDescriptionTextInputBox.text;
										AltTextTextArea.text = Weave.properties.disabilityAltText.value;
									} else
									{
										Weave.properties.disabilityAltText.value = generalDescriptionTextInputBox.text;
										AltTextTextArea.text = Weave.properties.disabilityAltText.value;
									}
								} else
								{
									if(useDetailedDescription.value)
									{
										Weave.properties.disabilityAltText.value = detailedDescriptionTextInputBox.text;
										AltTextTextArea.text = Weave.properties.disabilityAltText.value;
									} else
									{
										Weave.properties.disabilityAltText.value = "";
										AltTextTextArea.text ="";
									}
								}
							}
							
						]]>
					</mx:Script>	
		</mx:TabNavigator>
	</mx:HDividedBox>
</ControlPanel>