<?xml version="1.0" encoding="utf-8"?>
<!--
/* ***** BEGIN LICENSE BLOCK *****
 *
 * This file is part of Weave.
 *
 * The Initial Developer of Weave is the Institute for Visualization
 * and Perception Research at the University of Massachusetts Lowell.
 * Portions created by the Initial Developer are Copyright (C) 2008-2015
 * the Initial Developer. All Rights Reserved.
 *
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this file,
 * You can obtain one at http://mozilla.org/MPL/2.0/.
 * 
 * ***** END LICENSE BLOCK ***** */
-->
<ui:CustomViewStack xmlns="weave.editors.*" 
				xmlns:mx="http://www.adobe.com/2006/mxml"
				xmlns:ui="weave.ui.*"
				horizontalScrollPolicy="off"
				verticalScrollPolicy="off"
				width="100%" height="100%">
	<mx:Canvas label="{lang('List')}">
		<mx:List id="choiceList" width="100%" height="100%"
				 change="chosenItem = choiceList.selectedItem;"
				 backgroundAlpha="0" borderStyle="none"
				 />
	</mx:Canvas>
	<mx:Canvas label="{lang('Combo Box')}">
		<ui:CustomComboBox id="choiceCombo"
						width="100%" height="100%" minHeight="0"
						prompt="{prompt}"
						valueCommit="if (UIUtils.hasFocus(choiceCombo)) chosenItem = choiceCombo.selectedItem;"
						change="if (alwaysShowPrompt) choiceCombo.selectedIndex = -1;"
						/>
	</mx:Canvas>
	<mx:Canvas label="{lang('Vertical Slider')}">
		<mx:VSlider id="choiceVSlider" liveDragging="true" tickInterval="1"
					width="100%" height="100%" snapInterval="1" minimum="0" minHeight="0" showDataTip="false"
					change="if (UIUtils.hasFocus(choiceVSlider)) chosenItem = _choices[choiceVSlider.maximum - choiceVSlider.value];"
					mouseDown="choiceVSlider.setFocus()"
					/><!-- slider may not have focus (bar may be clicked instead of thumb) -->
	</mx:Canvas>
	<mx:Canvas label="{lang('Horizontal Slider')}">
		<mx:HBox verticalAlign="middle" width="100%" height="100%">
			<mx:HSlider id="choiceHSlider" liveDragging="true" tickInterval="1"
						width="100%" height="100%" snapInterval="1" minimum="0" minHeight="0" showDataTip="false"
						change="if (UIUtils.hasFocus(choiceHSlider)) chosenItem = _choices[choiceHSlider.value];"
						mouseDown="choiceHSlider.setFocus()"
						/><!-- slider may not have focus (bar may be clicked instead of thumb) -->
		</mx:HBox>
	</mx:Canvas>
	<mx:Script>
		<![CDATA[
			import weave.compiler.StandardLib;
			import weave.core.UIUtils;

			public static const LAYOUT_LIST:String = "List";
			public static const LAYOUT_COMBO:String = "ComboBox";
			public static const LAYOUT_VSLIDER:String = "VSlider";
			public static const LAYOUT_HSLIDER:String = "HSlider";
			
			public static const LAYOUTS:Array = [LAYOUT_LIST, LAYOUT_COMBO, LAYOUT_VSLIDER, LAYOUT_HSLIDER];
			private static const layoutLabels:Array = [lang('List'), lang('Combo Box'), lang('Vertical Slider'), lang('Horizontal Slider')];
			public static function layoutLabelFunction(layoutMode:String):String
			{
				return layoutLabels[LAYOUTS.indexOf(layoutMode)];
			}
			
			[Bindable] public var alwaysShowPrompt:Boolean = false;
			[Bindable] public var prompt:String;
			
			private var _choices:Array = [];
			private var _labelFunction:Function;
			private var _chosenItem:Object = null;
			
			public function set layoutMode(name:String):void
			{
				this.selectedIndex = LAYOUTS.indexOf(name);
			}
			
			public function set choices(items:Array):void
			{
				_choices = items || [];
				if (parent)
					handleChoicesChange();
				else
					callLater(handleChoicesChange);
			}
			
			public function set choiceLabelFunction(func:Function):void
			{
				_labelFunction = func;
				if (parent)
					handleChoicesChange();
				else
					callLater(handleChoicesChange);
			}
			
			private function handleChoicesChange():void
			{
				choiceCombo.dataProvider = _choices;
				choiceList.dataProvider = _choices;
				
				choiceCombo.labelFunction = _labelFunction;
				choiceList.labelFunction = _labelFunction;
				
				// get a list of labels
				var labels:Array;
				if (_labelFunction is Function)
				{
					labels = [];
					for each (var choice:Object in _choices)
						labels.push(_labelFunction(choice));
				}
				else
					labels = _choices;
				
				// special case for VSlider -- reverse order
				choiceVSlider.labels = labels.concat().reverse();
				choiceHSlider.labels = labels;
				choiceVSlider.maximum = labels.length - 1;
				choiceHSlider.maximum = labels.length - 1;
				
				updateViews();
			}
			
			private function updateViews():void
			{
				// need to check each item for equality because indexOf() won't work comparing String vs Number
				var chosenIndex:int = _choices.length;
				while (chosenIndex--)
					if (_choices[chosenIndex] == _chosenItem)
						break;
				
				if (choiceList.selectedIndex != chosenIndex)
					choiceList.selectedIndex = chosenIndex;
				
				if (alwaysShowPrompt)
					choiceCombo.selectedIndex = -1;
				else if (choiceCombo.selectedIndex != chosenIndex)
					choiceCombo.selectedIndex = chosenIndex;
				
				if (choiceHSlider.value != chosenIndex)
					choiceHSlider.value = chosenIndex;
				
				var vIndex:int = _choices.length - 1 - chosenIndex;
				if (choiceVSlider.value != vIndex)
					choiceVSlider.value = vIndex;
			}
			
			[Bindable(event="choiceChange")]
			public function get chosenItem():Object
			{
				return _chosenItem;
			}
			
			public function set chosenItem(item:Object):void
			{
				if (_chosenItem == item)
					return;
				
				_chosenItem = item;
				updateViews();
				dispatchEvent(new Event("choiceChange"));
			}
			
			[Bindable(event="choiceChange")]
			public function get chosenItems():Array
			{
				// TEMPORARY SOLUTION - MULTI SELECT NOT SUPPORTED YET
				return [_chosenItem];
			}
			
			public function set chosenItems(items:Array):void
			{
				// TEMPORARY SOLUTION - MULTI SELECT NOT SUPPORTED YET
				if (StandardLib.compare([_chosenItem], items) == 0)
					return;
				
				_chosenItem = items[0];
				updateViews();
				dispatchEvent(new Event("choiceChange"));
			}
		]]>
	</mx:Script>
</ui:CustomViewStack>
