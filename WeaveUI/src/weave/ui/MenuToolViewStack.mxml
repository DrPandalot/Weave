<?xml version="1.0" encoding="utf-8"?>
<!--
/*
    Weave (Web-based Analysis and Visualization Environment)
    Copyright (C) 2008-2011 University of Massachusetts Lowell

    This file is a part of Weave.

    Weave is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License, Version 3,
    as published by the Free Software Foundation.

    Weave is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with Weave.  If not, see <http://www.gnu.org/licenses/>.
*/
-->
<ui:CustomViewStack xmlns="weave.editors.*" 
				xmlns:mx="http://www.adobe.com/2006/mxml"
				xmlns:ui="weave.ui.*"
				horizontalScrollPolicy="off"
				verticalScrollPolicy="off"
				width="100%" height="100%">
	<mx:Canvas label="{lang('List')}">
		<mx:List id="choiceList" width="100%" height="100%"
				 change="handleUserSelection(choiceList.selectedIndex);"
				 backgroundAlpha="0" borderStyle="none"
				 />
	</mx:Canvas>
	<mx:Canvas label="{lang('Combo Box')}">
		<ui:CustomComboBox id="choiceCombo"
						width="100%" height="100%" minHeight="0"
						prompt="{prompt}"
						valueCommit="if (UIUtils.hasFocus(choiceCombo)) handleUserSelection(choiceCombo.selectedIndex);"
						change="if (alwaysShowPrompt) choiceCombo.selectedIndex = -1;"
						/>
	</mx:Canvas>
	<mx:Canvas label="{lang('Vertical Slider')}">
		<mx:VSlider id="choiceVSlider" liveDragging="true" tickInterval="1"
					width="100%" height="100%" snapInterval="1" minimum="0" minHeight="0" showDataTip="false"
					change="handleUserSelection(choiceVSlider.maximum - choiceVSlider.value);"
					mouseDown="choiceVSlider.setFocus()"
					/><!-- slider may not have focus (bar may be clicked instead of thumb) -->
	</mx:Canvas>
	<mx:Canvas label="{lang('Horizontal Slider')}">
		<mx:HBox verticalAlign="middle" width="100%" height="100%">
			<mx:HSlider id="choiceHSlider" liveDragging="true" tickInterval="1"
						width="100%" height="100%" snapInterval="1" minimum="0" minHeight="0" showDataTip="false"
						change="handleUserSelection(choiceHSlider.value);"
						mouseDown="choiceHSlider.setFocus()"
						/><!-- slider may not have focus (bar may be clicked instead of thumb) -->
		</mx:HBox>
	</mx:Canvas>
	<mx:Script>
		<![CDATA[
			import weave.core.UIUtils;

			public static const LAYOUT_LIST:String = "List";
			public static const LAYOUT_COMBO:String = "ComboBox";
			public static const LAYOUT_VSLIDER:String = "VSlider";
			public static const LAYOUT_HSLIDER:String = "HSlider";
			
			public static const LAYOUTS:Array = [LAYOUT_LIST, LAYOUT_COMBO, LAYOUT_VSLIDER, LAYOUT_HSLIDER];
			private static const layoutLabels:Array = [lang('List'), lang('Combo Box'), lang('Vertical Slider'), lang('Horizontal Slider')];
			public static function layoutLabelFunction(layoutMode:String):String
			{
				return layoutLabels[LAYOUTS.indexOf(layoutMode)];
			}
			
			[Bindable] public var alwaysShowPrompt:Boolean = false;
			[Bindable] public var prompt:String;
			
			private var _choices:Array = [];
			private var _labelFunction:Function;
			private var _chosenIndex:int = -1;
			
			public function set layoutMode(name:String):void
			{
				this.selectedIndex = LAYOUTS.indexOf(name);
			}
			
			public function set choices(items:Array):void
			{
				_choices = items || [];
				if (parent)
					handleChoicesChange();
				else
					callLater(handleChoicesChange);
			}
			
			public function set choiceLabelFunction(func:Function):void
			{
				_labelFunction = func;
				if (parent)
					handleChoicesChange();
				else
					callLater(handleChoicesChange);
			}
			
			private function handleChoicesChange():void
			{
				choiceCombo.dataProvider = _choices;
				choiceList.dataProvider = _choices;
				
				choiceCombo.selectedIndex = _chosenIndex;
				choiceList.selectedIndex = _chosenIndex;
				
				choiceCombo.labelFunction = _labelFunction;
				choiceList.labelFunction = _labelFunction;
				
				// get a list of labels
				var labels:Array;
				if (_labelFunction is Function)
				{
					labels = [];
					for each (var choice:Object in _choices)
						labels.push(_labelFunction(choice));
				}
				else
					labels = _choices;
				
				// special case for VSlider -- reverse order
				choiceVSlider.labels = labels.concat().reverse();
				choiceHSlider.labels = labels;
				choiceVSlider.maximum = labels.length - 1;
				choiceHSlider.maximum = labels.length - 1;
			}
			
			private function handleUserSelection(index:int):void
			{
				var comboIndex:int = alwaysShowPrompt ? -1 : index;
				if (choiceCombo.selectedIndex != comboIndex)
					choiceCombo.selectedIndex = comboIndex;
				
				if (choiceList.selectedIndex != index)
					choiceList.selectedIndex = index;
				
				if (_chosenIndex >= 0)
				{
					if (choiceHSlider.value != index)
						choiceHSlider.value = index;
					
					var vIndex:int = _choices.length - 1 - index;
					if (choiceVSlider.value != vIndex)
						choiceVSlider.value = vIndex;
				}
				
				chosenIndex = index;
			}
			
			[Bindable(event="choiceChange")]
			public function get chosenIndex():int
			{
				return _chosenIndex;
			}
			
			public function set chosenIndex(value:int):void
			{
				if (value == _chosenIndex)
					return;
				
				_chosenIndex = value;
				handleUserSelection(value);
				dispatchEvent(new Event("choiceChange"));
			}
			
			[Bindable(event="choiceChange")]
			public function get chosenItem():Object
			{
				return _choices[_chosenIndex];
			}
			
			public function set chosenItem(value:Object):void
			{
				chosenIndex = _choices.indexOf(value);
			}
		]]>
	</mx:Script>
</ui:CustomViewStack>
