<?xml version="1.0" encoding="utf-8"?>
<!--
/*
Weave (Web-based Analysis and Visualization Environment)
Copyright (C) 2008-2011 University of Massachusetts Lowell

This file is a part of Weave.

Weave is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License, Version 3,
as published by the Free Software Foundation.

Weave is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with Weave.  If not, see <http://www.gnu.org/licenses/>.
*/
-->
<ui:DraggablePanel
	xmlns="weave.ui.infomap.*" xmlns:mx="http://www.adobe.com/2006/mxml" 
	xmlns:ui="weave.ui.*"
	horizontalScrollPolicy="off" verticalScrollPolicy="off"
	borderThickness="0"
	title="InfoMap Prototype"
	clipContent="true"
	autoLayout="true">
	
	<mx:Script>
		<![CDATA[
			import mx.collections.ArrayCollection;
			import mx.collections.Sort;
			import mx.collections.SortField;
			import mx.controls.Alert;
			import mx.controls.dataGridClasses.DataGridColumn;
			import mx.events.CloseEvent;
			import mx.events.CollectionEvent;
			import mx.rpc.AsyncToken;
			import mx.rpc.Responder;
			import mx.rpc.events.FaultEvent;
			import mx.rpc.events.ResultEvent;
			import mx.utils.XMLUtil;
			
			import weave.Weave;
			import weave.api.WeaveAPI;
			import weave.api.data.IAttributeColumn;
			import weave.api.data.IQualifiedKey;
			import weave.api.linkBindableProperty;
			import weave.api.newLinkableChild;
			import weave.api.registerLinkableChild;
			import weave.core.LinkableHashMap;
			import weave.core.LinkableString;
			import weave.core.UIUtils;
			import weave.data.KeySets.KeySet;
			import weave.services.DelayedAsyncResponder;
			import weave.services.jquery.JQueryCaller;
			import weave.ui.CustomContextMenuManager;
			import weave.utils.ColumnUtils;
			import weave.utils.ProbeTextUtils;
			
			public const nodes:LinkableHashMap = newLinkableChild(this, LinkableHashMap);
			
			override protected function constructor():void
			{
				super.constructor();
			}
			
			override protected function childrenCreated():void
			{
				super.childrenCreated();
				UIUtils.linkDisplayObjects(map,nodes,false);
				sortByTitle();
			}
			
			private function handleAddNodeButtonClick():void
			{
				addInfoMapNode(keywordsInput.text,operatorButton.selectedValue as String);
			}
			
			public function addInfoMapNode(query:String,op:String=null):void
			{
				var className:String = getQualifiedClassName(InfoMapNode).split("::")[1];
				var nodeName:String = nodes.generateUniqueName(className);
				var node:InfoMapNode = new InfoMapNode();
				node = nodes.requestObject(nodeName,InfoMapNode,false);
				node.keywords.value = query;
				if(op ==null)
				{
					//TODO: should take value from RadioButton. Value was null when last tried.
					node.operator.value = "AND";	
				}
				else{
					
					node.operator.value = op;
					operatorButton.selectedValue = op;
				}
			}
			
			private var loader:URLLoader = null;
			private function addRssFeed():void
			{
				
				InfoMapAdminInterface.instance.addRssFeed(feedTitle.text,feedURL.text);
				sortByTitle();
			}
			
			private function deleteRssFeed():void
			{
				if(grid.selectedItem == null)
					return;
				
				var url:String = (grid.selectedItem as Array)[1];
				
				if (url =="")
					return;
				
				InfoMapAdminInterface.instance.deleteRssFeed(url);
				sortByTitle();
			}
			
			private function sortByTitle():void
			{
				var dp:ArrayCollection = grid.dataProvider as ArrayCollection;
				var sort:Sort = new Sort();
				var sortF:SortField = new SortField("Title",true,false);
				sort.fields = [sortF];
				dp.sort = sort;
			}
			
			private function startIndexing():void
			{
				WeaveAPI.URLRequestUtils.getURL(new URLRequest("http://129.63.8.219:8080/solr/select?clean=false&commit=true&qt=%2Fdataimport&command=full-import"));
				
			}
			
		]]>
	</mx:Script>
	<!--the resize code is required so that the content is clipped by the canvas-->
	<mx:Canvas id="map" clipContent="true" width="100%" height="100%" autoLayout="false" 
			   verticalScrollPolicy="off" horizontalScrollPolicy="off"
			   resize="map.scrollRect=new Rectangle(0,0,map.width,map.height)">
		<mx:VBox width="100%" height="100%">
			<mx:HBox paddingTop="5" paddingLeft="5" paddingBottom="5">
				<mx:Label text="Keywords:"/>
				<mx:TextInput id="keywordsInput" enabled="true" cornerRadius="5"/>
				<mx:Button label="Add" id="addNodeButton" click="handleAddNodeButtonClick()"/>
			</mx:HBox>
			<mx:HBox>
			<mx:Label text="Operator: "/>
			<mx:RadioButtonGroup id="operatorButton" enabled="true"/>
			<mx:RadioButton groupName="operatorButton" value="OR" label="OR"/>
			<mx:RadioButton groupName="operatorButton" value="AND" label="AND" selected="true"/>
			</mx:HBox>
			<!--<mx:List verticalScrollPolicy="on" variableRowHeight="true" height="100%" width="100%" id="resultView" dataProvider="{response}">
			
			<mx:itemRenderer>
				
				<mx:Component>
					<mx:VBox width="100%" verticalScrollPolicy="off">
						
						<mx:Text width="100%" fontWeight="bold" fontSize="10" htmlText="{data.title}"/>
						<mx:TextArea borderThickness="0" width="100%" height="100%" htmlText="{data.description}"/>
						<mx:Text id="link" htmlText="{data.link}" width="100%">
							
						</mx:Text>
						<mx:HRule width="100%" strokeColor="#000"/>
					</mx:VBox>
				</mx:Component>
			</mx:itemRenderer>	
			</mx:List>-->
		</mx:VBox>
		</mx:Canvas>
	<ui:ControlPanel id="ctrlPanel">
		<mx:VBox id="feedsControlPanel" label="Add/Remove Feeds">
		<mx:Label text="Enter RSS Feed: " />
		<mx:HBox>
			<mx:Label text="Title"/>
			<mx:TextInput width="100" id="feedTitle" borderStyle="solid" cornerRadius="5" />
			<mx:Label text="URL"/>
			<mx:TextInput width="300" id="feedURL" borderStyle="solid" cornerRadius="5" />
			<mx:Button label="Add" click="addRssFeed()" />
		</mx:HBox>	
			<mx:DataGrid id="grid" dataProvider="{InfoMapAdminInterface.instance.rssFeeds}" width="100%">
				<mx:columns>
					<mx:DataGridColumn dataField="0" sortDescending="true" headerText="Title"/>
					<mx:DataGridColumn dataField="1" headerText="URL"/>
				</mx:columns>
			</mx:DataGrid>
		<mx:HBox>
			<mx:Button label="Delete Selected Feed" click="deleteRssFeed()"/>
			<mx:Button label="Index Now" click="startIndexing()" />
		</mx:HBox>
			<mx:TextArea backgroundColor="0xCCCCCC" borderThickness="0" editable="false" width="500" height="100%" fontWeight="bold" text="The indexing is scheduled to run every hour. You can hit the Index Now button if you want to index your feeds you added recently. Please allow 10 -15 minutes for the results to show up."/>
		</mx:VBox>
		
	</ui:ControlPanel>
</ui:DraggablePanel>