<?xml version="1.0" encoding="utf-8"?>
<!--
/*
Weave (Web-based Analysis and Visualization Environment)
Copyright (C) 2008-2011 University of Massachusetts Lowell

This file is a part of Weave.

Weave is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License, Version 3,
as published by the Free Software Foundation.

Weave is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with Weave.  If not, see <http://www.gnu.org/licenses/>.
*/
-->
<ui:DraggablePanel
	xmlns="weave.ui.infomap.*" xmlns:mx="http://www.adobe.com/2006/mxml" 
	xmlns:ui="weave.ui.*"
	horizontalScrollPolicy="off" verticalScrollPolicy="off"
	borderThickness="0"
	layout="absolute"
	title="InfoMap Prototype"
	>
	
	<mx:Script>
		<![CDATA[
			import mx.collections.ArrayCollection;
			import mx.controls.Alert;
			
			import weave.Weave;
			import weave.api.data.IAttributeColumn;
			import weave.api.data.IQualifiedKey;
			import weave.api.linkBindableProperty;
			import weave.api.newLinkableChild;
			import weave.api.registerLinkableChild;
			import weave.core.LinkableString;
			import weave.data.KeySets.KeySet;
			import weave.ui.CustomContextMenuManager;
			import weave.utils.ColumnUtils;
			import weave.utils.ProbeTextUtils;
			
			override protected function constructor():void
			{
				super.constructor();
			}
			
			override protected function childrenCreated():void
			{
				super.childrenCreated();
				
				linkBindableProperty(keywords,keywordsInput,"text");
			}
			
			
			
			private static const INFOMAP_CAPTION:String = "Open InfoMap";
			private static var _infoMapMenuItem:ContextMenuItem = null;
			private static var _selectedKeySet:KeySet = null;
			
			/**
			 * this function is called when the menu is opened. Use this function to change the menu 
			 * text based on the context it is opened it
			 **/
			private static function handleContextMenuOpened(e:ContextMenuEvent):void
			{	
				_infoMapMenuItem.enabled = _selectedKeySet.keys.length > 0;
			}
			
			/**
			 * Creates a menu item
			 **/
			public static function createContextMenuItems(destination:DisplayObject):Boolean
			{
				if(!destination.hasOwnProperty("contextMenu") )
					return false;
				
				_selectedKeySet = Weave.root.getObject(Weave.DEFAULT_SELECTION_KEYSET) as KeySet;
				
				// Add a listener to this destination context menu for when it is opened
				var contextMenu:ContextMenu = destination["contextMenu"] as ContextMenu;
				contextMenu.addEventListener(ContextMenuEvent.MENU_SELECT, handleContextMenuOpened);
				
				_infoMapMenuItem = CustomContextMenuManager.createAndAddMenuItemToDestination(INFOMAP_CAPTION,destination,handleMenutItemClick,"3 searchMenuItems");				
				return true;
			}
			
			
			public const keywords:LinkableString = registerLinkableChild(this,new LinkableString(),handleKeywordsChange);
			
			private static var _keywords:String = "";
			private static function handleMenutItemClick(event:ContextMenuEvent):void
			{
				var className:String = getQualifiedClassName(InfoMapPanel).split("::")[1];
				var panelName:String = Weave.root.generateUniqueName(className);
				var panel:InfoMapPanel = Weave.root.requestObject(panelName,InfoMapPanel,false);
				
				var keys:Array = _selectedKeySet.keys;
				var probeString:String = "";
				var temp:Array = [];
				probeString = ProbeTextUtils.getProbeText(_selectedKeySet);
				
				//TODO: May want to consider removing numbers
				var regEx:RegExp = /[a-zA-Z]+/g;				
				temp =  probeString.match(regEx);
				
				var dict:Dictionary = new Dictionary();
				
				for each(var word:String in temp)
				{
					if(dict[word] == undefined)
						dict[word] = word;
				}
				
				var uniqueTemp:Array = []
				for each(var prop:String in dict)
				{
					uniqueTemp.push(prop);	
				}
				// joins all keywords using comma
				_keywords = uniqueTemp.join(",");
				
				panel.keywords.value = _keywords;
				
				//show infomap panel
				
				
				panel.restorePanel();
				
				Weave.root.setNameOrder([panelName]);
				
				parseSolrResponseFromURL();
				
				
			}
			
			
			private var loader:URLLoader = null;
			
			private static function parseSolrResponseFromURL():void
			{
				var solrURL:String = "http://129.63.8.219:8080/solr/select/?version=2.2&start=0&rows=10&indent=on&q=";	
				
				var query:String = (keywordsInput.text as String).replace(","," OR ");
				
				solrURL += solrURL + query;
				loader = new URLLoader();
				var request:URLRequest = new URLRequest(url);
				loader.addEventListener(Event.COMPLETE, xmlLoadCompleteHandler);
			}
			
			private static function xmlLoadCompleteHandler(event:Event):void {
				// checks to avoid null point error
				if(loader){
					// checks for data presence
					if(loader.data){
						var xml:XML = loader.data;
						parseSolrResponsefromXML(xml);
					}
				}
				
			}
			
			[Bindable]
			private static var response:ArrayCollection = new ArrayCollection();
			
			private static function parseSolrResponsefromXML(xml:XML):void{
				var responseNodeChildren:XMLList = xml.children();
				var resultNode:XML = responseNodeChildren[1];
				var resultNodeChildren:XMLList = resultNode.children();
				
				for each (var docNode:XML in resultNodeChildren){			
					var docNodeChildren:XMLList = docNode.children();					
					var docNodeObject:Object = new Object();
					
					// Object is a Dynamic Class
					// so property name is added from XML "name" attribute value
					// respective property value is added from node value
					// <date name="date_published">2011-02-13T15:26:37Z</date>
					// date_published becomes object property
					// 2011-02-13T15:26:37Z becomes value for -date_published- property	
					for each (var node:XML in docNodeChildren){
						var attributeValue:String = node.@name;
						docNodeObject[attributeValue] = node.toString();
					}
					response.addItem(docNodeObject);					 
				}
			}
			
			private function handleKeywordsChange():void
			{
				
			}
			
		]]>
	</mx:Script>
	<mx:VBox width="100%">
		<mx:HBox>
			<mx:Label text="Keywords:"/>
			<mx:TextInput id="keywordsInput" enabled="true"/>
		</mx:HBox>
		<mx:DataGrid height="100%" width="100%" id="resultView" dataProvider="{response}" />
	</mx:VBox>
</ui:DraggablePanel>