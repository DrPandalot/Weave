<?xml version="1.0" encoding="utf-8"?>
<!--
/*
Weave (Web-based Analysis and Visualization Environment)
Copyright (C) 2008-2011 University of Massachusetts Lowell

This file is a part of Weave.

Weave is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License, Version 3,
as published by the Free Software Foundation.

Weave is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with Weave.  If not, see <http://www.gnu.org/licenses/>.
*/
-->
<ui:DraggablePanel
	xmlns="weave.ui.infomap.*" xmlns:mx="http://www.adobe.com/2006/mxml" 
	xmlns:ui="weave.ui.*"
	horizontalScrollPolicy="off" verticalScrollPolicy="off"
	borderThickness="0"
	layout="absolute"
	title="InfoMap Prototype"
	>
	
	<mx:Script>
		<![CDATA[
			import mx.collections.ArrayCollection;
			import mx.controls.Alert;
			
			import weave.Weave;
			import weave.api.data.IAttributeColumn;
			import weave.api.data.IQualifiedKey;
			import weave.api.linkBindableProperty;
			import weave.api.newLinkableChild;
			import weave.api.registerLinkableChild;
			import weave.core.LinkableString;
			import weave.data.KeySets.KeySet;
			import weave.ui.CustomContextMenuManager;
			import weave.utils.ColumnUtils;
			import weave.utils.ProbeTextUtils;
			
			override protected function constructor():void
			{
				super.constructor();
			}
			
			override protected function childrenCreated():void
			{
				super.childrenCreated();
				
				linkBindableProperty(keywords,keywordsInput,"text");
			}
			
			public const keywords:LinkableString = registerLinkableChild(this,new LinkableString(),parseSolrResponseFromURL);
			
			
			
			
			private var loader:URLLoader = null;
			
			private function parseSolrResponseFromURL():void
			{
				var solrURL:String = "http://129.63.8.219:8080/solr/select/?version=2.2&start=0&rows=10&indent=on&q=";	
				
				var query:String = (keywords.value as String);
				
				if(query=="")
					return;
				
				var temp:Array = query.split(",");
				
				if(temp.length != 0 || temp.length != 1)
					query = temp.join(" OR ");
				
				var url:String = solrURL + query;
				loader = new URLLoader();
				var request:URLRequest = new URLRequest(url);
				loader.addEventListener(Event.COMPLETE, xmlLoadCompleteHandler);
				loader.load(request);
			}
			
			private function xmlLoadCompleteHandler(event:Event):void {
				// checks to avoid null point error
				if(loader){
					// checks for data presence
					if(loader.data){
						var xml:XML = new XML(loader.data);
						parseSolrResponsefromXML(xml);
					}
				}
				
			}
			
			[Bindable]
			private var response:ArrayCollection = null;
			
			private function parseSolrResponsefromXML(result:XML):void{
				
				response = new ArrayCollection();
				for each(var doc:XML in result.result.doc)
				{
					trace(doc.str.(@name=="title").text().toXMLString());
					
					var docObject:Object = new Object();
					
					docObject.title = doc.str.(@name=="title").text().toXMLString();
					docObject.link = doc.str.(@name=="link").text().toXMLString();
					docObject.description = doc.str.(@name=="description").text().toXMLString();
					docObject.datePub = doc.date.text().toXMLString();
					
					response.addItem(docObject);
				}
				
				
			}
			
		
			
		]]>
	</mx:Script>
	<mx:VBox width="100%" height="100%">
		<mx:HBox paddingTop="5" paddingLeft="5" paddingBottom="5">
			<mx:Label text="Keywords:"/>
			<mx:TextInput id="keywordsInput" enabled="true" cornerRadius="5"/>
		</mx:HBox>
		<mx:List verticalScrollPolicy="on" variableRowHeight="true" height="100%" width="100%" id="resultView" dataProvider="{response}">
		
		<mx:itemRenderer>
			
			<mx:Component>
				<mx:VBox width="100%" verticalScrollPolicy="off">
					
					<mx:Text width="100%" fontWeight="bold" fontSize="10" htmlText="{data.title}"/>
					<mx:TextArea borderThickness="0" width="100%" height="100%" htmlText="{data.description}"/>
					<mx:Text id="link" htmlText="{data.link}" width="100%">
						
					</mx:Text>
					<mx:HRule width="100%" strokeColor="#000"/>
				</mx:VBox>
			</mx:Component>
		</mx:itemRenderer>	
		</mx:List>
	</mx:VBox>
</ui:DraggablePanel>