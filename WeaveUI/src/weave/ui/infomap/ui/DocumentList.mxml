<?xml version="1.0" encoding="utf-8"?>
<!--This component is used for handling node operations.
It has a text area which diplays the keywords.
It has 4 icons to:
Close/Delete the node
Edit the keyword
Search within the node.
Filter by Date
Info to provide a tooltip describing the node (like number of documents found)

-->
<mx:VBox implements="weave.api.core.ILinkableObject" xmlns:mx="http://www.adobe.com/2006/mxml" horizontalScrollPolicy="off" verticalScrollPolicy="off"
width="400">
	<mx:List toolTip="" id="docList" width="100%">
		<mx:itemRenderer>
			<mx:Component>
				<!--Setting the tool tip to empty so that you can only see the Document Summary Component on mouse over.
				Setting it to null does not work.-->
				<mx:Label toolTip="" width="100%"> 
					<mx:Script>
						<![CDATA[
							import mx.managers.CursorManager;
							
							import weave.api.WeaveAPI;
							import weave.data.DataSources.InfoMapsDataSource;
							import weave.utils.CustomCursorManager;
							
							private var infomapDataSource:InfoMapsDataSource = WeaveAPI.globalHashMap.getObject(InfoMapsDataSource.SOURCE_NAME) as InfoMapsDataSource;
							
							override protected function childrenCreated():void
							{
								infomapDataSource.getColumnByName("title").addImmediateCallback(outerDocument.docList,updateLabelText);
							}
							override public function set data(value:Object):void
							{
								super.data = value;
								
								this.text = infomapDataSource.getTitleForURL(value as String);
								
								//Show DocumentSummaryComponent on mouse over and show link cursor
								this.addEventListener(MouseEvent.MOUSE_OVER, function(event:MouseEvent):void {
									CustomCursorManager.showCursor(CustomCursorManager.LINK_CURSOR);
									DocumentSummaryComponent.show(event.stageX,event.stageY,value as String,event.target as DisplayObject);
										});
								//Hide DocumentSummaryComponent on mouse out and hide link cursor
								this.addEventListener(MouseEvent.MOUSE_OUT, function(event:MouseEvent):void {
									CustomCursorManager.removeCurrentCursor();
									DocumentSummaryComponent.hide();
								});
								
								//go to document link on double click
								this.addEventListener(MouseEvent.DOUBLE_CLICK, function (event:MouseEvent):void {
									var link:String = value as String;
									var linkLen:int = link.length;
									var linkExtension:String = link.substring(linkLen-3,linkLen);
									if(linkExtension == "pdf")
									{
										link = "http://129.63.8.219:8080/"+link.substring(link.indexOf("infomap"),linkLen);
									}
									navigateToURL(new URLRequest(link));
								});
							}
							
							private function updateLabelText():void
							{
								if(data != null)
									this.text = infomapDataSource.getTitleForURL(data as String);
							}
							
						]]>
					</mx:Script>
				</mx:Label>
			</mx:Component>
		</mx:itemRenderer>
		
	</mx:List>
	<mx:HBox width="100%">
		<mx:Button id="prevButton" width="10%" label="Prev" click="prev()"/>
		<mx:Label id="indexText" textAlign="center" width="80%"/>
		<mx:Button id="nextButton" width="10%" label="Next" click="next()"/>
	</mx:HBox>
	
	<mx:Script>
		<![CDATA[
			import weave.utils.VectorUtils;
			import org.igniterealtime.xiff.events.OutgoingDataEvent;
			import weave.api.newLinkableChild;
			import weave.core.LinkableNumber;
			import weave.core.LinkableString;
			
			private var _docKeys:Array = new Array();
			public function set docKeys(value:Array):void
			{
				_docKeys = [];
				VectorUtils.copy(value,_docKeys);
				handleKeysChange();
			}
			
			public var startIndex:LinkableNumber = new LinkableNumber(0);
			
			private var rowCount:int = 10;
			override protected function childrenCreated():void
			{
				startIndex.addImmediateCallback(this,updateDocumentList,true);
			}
			
			private function handleKeysChange():void
			{
				startIndex.value = 0;
				
				startIndex.triggerCallbacks();
			}
			
			private function prev():void
			{
				//if startIndex is less than row count we don't want index to go below 0
				if(startIndex.value <rowCount)
				{
					startIndex.value = 0;
					return;
				}
				startIndex.value -= rowCount;
				
			}
			
			private function next():void
			{
				if(startIndex.value + rowCount > _docKeys.length)
				{
					return;//nothing more to show
				}
				
				startIndex.value += rowCount;
			}
			
			//updates the list of documents to show based on the starting index
			//checks to see if data is less than rows to display and updates list's dataprovider accordingly
			private function updateDocumentList():void
			{
				if(!_docKeys || _docKeys.length == 0)
					return;
				var listMaxLength:int = 10;
				
				var temp:Array = [];
				
				
				
				if(_docKeys.length < startIndex.value + listMaxLength)
					listMaxLength = _docKeys.length - startIndex.value;
				
				for(var i:int=0+startIndex.value; i<startIndex.value+listMaxLength; i++)
				{
					temp.push(_docKeys[i]);
				}
				
				docList.dataProvider = temp;
				
				//disable nextButton if showing the last set of documents
				if(startIndex.value + rowCount >= _docKeys.length)
				{
					nextButton.enabled = false;
				}else
				{
					nextButton.enabled = true;	
				}
				
				//disable prevButton if showing the first set of documents
				if(startIndex.value < rowCount)
				{
					prevButton.enabled = false;
				}
				else
				{
					prevButton.enabled = true;
				}
				
				updateIndexText(); 
			}
			
			private function updateIndexText():void
			{
				var st:int = startIndex.value+1;
				
				indexText.text = "Showing " + st.toString()  + " to "; //+1 to avoid showing 0
				
				if((startIndex.value + rowCount) < _docKeys.length)
				{
					var et:int = startIndex.value + rowCount; 					
					indexText.text += et.toString();
				}
				else
					indexText.text += _docKeys.length;
				
				indexText.text += " of " + _docKeys.length;
					
			}
		]]>
	</mx:Script>
</mx:VBox>