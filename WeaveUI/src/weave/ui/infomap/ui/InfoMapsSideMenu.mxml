<?xml version="1.0" encoding="utf-8"?>
<mx:VBox xmlns:s="library://ns.adobe.com/flex/spark"
		 xmlns:mx="http://www.adobe.com/2006/mxml"
		 xmlns:ui="weave.ui.infomap.ui.*"
		 height="{_maxHieght}" borderStyle="solid" borderThickness="1" cornerRadius="5"
		 creationComplete="handleCreationComplete()" horizontalScrollPolicy="off"
		 verticalScrollPolicy="off">
		<s:Resize id="minimizeEffect" heightTo="{menuBox.height}" target="{this}"/>
		<s:Resize id="maximizeEffect" heightTo="{_maxHieght}" target="{this}"/>
	<mx:Script>
		<![CDATA[
			[Embed( source="/weave/resources/images/maximize_icon.png")]
			private var maximizeImgClass:Class;
			private var _maxImgText:String ="Show Menu";
			
			[Embed( source="/weave/resources/images/minimize_icon.png")]
			private var minimizeImgClass:Class;
			private var _minImgText:String ="Hide Menu";
			
			private function handleCreationComplete():void
			{
//				nodeSelector.setStyle("chromeColor", "haloOrange");
				minmaxIcon.source = minimizeImgClass;
				minmaxIcon.addEventListener(MouseEvent.CLICK,handleMaxMinClick);
				
//				m.dataProvider = new ArrayCollection();
//				(m.dataProvider as ArrayCollection).source= [];
//				(m.dataProvider as ArrayCollection).source.push({label:"Show View",children:NodeHandler.views.concat(["Topics"])});
//				(m.dataProvider as ArrayCollection).source.push({label:"Sort By",children:QueryObject.sortByOptions.concat(["New Documents"])});
//				(m.dataProvider as ArrayCollection).source.push({label:"Filter By",children:QueryObject.filterByOptions});
				
			}
			[Bindable]
			private var _maxHieght:int = 80;
			
			private var _labelWidth:int = 75;
			private function handleMaxMinClick(event:MouseEvent):void
			{
				/* if menu is maximized */
				if(minmaxText.visible)
				{
					minmaxText.visible = false;
					minmaxText.width = 0;
//					nodeSelector.width = _labelWidth;
					
					minmaxIcon.source = minimizeImgClass;
					minmaxIcon.toolTip = _minImgText;
						
					minimizeEffect.end();
					maximizeEffect.end();
					maximizeEffect.play();
					
				}
				/* if menu is minimized */
				else
				{
					minmaxText.visible = true;
					minmaxText.width = _labelWidth;
//					nodeSelector.width = 0;
					
					minmaxIcon.source = maximizeImgClass;
					minmaxIcon.toolTip = _maxImgText;
					
					maximizeEffect.end();
					minimizeEffect.end();
					minimizeEffect.play();
					
				}
			}
			
			public static const ALL_NODES:String = "All";
			public static const CURRENT_NODE:String = "Current";
//			private function handleNodeSelectorClick():void
//			{
////				nodeSelector.setStyle("chromeColor", "haloOrange");
//				if(nodeSelectorGroup.selectedValue)
//				{
//					nodeSelector.label = ALL_NODES;
//				}
//				else
//				{
//					nodeSelector.label = CURRENT_NODE;
//				}
//			}
		]]>
	</mx:Script>
<mx:HBox top="10" id="menuBox" width="100%" horizontalAlign="right" >
	<!--<s:ToggleButton id="nodeSelector" label="Current Node" visible="{!minmaxText.visible}" click="handleNodeSelectorClick()"/>-->
	<!--<mx:HBox id="nodeSelector" width="100%" horizontalScrollPolicy="off">
		<mx:Label text="Nodes: "/>
		<mx:RadioButtonGroup id="nodeSelectorGroup"/>
		<mx:RadioButton selected="true" groupName="nodeSelectorGroup" label="{CURRENT_NODE}" value="{CURRENT_NODE}"/>
		<mx:RadioButton groupName="nodeSelectorGroup" label="{ALL_NODES}" value="{ALL_NODES}"/>
	</mx:HBox>-->
	<mx:Label id="minmaxText" width="0" visible="false" text="Show Menu"/>
	<mx:Image toolTip="{_minImgText}" id="minmaxIcon" buttonMode="true"/>
	<!--<s:Spacer width="10%"/>-->
</mx:HBox>
<s:Button id="addQueryButton" label="Add Query"/>
<s:Button id="extractEntitiesButton" label="Link with Data"/>
<s:List height="100%" id="m" borderVisible="false" itemRenderer="weave.ui.infomap.ui.ExpandingItemRenderer"
		verticalScrollPolicy="off" creationComplete="handleListCreationComplete()">
	<mx:Script>
		<![CDATA[
			import mx.collections.ArrayCollection;
			
			import weave.ui.infomap.core.QueryObject;
			import weave.ui.infomap.layout.NodeHandler;
			private function handleListCreationComplete():void
			{
				m.selectedIndex=0;
			}
		]]>
	</mx:Script>
</s:List>

</mx:VBox>