<?xml version="1.0" encoding="utf-8"?>
<!--
/*
Weave (Web-based Analysis and Visualization Environment)
Copyright (C) 2008-2011 University of Massachusetts Lowell

This file is a part of Weave.

Weave is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License, Version 3,
as published by the Free Software Foundation.

Weave is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with Weave.  If not, see <http://www.gnu.org/licenses/>.
*/
-->
<ui:DraggablePanel
	xmlns="weave.ui.infomap.*" xmlns:mx="http://www.adobe.com/2006/mxml" 
	xmlns:ui="weave.ui.*"
	horizontalScrollPolicy="off" verticalScrollPolicy="off"
	borderThickness="0"
	title="InfoMap Prototype"
	clipContent="true"
	autoLayout="true"
	
	>
	
	<mx:Script>
		<![CDATA[
			import mx.collections.ArrayCollection;
			import mx.collections.Sort;
			import mx.collections.SortField;
			import mx.controls.Alert;
			import mx.controls.dataGridClasses.DataGridColumn;
			import mx.events.CloseEvent;
			import mx.events.CollectionEvent;
			import mx.rpc.AsyncToken;
			import mx.rpc.Responder;
			import mx.rpc.events.FaultEvent;
			import mx.rpc.events.ResultEvent;
			import mx.utils.StringUtil;
			import mx.utils.XMLUtil;
			
			import weave.Weave;
			import weave.api.WeaveAPI;
			import weave.api.data.IAttributeColumn;
			import weave.api.data.IQualifiedKey;
			import weave.api.linkBindableProperty;
			import weave.api.linkSessionState;
			import weave.api.newLinkableChild;
			import weave.api.registerLinkableChild;
			import weave.core.LinkableHashMap;
			import weave.core.LinkableString;
			import weave.core.UIUtils;
			import weave.data.KeySets.KeySet;
			import weave.services.DelayedAsyncResponder;
			import weave.services.jquery.JQueryCaller;
			import weave.ui.CustomContextMenuManager;
			import weave.ui.infomap.admin.InfoMapAdminInterface;
			import weave.ui.infomap.core.DateRangeFilter;
			import weave.ui.infomap.core.FilterableInfoMapNode;
			import weave.ui.infomap.layout.NodeHandler;
			import weave.ui.infomap.utils.DateUtils;
			import weave.utils.ColumnUtils;
			import weave.utils.PopUpUtils;
			import weave.utils.ProbeTextUtils;
			
			/**
			 * @public
			 * This is mapping of a link to a node where each node is a defined by a query of keywords,operator and filters
			 * */
			public const nodes:LinkableHashMap = newLinkableChild(this, LinkableHashMap,handleNodesChildListChange);
			
			/**
			 * @public
			 * This is mapping of a link to a document object. 
			 * All the nodes within this panel will point to document objects in this map only.
			 * When a query is made by each node, the documents retrieved are stored in this map.
			 * */
			public const docs:LinkableHashMap = newLinkableChild(this,LinkableHashMap);
			
			/**
			 * @public
			 * this search keyword will apply to all the nodes within the panel
			 * This is not a query keyword. This is used only to search within the documents
			 * of each node.
			 * */
			public var globalSearchKeyword:LinkableString = new LinkableString('');
			
			[Bindable]
			private var dateFilter:DateRangeFilter = new DateRangeFilter();
			
			override protected function constructor():void
			{
				super.constructor();
			}
			
			override protected function childrenCreated():void
			{
				super.childrenCreated();
				UIUtils.linkDisplayObjects(map,nodes,false);
				sortByTitle();
				dateFilter.endDate.addImmediateCallback(this,handleEndDateChange);
				dateFilter.startDate.addImmediateCallback(this,handleStartDateChange);
				linkBindableProperty(globalSearchKeyword,globalSearchTextInput,"text");
			}
			
			private function handlePanelResize():void
			{
				map.validateNow();
				searchBox.x = map.width-searchBox.width;
			}
			
			private function handleEndDateChange():void
			{
				var e:Date = DateUtils.getDateFromString(dateFilter.endDate.value);
				
				endDateText.text = DateUtils.getDateInStringFormat(e);
			}
			
			private function handleStartDateChange():void
			{
				var s:Date = DateUtils.getDateFromString(dateFilter.startDate.value);
				
				startDateText.text = DateUtils.getDateInStringFormat(s);
			}
			
			
			private function handleKeyUp(event:KeyboardEvent):void
			{
				if(event.keyCode == Keyboard.ENTER)
					handleAddNodeButtonClick();
			}
			private function handleAddNodeButtonClick():void
			{
				addInfoMapNode(keywordsInput.text,operatorButton.selectedValue as String);
			}
			
			private function handleNodesChildListChange():void
			{
				//TODO:adjust the coordinates of single docs
			}
			
			public function addInfoMapNode(query:String,op:String=null):void
			{
				var className:String = getQualifiedClassName(NodeHandler).split("::")[1];
				var nodeName:String = nodes.generateUniqueName(className);
				var nodeLayout:NodeHandler= new NodeHandler();
				nodeLayout = nodes.requestObject(nodeName,NodeHandler,false);
				nodeLayout.node.keywords.value = query;
				if(op ==null)
				{
					//TODO: should take value from RadioButton. Value was null when last tried.
					nodeLayout.node.operator.value = "AND";	
				}
				else{
					
					nodeLayout.node.operator.value = op;
					operatorButton.selectedValue = op;
				}
				nodeLayout.node.dateFilter.startDate.value = startDateText.text;
				nodeLayout.node.dateFilter.endDate.value = endDateText.text;
			}
			
			private var loader:URLLoader = null;
			private function addRssFeed():void
			{
				var url:String = feedURL.text;
				url = StringUtil.trim(url);
				if(url == "")
				{
					errorMsg.visible = true;
					return;	
				}
				
				var title:String = feedTitle.text;
				title = StringUtil.trim(title);
				if(title == "")
				{
					errorMsg.visible = true;	
					return;
				}	
								
				InfoMapAdminInterface.instance.addRssFeed(feedTitle.text,feedURL.text);
				sortByTitle();
				
				errorMsg.visible = false;
			}
			
			private function deleteRssFeed():void
			{
				if(grid.selectedItem == null)
					return;

				PopUpUtils.confirm(
					this,
					"Confirm delete",
					'Delete Feed entry:  "'+(grid.selectedItem as Array)[0]+'"?',
					del
				);
				
				function del():void{
					
					var url:String = (grid.selectedItem as Array)[1];
					
					if (url =="")
						return;
					
					InfoMapAdminInterface.instance.deleteRssFeed(url);
					sortByTitle();
				}
			}
			
			private function sortByTitle():void
			{
				var dp:ArrayCollection = grid.dataProvider as ArrayCollection;
				var sort:Sort = new Sort();
				var sortF:SortField = new SortField("Title",true,false);
				sort.fields = [sortF];
				dp.sort = sort;
			}
			
			private function startIndexing():void
			{
				WeaveAPI.URLRequestUtils.getURL(new URLRequest("http://129.63.8.219:8080/solr/select?clean=false&commit=true&qt=%2Fdataimport&command=full-import"));
				
			}
			
			
			private function handleDateFilter():void
			{
				DateFilterComponent.openInstance(this,dateFilter);
			}
			
			private function clearDateFilter():void
			{
				startDateText.text = '';
				endDateText.text = '';
			
			}
			
		]]>
	</mx:Script>
	<!--the resize code is required so that the content is clipped by the canvas-->
	<mx:Canvas id="map" clipContent="true" width="100%" height="100%" autoLayout="false" 
			   verticalScrollPolicy="off" horizontalScrollPolicy="off" 
			   resize="map.scrollRect=new Rectangle(0,0,map.width,map.height);handlePanelResize();"><!--For clipping the content at the edges-->
				<mx:VBox>
					<mx:HBox>
						<mx:Label text="Enter Query :"/>
						<mx:TextInput keyUp="handleKeyUp(event)" id="keywordsInput" enabled="true" cornerRadius="5" borderStyle="solid" toolTip="Separate your keywords by space to apply the operator correctly"/>
					</mx:HBox>
					<mx:HBox>
						<mx:Label text="Operator: "/>
						<mx:RadioButtonGroup id="operatorButton" enabled="true"/>
						<mx:RadioButton groupName="operatorButton" value="OR" label="OR"/>
						<mx:RadioButton groupName="operatorButton" value="AND" label="AND" selected="true"/>
					</mx:HBox>
					<mx:HBox>
						<mx:Label text="Date Range: "/>
						<mx:TextInput  cornerRadius="5" borderStyle="solid" editable="false" id="startDateText" width="75" />
							<mx:Label text="TO"/>
						<mx:TextInput  cornerRadius="5" borderStyle="solid" editable="false" id="endDateText" width="75"/>
						<mx:LinkButton textDecoration="underline" color="blue" fontWeight="normal" label="Select" click="handleDateFilter()"/>
						<mx:LinkButton textDecoration="underline" color="blue" fontWeight="normal" label="Clear" click="clearDateFilter()"/>
					</mx:HBox>
					<mx:Button label="Add" id="addNodeButton" click="handleAddNodeButtonClick()"/>
					
				</mx:VBox>
				<mx:VBox id="searchBox">
					<mx:HBox>
						<mx:Label text="Search :"/>
						<mx:TextInput id="globalSearchTextInput" borderStyle="solid" cornerRadius="5" width="200" /> 
					</mx:HBox>
				</mx:VBox>
				
		
		</mx:Canvas>
	<ui:ControlPanel id="ctrlPanel">
		<mx:VBox id="feedsControlPanel" label="Add/Remove Feeds">
		<mx:Label text="Enter RSS Feed: " />
		<mx:HBox>
			<mx:Label text="Title"/>
			<mx:TextInput width="100" id="feedTitle" borderStyle="solid" cornerRadius="5" />
			<mx:Label text="URL"/>
			<mx:TextInput width="300" id="feedURL" borderStyle="solid" cornerRadius="5" />
			<mx:Button label="Add" click="addRssFeed()" />
		</mx:HBox>	
		<mx:Label id="errorMsg" color="red" fontWeight="bold" text="Both fields are required." visible="false"/>
			<mx:DataGrid id="grid" dataProvider="{InfoMapAdminInterface.instance.rssFeeds}" width="100%">
				<mx:columns>
					<mx:DataGridColumn dataField="0" sortDescending="true" headerText="Title"/>
					<mx:DataGridColumn dataField="1" headerText="URL"/>
				</mx:columns>
			</mx:DataGrid>
		<mx:HBox width="100%">
			<mx:Button label="Index Now" click="startIndexing()" />
			<mx:Spacer width="100%"/>
			<mx:Button  label="Delete Selected Feed" click="deleteRssFeed()"/>
		</mx:HBox>
			<mx:TextArea backgroundColor="0xCCCCCC" borderThickness="0" editable="false" width="500" height="100%" fontWeight="bold" text="The indexing is scheduled to run every hour. You can hit the Index Now button if you want to index your feeds you added recently. Please allow 10 -15 minutes for the results to show up."/>
		</mx:VBox>
		
	</ui:ControlPanel>
</ui:DraggablePanel>