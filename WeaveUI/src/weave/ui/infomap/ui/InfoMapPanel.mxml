<?xml version="1.0" encoding="utf-8"?>
<!--
/*
Weave (Web-based Analysis and Visualization Environment)
Copyright (C) 2008-2011 University of Massachusetts Lowell

This file is a part of Weave.

Weave is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License, Version 3,
as published by the Free Software Foundation.

Weave is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with Weave.  If not, see <http://www.gnu.org/licenses/>.
*/
-->
<ui:DraggablePanel
	xmlns="weave.ui.infomap.*" xmlns:mx="http://www.adobe.com/2006/mxml" 
	xmlns:ui="weave.ui.*"
	horizontalScrollPolicy="off" verticalScrollPolicy="off"
	borderThickness="0"
	title="InfoMap Prototype"
	clipContent="true"
	autoLayout="true"
	paddingLeft="5"
	paddingTop="5"
	>
	
	<mx:Script>
		<![CDATA[
			import mx.binding.utils.BindingUtils;
			import mx.collections.ArrayCollection;
			import mx.collections.Sort;
			import mx.collections.SortField;
			import mx.controls.Alert;
			import mx.controls.Image;
			import mx.controls.dataGridClasses.DataGridColumn;
			import mx.core.mx_internal;
			import mx.events.CloseEvent;
			import mx.events.CollectionEvent;
			import mx.rpc.AsyncToken;
			import mx.rpc.IResponder;
			import mx.rpc.Responder;
			import mx.rpc.events.FaultEvent;
			import mx.rpc.events.ResultEvent;
			import mx.utils.Base64Encoder;
			import mx.utils.StringUtil;
			import mx.utils.XMLUtil;
			
			import weave.Weave;
			import weave.api.WeaveAPI;
			import weave.api.data.IAttributeColumn;
			import weave.api.data.IQualifiedKey;
			import weave.api.detectLinkableObjectChange;
			import weave.api.getCallbackCollection;
			import weave.api.getLinkableDescendants;
			import weave.api.linkBindableProperty;
			import weave.api.linkSessionState;
			import weave.api.newLinkableChild;
			import weave.api.registerDisposableChild;
			import weave.api.registerLinkableChild;
			import weave.api.unlinkBindableProperty;
			import weave.core.ErrorManager;
			import weave.core.LinkableHashMap;
			import weave.core.LinkableString;
			import weave.core.StageUtils;
			import weave.core.UIUtils;
			import weave.data.DataSources.CSVDataSource;
			import weave.data.KeySets.KeySet;
			import weave.data.QKeyManager;
			import weave.services.DelayedAsyncInvocation;
			import weave.services.DelayedAsyncResponder;
			import weave.services.jquery.JQueryCaller;
			import weave.ui.CustomContextMenuManager;
			import weave.ui.infomap.InfoMapLoader;
			import weave.ui.infomap.admin.InfoMapAdminInterface;
			import weave.ui.infomap.core.DateRangeFilter;
			import weave.ui.infomap.core.FilterableInfoMapNode;
			import weave.ui.infomap.core.SelectableInfoMapDocument;
			import weave.ui.infomap.layout.NodeHandler;
			import weave.ui.infomap.utils.DateUtils;
			import weave.utils.BitmapUtils;
			import weave.utils.ColumnUtils;
			import weave.utils.PopUpUtils;
			import weave.utils.ProbeTextUtils;
			
			/**
			 * @public
			 * This is mapping of a link to a node where each node is a defined by a query of keywords,operator and filters
			 * */
			public const nodes:LinkableHashMap = newLinkableChild(this, LinkableHashMap,handleNodesChildListChange,true);
			
			/**
			 * @public
			 * This is mapping of a link to a document object. 
			 * All the nodes within this panel will point to document objects in this map only.
			 * When a query is made by each node, the documents retrieved are stored in this map.
			 * */
			public const docs:LinkableHashMap = newLinkableChild(this,LinkableHashMap);
			public var docsInCSV:CSVDataSource = new CSVDataSource();
			public static const DOC_KEYTYPE:String = "infomapDocURL";
			
			/**
			 * @public
			 * this search keyword will apply to all the nodes within the panel
			 * This is not a query keyword. This is used only to search within the documents
			 * of each node.
			 * */
			public const globalSearchKeyword:LinkableString = new LinkableString('');
			
			public const globalDateFilter:DateRangeFilter = new DateRangeFilter();
			
			public const backgroundImageName:LinkableString = registerLinkableChild(this,new LinkableString(''),handleBackgroundImageChange);
			
			override protected function constructor():void
			{
				super.constructor();
			}
			
			[Bindable]
			public var defaultNodeBorderColor:uint;
		
			[Bindable]
			public var selectedNodeBorderColor:uint;
			
			[Bindable]
			public var defaultThumbnailBorderColor:uint;
			
			[Bindable]
			public var selectedThumbnailBorderColor:uint;
			
			[Bindable]
			public var newThumbnailGlowColor:uint;
			
			
			private static var _selectedKeySet:KeySet = null;
			
			override protected function childrenCreated():void
			{
				super.childrenCreated();
				UIUtils.linkDisplayObjects(map,nodes,false);
				sortByTitle();
				linkBindableProperty(globalSearchKeyword,globalSearchTextInput,"text",500);
				
				/*	we will create a CSVDataSource named docs which will hold all the doucments
				 	if it alreadt exists we will use the existing data source 
				*/
				
				docsInCSV = Weave.root.requestObject("docs",CSVDataSource, false);
				docsInCSV.csvDataString.value = "title,url,summary,image url,date";
				docsInCSV.keyColName.value = "url";
				docsInCSV.keyType.value = DOC_KEYTYPE;
				
				
				
				refreshTimer.start();
				//call event for each tick of refreshTimer
				refreshTimer.addEventListener(TimerEvent.TIMER, refreshNodes);
				
				registerDisposableChild(this,globalSearchKeyword);
				registerDisposableChild(this,globalDateFilter);
				
				_selectedKeySet = Weave.root.getObject(Weave.DEFAULT_SELECTION_KEYSET) as KeySet;
				_selectedKeySet.addImmediateCallback(this,handleSelectedKeySetChange);
				
				stage.addEventListener(MouseEvent.MOUSE_UP,handleMouseUp);
				
				selectionKeywords.addGroupedCallback(this,sendSelectionQuery,false);
				
				getCallbackCollection(this).addImmediateCallback(this,invalidateDisplayList);
			}
			
			
			
			override protected function updateDisplayList(unscaledWidth:Number, unscaledHeight:Number):void
			{
				super.updateDisplayList(unscaledWidth, unscaledHeight);
				
				
				//detect any changes in docs and make query for matched entity values
				if(detectLinkableObjectChange(updateDisplayList,docs))
				{
					//selection happened outside of the panel then return
					if(!(DraggablePanel.getTopPanel() is InfoMapPanel))
						return;
					
					var docsArray:Array = docs.getObjects();
					var selectedDocs:Array = [];
					for each(var doc:SelectableInfoMapDocument in docsArray)
					{
						if(doc.selected.value)
						{
							selectedDocs.push(doc.url.value);
						}
					}
					
					if(selectedDocs.length == 0)
					{
						_selectedKeySet.clearKeys(); //test this
						return;
					}
					
					var entities:Array = extractAllEntitiyValues();
					
					var query:DelayedAsyncInvocation = InfoMapAdminInterface.instance.searchInDocuments(entities,selectedDocs);
					query.addAsyncResponder(handleMatchedEntities,handleMatchedEntitiesFault);
				}
				
			}
			
			private function handleMatchedEntities(event:ResultEvent,token:Object=null):void
			{
				var entities:Array = event.result as Array;
				var keys:Array = [];
				for each(var entity:String in entities)
				{
					//get all entity attribute columns of selected keytype
					var attrCols:Array = getLinkableDescendants(Weave.root,IAttributeColumn);
					
					for each (var attrCol:IAttributeColumn in attrCols)
					{
						var entityValue:String = attrCol.getMetadata("isEntity");
						if(entityValue == "true")
						{
							for each (var key:IQualifiedKey in attrCol.keys)
							{
								var value:String = ColumnUtils.getString(attrCol,key);
								if(value.toLowerCase() == entity.toLowerCase())
								{
									keys.push(key);
									break; //assuming that there will be only one such entity value in a column. This assumption could be wrong.
								}
							}
						}
					}
				}
				
				if(!keys.length == 0)
//					_selectedKeySet.clearKeys();
//				else
					_selectedKeySet.replaceKeys(keys);
				
//				Alert.show((event.result as Array).toString());
			}
			
			private function handleMatchedEntitiesFault(event:FaultEvent,token:Object=null):void
			{
				WeaveAPI.ErrorManager.reportError(event.type);
			}
			
			
			private function handleSelectedKeySetChange():void
			{
				var docsArray:Array = docs.getObjects();
				
					if(_selectedKeySet.keys.length == 0)
					{
						for each(var doc:SelectableInfoMapDocument in docsArray)
						{
							{
								if(doc.selected.value)
								{
									doc.selected.value = false;
								}else{
									
									doc.selected.triggerCallbacks();
								}
							}
						}
					}
			}
			
			
			private var selectionKeywords:LinkableString = new LinkableString("",null,false);
			private function handleMouseUp(event:MouseEvent):void
			{
				//we should set the selection keywords only if the mousup happened from outside of InfoMap panel
				//This is still not the right way to do it. Need to find a more efficient solution
				
				if((DraggablePanel.getTopPanel() is InfoMapPanel))
					return;
				
				
				var keywords:Array = extractKeywordsFromSelection();
				selectionKeywords.value = keywords.join(" AND ");
				
			}
			
			private function extractAllEntitiyValues():Array
			{
				//get all entity attribute columns of selected keytype
				var attrCols:Array = getLinkableDescendants(Weave.root,IAttributeColumn);
				var temp:Array = [];
				
				for each (var attrCol:IAttributeColumn in attrCols)
				{
					var entityValue:String = attrCol.getMetadata("isEntity");
					if(entityValue == "true")
					{
						for each (var key:IQualifiedKey in attrCol.keys)
						{
							var value:String = ColumnUtils.getString(attrCol,key);
							if(value)
							{
								temp.push(value);
							}
						}
					}
				}
				
				
				//get unique keywords from extracted values 
				var dict:Dictionary = new Dictionary();
				
				for each(var word:String in temp)
				{
					if(dict[word] == undefined)
						dict[word] = word;
				}
				
				var uniqueEntityValues:Array = []
				for each(var prop:String in dict)
				{
					uniqueEntityValues.push(prop);	
				}
				
				return uniqueEntityValues;
			}
			
			/**
			 * This function extracts keywords for the selected keys from entity columns
			 * and returns an array of unique keywords
			 * */ 
			private function extractKeywordsFromSelection():Array
			{
				var keys:Array = _selectedKeySet.keys;
				
				if(keys.length == 0)
					return[];
				
				//get all keytypes from selected keys
				var keyTypes:Dictionary = new Dictionary();
				
				for each (var key:IQualifiedKey in keys)
				{
					if(keyTypes[key.keyType] == undefined)
						keyTypes[key.keyType] = true;
				}
				
				//get all entity attribute columns of selected keytype
				var attrCols:Array = getLinkableDescendants(Weave.root,IAttributeColumn);
				var entityCols:Array = [];
				
				for each (var attrCol:IAttributeColumn in attrCols)
				{
					var entityValue:String = attrCol.getMetadata("isEntity");
					var keyType:String =  attrCol.getMetadata("keyType");
					if(entityValue == "true" && keyTypes[keyType])
					{
						entityCols.push(attrCol);
					}
				}
				
				var temp:Array = [];
				
				//extract values from entity columns
				for each(var col:IAttributeColumn in entityCols)
				{
					for each (var k:IQualifiedKey in keys)
					{
						var value:String = ColumnUtils.getString(col,k);
						if(value)
						{
							temp.push('"'+value+'"');
						}
					}
				}
				
				//get unique keywords from extracted values
				var dict:Dictionary = new Dictionary();
				
				for each(var word:String in temp)
				{
					if(dict[word] == undefined)
						dict[word] = word;
				}
				
				var uniqueTemp:Array = []
				for each(var prop:String in dict)
				{
					uniqueTemp.push(prop);	
				}
				
				return uniqueTemp;
			}
			private var _selectionLoader:URLLoader = null;
			private function sendSelectionQuery():void
			{
				if(!selectionKeywords.value)
					return;
				
				var solrURL:String =  "http://129.63.8.219:8080/solr/select/?version=2.2&start=0&rows=2000&sort=date_published%20desc&indent=on&fl=link&q=" + 
					selectionKeywords.value;
				
				//close any previous selection requests
				if(_selectionLoader)
					_selectionLoader.close();
				
				_selectionLoader = new URLLoader();
				
				var request:URLRequest = new URLRequest(solrURL);
				_selectionLoader.addEventListener(Event.COMPLETE, handleSelectionQuery);
				_selectionLoader.addEventListener(IOErrorEvent.IO_ERROR,handleRequestError);
				_selectionLoader.load(request);
			}
			
			private function handleSelectionQuery(event:Event):void
			{
				// checks to avoid null point error
				if(_selectionLoader){
					// checks for data presence
					if(_selectionLoader.data){
						var xml:XML = new XML(_selectionLoader.data);
						parseSelectionQueryResponse(xml);
					}
				}
			}
			
			
			private function parseSelectionQueryResponse(result:XML):void
			{
				var selectedDocs:Array = [];
				for each(var docXML:XML in result.result.doc)
				{
					var link:String = docXML.str.(@name=="link").text().toXMLString();
//					var linkLen:int = link.length;
//					var linkExtension:String = link.substring(linkLen-3,linkLen);
//					if(linkExtension == "pdf"){
//						link = "http://129.63.8.219:8080/"+link.substring(link.indexOf("infomap"),linkLen);
//					}
					var doc:SelectableInfoMapDocument = docs.getObject(link) as SelectableInfoMapDocument;
					
					if(doc)
					{
						var key:IQualifiedKey = WeaveAPI.QKeyManager.getQKey("infomapDocURL",doc.url.value);
						doc.selected.value = true;
						selectedDocs.push(key);				
					}
				}
				
				_selectedKeySet.addKeys(selectedDocs);
			}
			
			
			private function handleRequestError(event:IOErrorEvent):void
			{
				WeaveAPI.ErrorManager.reportError(event.text);
			}
			
			private var refreshTimer:Timer = new Timer(300000);
			
			private function refreshNodes(event:TimerEvent):void
			{
				var handlers:Array = nodes.getObjects();
				
				for (var i:int = 0;i<handlers.length;i++)
				{
					if(handlers[i] is NodeHandler)
						(handlers[i] as NodeHandler).checkForNewDocuments();
					
				}
			}
			
			
			private function handlePanelResize():void
			{
				map.validateNow();
			}
			
			
			
			private function handleKeyUp(event:KeyboardEvent):void
			{
				if(event.keyCode == Keyboard.ENTER)
					handleAddNodeButtonClick();
			}
			private function handleAddNodeButtonClick():void
			{
				if(nodeComboBox.selectedItem == 'Add a Query Node')
					addInfoMapNode(keywordsInput.text);
				else if (nodeComboBox.selectedItem == 'Add a Map Node')
					addInfoMapLink(keywordsInput.text);
			}
			
			private function addInfoMapLink(mapName:String):void
			{
				var className:String = getQualifiedClassName(LinkToInfoMapComponent).split("::")[1];
				var linkNodeName:String = nodes.generateUniqueName(className);
				var linkNode:LinkToInfoMapComponent = new LinkToInfoMapComponent();
				linkNode = nodes.requestObject(linkNodeName,LinkToInfoMapComponent,false);
				linkNode.mapNameTextArea.text = mapName;
				
			}
			
			private function handleNodesChildListChange():void
			{
				var nodesArray:Array = nodes.getObjects();
				
				for each (var n:NodeHandler in nodesArray)
				{
					linkBindableProperty((n as NodeHandler).defaultBorderColor,this,"defaultNodeBorderColor");
					linkBindableProperty((n as NodeHandler).selectedBorderColor,this,"selectedNodeBorderColor");
					linkBindableProperty((n as NodeHandler).defaultThumbnailBorderColor,this,"defaultThumbnailBorderColor");
					linkBindableProperty((n as NodeHandler).selectedThumbnailBorderColor,this,"selectedThumbnailBorderColor");
					linkBindableProperty((n as NodeHandler).newThumbnailGlowColor,this,"newThumbnailGlowColor");					
				}
			}
			
			public function addInfoMapNode(query:String=null,op:String=null):void
			{
				var className:String = getQualifiedClassName(NodeHandler).split("::")[1];
				var nodeName:String = nodes.generateUniqueName(className);
				var nodeHandler:NodeHandler= new NodeHandler();
				nodeHandler = nodes.requestObject(nodeName,NodeHandler,false);
				
				if(query==null)
				{
					nodeHandler.node.keywords.value = extractKeywordsFromSelection().join(" ");
					
					//if query is null then user entered it from selection from another tool
					//we clear this selection
					_selectedKeySet.clearKeys();
				}else{
					nodeHandler.node.keywords.value = query;
				}
				if(op ==null)
				{
					//TODO: should take value from RadioButton. Value was null when last tried.
					nodeHandler.node.operator.value = "AND";	
				}
				else{
					
					nodeHandler.node.operator.value = op;
				}
			}
			
			private var loader:URLLoader = null;
			private function addRssFeed():void
			{
				var url:String = feedURL.text;
				url = StringUtil.trim(url);
				if(url == "")
				{
					errorMsg.visible = true;
					return;	
				}
				
				var title:String = feedTitle.text;
				title = StringUtil.trim(title);
				if(title == "")
				{
					errorMsg.visible = true;	
					return;
				}	
								
				InfoMapAdminInterface.instance.addRssFeed(feedTitle.text,feedURL.text);
				sortByTitle();
				
				errorMsg.visible = false;
			}
			
			private function deleteRssFeed():void
			{
				if(grid.selectedItem == null)
					return;

				PopUpUtils.confirm(
					this,
					"Confirm delete",
					'Delete Feed entry:  "'+(grid.selectedItem as Array)[0]+'"?',
					del
				);
				
				function del():void{
					
					var url:String = (grid.selectedItem as Array)[1];
					
					if (url =="")
						return;
					
					InfoMapAdminInterface.instance.deleteRssFeed(url);
					sortByTitle();
				}
			}
			
			private function sortByTitle():void
			{
				var dp:ArrayCollection = grid.dataProvider as ArrayCollection;
				var sort:Sort = new Sort();
				var sortF:SortField = new SortField("Title",true,false);
				sort.fields = [sortF];
				dp.sort = sort;
			}
			
			private function startIndexing():void
			{
				WeaveAPI.URLRequestUtils.getURL(new URLRequest("http://129.63.8.219:8080/solr/select?clean=false&commit=true&qt=%2Fdataimport&command=full-import"));
				
			}
			
			
			private function handleDateFilter():void
			{
				DateFilterComponent.openInstance(this,globalDateFilter);
			}
			
			private function handleSelectAll():void
			{
				var handlers:Array = nodes.getObjects();
				
				for (var i:int = 0;i<handlers.length;i++)
				{
					if(handlers[i] is NodeHandler)
						(handlers[i] as NodeHandler).node.selected.value = selectAllCheckBox.selected;
					
				}
			
				
			}
			
			
			private function handleNodeComboBoxChange():void
			{
				if(nodeComboBox.selectedItem == 'Add a Query Node')
					keywordsInput.toolTip = 'Enter keywords to query';
				else
					keywordsInput.toolTip = 'Enter a name to link to an Infomap';
			}
			
			
			
			private var _fileLoader:FileReference = null;
			/**
			 * browseForfiles: opens up a file browser window to upload CSV files 
			 **/
			private function browse():void
			{
				if(_fileLoader == null)
				{
					_fileLoader = new FileReference();
					_fileLoader.addEventListener(Event.SELECT, handleDatasetSelected);
					_fileLoader.addEventListener(Event.COMPLETE, handleDatasetLoaded);
				}
				
				_fileLoader.browse();
			}
			
			
			private function handleDatasetSelected(event:Event):void
			{
				_fileLoader.load();
			}
			
			private function handleBackgroundImageChange():void
			{
				if(backgroundImageName.value)
					map.setStyle("backgroundImage","/infomap_images/"+ backgroundImageName.value+".png");
			}
			
			private var _mapImage:BitmapData
			private var imgLoader:Loader = new Loader();
			private function handleDatasetLoaded(event:Event):void
			{
				imageURL.text = _fileLoader.name.substr(0,_fileLoader.name.length-4);
				
				imgLoader.contentLoaderInfo.addEventListener(Event.COMPLETE,handleLoaderComplete);
				imgLoader.loadBytes(_fileLoader.data);
				
				
			}
			
			private function handleLoaderComplete(event:Event):void
			{
				var imgBitMap:Bitmap = Bitmap(imgLoader.content);
				
				BitmapUtils.drawCenteredIcon(map.graphics,map.x+map.width/2,map.y+map.height/2,imgBitMap.bitmapData);
			}
			
			private function saveImage(event:Event):void
			{
				
								
				var _byteArray:ByteArray = new ByteArray();
				_byteArray.writeBytes(_fileLoader.data as ByteArray);
				var encoder:Base64Encoder = new Base64Encoder();
				encoder.encodeBytes(_byteArray);
				
				var request:URLRequest = new URLRequest('/ImageService/Base64ImageService/'+imageURL.text);
				var encoderStr:String = encoder.drain();
				request.method = URLRequestMethod.POST;
				request.data = encoderStr;
				trace('sent byteArray:', encoderStr.length);
				WeaveAPI.URLRequestUtils.getURL(request, handleImageSave, handleImageSaveFault, null, URLLoaderDataFormat.BINARY);

			}
			
			private function handleImageSave(event:ResultEvent,token:Object=null):void
			{
				Alert.show("Image saved as " + event.result,"Saved");
				
				backgroundImageName.value = imageURL.text;
				
			}
			
			private function handleImageSaveFault(event:ResultEvent,token:Object=null):void
			{
				Alert.show("Image could not be saved" + event.message,"Error");	
			}
			
			
			private function clearImage():void
			{
				map.graphics.clear();
				backgroundImageName.value = "";				
			}
			
			
		]]>
	</mx:Script>
	<!--the resize code is required so that the content is clipped by the canvas-->
	<mx:Canvas backgroundImage="" id="map" clipContent="true" width="100%" height="100%" autoLayout="false" 
			   verticalScrollPolicy="off" horizontalScrollPolicy="off" 
			   resize="map.scrollRect=new Rectangle(0,0,map.width,map.height);handlePanelResize();"><!--For clipping the content at the edges-->
				<mx:HBox paddingLeft="5" paddingTop="5">
					<mx:HBox>
						<mx:ComboBox id="nodeComboBox" dataProvider="{['Add a Query Node','Add a Map Node']}" fontWeight="bold" change="handleNodeComboBoxChange()"/>
						<mx:TextInput keyUp="handleKeyUp(event)" id="keywordsInput" enabled="true" cornerRadius="5" borderStyle="solid" toolTip="Separate your keywords by space to apply the operator correctly"/>
						<mx:Button label="Add" id="addNodeButton" click="handleAddNodeButtonClick()"/>
					</mx:HBox>
					<!--<mx:HBox>
						<mx:Label text="Operator: "/>
						<mx:RadioButtonGroup id="operatorButton" enabled="true"/>
						<mx:RadioButton groupName="operatorButton" value="OR" label="OR"/>
						<mx:RadioButton groupName="operatorButton" value="AND" label="AND" selected="true"/>
					</mx:HBox>
					<mx:HBox>
						<mx:Label text="Date Range: "/>
						<mx:TextInput  cornerRadius="5" borderStyle="solid" editable="false" id="startDateText" width="75" />
							<mx:Label text="TO"/>
						<mx:TextInput  cornerRadius="5" borderStyle="solid" editable="false" id="endDateText" width="75"/>
						<mx:LinkButton textDecoration="underline" color="blue" fontWeight="normal" label="Select" click="handleDateFilter()"/>
						<mx:LinkButton textDecoration="underline" color="blue" fontWeight="normal" label="Clear" click="clearDateFilter()"/>
					</mx:HBox>-->
					<mx:Spacer width="150"/>
					<mx:VBox>
						<mx:HBox>
							<mx:Label fontWeight="bold" text="Search in Selected Nodes:"/>
							<mx:TextInput id="globalSearchTextInput" borderStyle="solid" cornerRadius="5" width="200" />
							<mx:LinkButton textDecoration="underline" color="blue" fontWeight="normal" label="Add Date Filter in Selected Nodes" click="handleDateFilter()"/>
							<mx:Spacer width="50"/>
						</mx:HBox>
						<mx:CheckBox id="selectAllCheckBox" change="handleSelectAll()" label="Select All Nodes" selected="false"/>
					</mx:VBox>
				</mx:HBox>
				
		
		</mx:Canvas>
	<ui:ControlPanel id="ctrlPanel">
		<mx:VBox label="Basic Settings">
			<mx:HBox>
				<mx:Label text="Set Background Image: "/>
				<mx:TextInput editable="false" id="imageURL"/>
				<mx:Button label="Browse" click="browse()"/>
				<mx:Button label="Clear" click="clearImage()"/>
				<mx:Button label="Save" click="saveImage(event)"/>
			</mx:HBox>
			<mx:Spacer height="50"/>
			<mx:HBox>
				<mx:VBox>
					<mx:HBox>
						<mx:ColorPicker id="defaultNodeColorPicker" selectedColor="{defaultNodeBorderColor}" change="defaultNodeBorderColor = event.target.selectedColor;"/>
						<mx:Label width="150" text="Default Node Color"/>				
					</mx:HBox>
					
					<mx:HBox>
						<mx:ColorPicker id="selectedNodeColorPicker" selectedColor="{selectedNodeBorderColor}" change="selectedNodeBorderColor = event.target.selectedColor;"/>
						<mx:Label width="150" text="Selected Node Color"/>				
					</mx:HBox>
				</mx:VBox>
				<mx:VBox>
					<mx:HBox>
						<mx:ColorPicker id="defaultThumbnailBorderPicker" selectedColor="{defaultThumbnailBorderColor}" change="defaultThumbnailBorderColor = event.target.selectedColor;"/>
						<mx:Label width="200" text="Default Thumbnail Border Color"/>				
					</mx:HBox>
					
					<mx:HBox>
						<mx:ColorPicker id="selectedThumbnailBorderPicker" selectedColor="{selectedThumbnailBorderColor}" change="selectedThumbnailBorderColor= event.target.selectedColor;"/>
						<mx:Label width="200" text="Selected Thumbnail Border Color"/>				
					</mx:HBox>
					<mx:HBox>
						<mx:ColorPicker id="thumbnailGlowColorPicker" selectedColor="{newThumbnailGlowColor}" change="newThumbnailGlowColor= event.target.selectedColor;"/>
						<mx:Label width="200" text="Selected Thumbnail Border Color"/>				
					</mx:HBox>
				</mx:VBox>
			</mx:HBox>
		</mx:VBox>
		<mx:VBox id="feedsControlPanel" label="Add/Remove Feeds">
		<mx:Label text="Enter RSS Feed: " />
		<mx:HBox>
			<mx:Label text="Title"/>
			<mx:TextInput width="100" id="feedTitle" borderStyle="solid" cornerRadius="5" />
			<mx:Label text="URL"/>
			<mx:TextInput width="300" id="feedURL" borderStyle="solid" cornerRadius="5" />
			<mx:Button label="Add" click="addRssFeed()" />
		</mx:HBox>	
		<mx:Label id="errorMsg" color="red" fontWeight="bold" text="Both fields are required." visible="false"/>
			<mx:DataGrid id="grid" dataProvider="{InfoMapAdminInterface.instance.rssFeeds}" width="100%">
				<mx:columns>
					<mx:DataGridColumn dataField="0" sortDescending="true" headerText="Title"/>
					<mx:DataGridColumn dataField="1" headerText="URL"/>
				</mx:columns>
			</mx:DataGrid>
		<mx:HBox width="100%">
			<mx:Button label="Index Now" click="startIndexing()" />
			<mx:Spacer width="100%"/>
			<mx:Button  label="Delete Selected Feed" click="deleteRssFeed()"/>
		</mx:HBox>
			<mx:TextArea backgroundColor="0xCCCCCC" borderThickness="0" editable="false" width="500" height="100%" fontWeight="bold" text="The indexing is scheduled to run every hour. You can hit the Index Now button if you want to index your feeds you added recently. Please allow 10 -15 minutes for the results to show up."/>
		</mx:VBox>
		<ui:UserWindowSettings targetTool="{this}"/>
	</ui:ControlPanel>
</ui:DraggablePanel>