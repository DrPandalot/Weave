<?xml version="1.0" encoding="utf-8"?>
<mx:VBox xmlns:mx="http://www.adobe.com/2006/mxml" width="400" height="300"
			  implements="weave.api.core.ILinkableObject"
			  borderThickness="0"
			  horizontalAlign="center"
			  horizontalScrollPolicy="off"
			  verticalScrollPolicy="off"
			  >
	<mx:HBox horizontalAlign="right">
		<mx:Image id="infoImg" source="@Embed(source='/weave/resources/images/probe.png')"/>
		<mx:Image buttonMode="true" id="settingsImg" click="openSettingsPanel()" source="@Embed(source='/weave/resources/images/tinyWrench.png')"/>
		<mx:Spacer width="60" />
		<mx:Image id="closeImg" source="@Embed(source='/weave/resources/images/cancel.png')"/>
	</mx:HBox>
	<!--when TextImput is used, the text cursor is always displayed along with the hand cursor-->
	<mx:TextArea color="blue" textDecoration="underline" id="mapNameTextArea" editable="false" selectable="false" textAlign="center" mouseOver="handleMouseOver()"
				  mouseOut="handleMouseOut()" mouseDown="handleMouseDown(event)"  mouseUp="handleMouseUp()" keyDown="handleKeyUp(event)"
				  focusAlpha="0"/>
	<mx:Glow id="borderGlow" 
			 alphaFrom="0.0" alphaTo="0.1"   
			 blurXFrom="10.0" blurYFrom="10.0" 
			 blurXTo="10.0" blurYTo="10.0"
			 color="black"
			 duration="0" target="{this}"/>	
	<mx:Script>
		<![CDATA[
			import mx.controls.Alert;
			import mx.events.CloseEvent;
			import mx.managers.CursorManager;
			
			import weave.api.core.ILinkableHashMap;
			import weave.api.core.ILinkableObject;
			import weave.api.linkBindableProperty;
			import weave.api.newLinkableChild;
			import weave.core.LinkableNumber;
			import weave.core.LinkableString;
			import weave.ui.infomap.InfoMapLoader;
			import weave.utils.CustomCursorManager;
			import weave.visualization.layers.InteractionController;
			import weave.visualization.layers.InteractiveVisualization;
			
			//we override the x,y value because we are binding the values to LinkableNumber 
			//which could be NaN when component loads for the first time
			override public function set x(value:Number):void
			{
				if(parent)
					super.x = isNaN(value)?parent.width/2:value;
				else
					super.x=value
			}
			
			override public function set y(value:Number):void
			{
				if(parent)
					super.y = isNaN(value)?parent.height/2:value;
				else
					super.y=value
				
			}
			
			public const xPos:LinkableNumber = newLinkableChild(this,LinkableNumber);
			public const yPos:LinkableNumber = newLinkableChild(this,LinkableNumber);
			
			public const mapName:LinkableString = newLinkableChild(this,LinkableString,changeToolTip);
			
			override protected function childrenCreated():void
			{
				super.childrenCreated();
				borderGlow.play();	
				//sessioning the x and y positions of this node
				linkBindableProperty(xPos,this,"x");
				linkBindableProperty(yPos,this,"y");
				linkBindableProperty(mapName,mapNameTextArea,"text");
				infoImg.toolTip= "Link to Infomap : " + mapName.value;
				
				closeImg.toolTip = "Remove this node";
				closeImg.width = 12;
				closeImg.height = 12;
				closeImg.visible = true;
				closeImg.buttonMode = true; //you need this for click event to work on an image!
				closeImg.addEventListener(MouseEvent.CLICK,close);
				
				if(!mapNameTextArea.text)
				{
					mapNameTextArea.selectable = true;
					mapNameTextArea.editable = true;
					mapNameTextArea.setFocus();
					mapNameTextArea.setSelection(0,0);
				}
			}
			
			private function changeToolTip():void
			{
				if(infoImg == null || mapName.value == null)
					return;
				infoImg.toolTip= "Link to Infomap : " + mapName.value;
			}
			
			private var linkCursorID:int = -1;
			private var handCursorID:int = -1;
			private function handleMouseOver():void
			{
				CustomCursorManager.removeCursor(linkCursorID);
				CustomCursorManager.removeCursor(handCursorID);
				linkCursorID = CustomCursorManager.showCursor(InteractiveVisualization.CURSOR_LINK);
			}
			
			
			private function handleMouseOut():void
			{
				CustomCursorManager.removeCursor(linkCursorID);
				CustomCursorManager.removeCursor(handCursorID);
			}
			private var _wasDragged:Boolean = false;
			private function handleMouseDown(event:MouseEvent):void
			{
				event.stopImmediatePropagation();
				handCursorID = CustomCursorManager.showCursor(InteractiveVisualization.CURSOR_HAND_GRAB);
				mapNameTextArea.addEventListener(MouseEvent.MOUSE_MOVE,handleMouseMove);
				this.startDrag();
			}
			
			private function handleMouseMove(event:Event):void
			{
				_wasDragged = true;
				
			}
			
			private function handleMouseUp():void
			{
				linkCursorID = CustomCursorManager.showCursor(InteractiveVisualization.CURSOR_LINK);
				this.stopDrag();
				if(!_wasDragged)
				{
					openMap();
				}
				_wasDragged = false;
				mapNameTextArea.removeEventListener(MouseEvent.MOUSE_MOVE,handleMouseMove);
				
			}
			
			private function handleKeyUp(event:KeyboardEvent):void
			{
				if(event.keyCode == Keyboard.ENTER)
				{
					event.preventDefault();
					mapName.value = mapNameTextArea.text;
					mapNameTextArea.editable = false;
					mapNameTextArea.selectable = false;
				}
			}
			
			private function openMap():void
			{
				if(mapNameTextArea.text)
					InfoMapLoader.openPanelWithName(mapName.value);
			}
			
			private function openSettingsPanel():void
			{
				LinktoInfoMapSettings.openInstance(this);
			}
			
			private function close(event:Event):void
			{
				Alert.show("Are you sure you want to remove this node?",
					"Remove Node?",
					Alert.YES | Alert.NO,
					null,
					handleCloseEvent
				);
			}
			
			private function handleCloseEvent(e:CloseEvent):void
			{
				if(e.detail == Alert.YES)
				{
					var parent:ILinkableHashMap = (WeaveAPI.SessionManager.getLinkableOwner(this) as ILinkableHashMap);
					var nodeName:String  = parent.getName(this);
					parent.removeObject(nodeName);
				}
				else if(e.detail == Alert.NO)
				{
					return;
				}
			}		
		]]>
	</mx:Script>
</mx:VBox>
