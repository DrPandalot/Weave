<?xml version="1.0" encoding="utf-8"?>
<mx:Canvas xmlns:mx="http://www.adobe.com/2006/mxml" width="2" height="2"
		   xmlns:ui="weave.ui.infomap.ui.*"
		   autoLayout="false" cacheAsBitmap="false" clipContent="false" creationPolicy="all"
		   horizontalScrollPolicy="off" implements="weave.api.core.ILinkableObject"
		   verticalScrollPolicy="off" mouseDown="startDragging(event)" mouseUp="stopDragging(event)">
	<mx:TextInput id="groupName"  width="80" height="25" x="{this.width/2-groupName.width/2}" y="{this.height/2 - groupName.height/2}" />
	<mx:Script>
		<![CDATA[
			import mx.events.DragEvent;
			import mx.managers.DragManager;
			
			import weave.api.linkBindableProperty;
			import weave.api.newLinkableChild;
			import weave.api.registerLinkableChild;
			import weave.core.LinkableHashMap;
			import weave.core.LinkableNumber;
			import weave.core.LinkableString;
			import weave.utils.CustomCursorManager;
			import weave.visualization.layers.InteractiveVisualization;
			
			public const xPos:LinkableNumber = newLinkableChild(this,LinkableNumber);
			public const yPos:LinkableNumber = newLinkableChild(this,LinkableNumber);
			public const nodeTitle:LinkableString = newLinkableChild(this, LinkableString);
			private var handCursorID:int = -1;
			
			public const childrenNodes:LinkableString = registerLinkableChild(this,new LinkableString(""));
			
			private var circleRadius:int = 100;
			
			override protected function childrenCreated():void
			{
				super.childrenCreated();
				
				//sessioning the x and y positions of this node
				linkBindableProperty(xPos,this,"x");
				linkBindableProperty(yPos,this,"y");
				linkBindableProperty(nodeTitle,this.groupName,"text");
				
				graphics.beginFill(0x00FFFF);
				graphics.drawCircle(width/2, height/2, circleRadius);
				//graphics.drawCircle(width/2, height/2, 75);
				graphics.endFill();
			}
			
			protected function startDragging(event:MouseEvent):void
			{
				event.stopImmediatePropagation();
				handCursorID = CustomCursorManager.showCursor(InteractiveVisualization.CURSOR_HAND_GRAB);
				this.startDrag();
			}
			
			protected function stopDragging(event:MouseEvent):void
			{
				//event.stopImmediatePropagation();
				CustomCursorManager.removeCursor(handCursorID);
				this.stopDrag();
			}
			
			public function addNode(node:String):void
			{
				childrenNodes.value.concat(node,",");
			}
			
			public function removeNode(node:String):void
			{
				childrenNodes.value = childrenNodes.value.replace(node+",","");
			}
			
			public function getChildrenNodes():Array
			{
				return childrenNodes.value.split(",");
			}
		]]>
	</mx:Script>
</mx:Canvas>
