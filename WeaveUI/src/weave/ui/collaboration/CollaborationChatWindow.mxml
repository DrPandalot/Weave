<?xml version="1.0" encoding="utf-8"?>
<!--
	Weave (Web-based Analysis and Visualization Environment)
	Copyright (C) 2008-2011 University of Massachusetts Lowell
	
	This file is a part of Weave.
	
	Weave is free software: you can redistribute it and/or modify
	it under the terms of the GNU General Public License, Version 3,
	as published by the Free Software Foundation.
	
	Weave is distributed in the hope that it will be useful,
	but WITHOUT ANY WARRANTY; without even the implied warranty of
	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
	GNU General Public License for more details.
	
	You should have received a copy of the GNU General Public License
	along with Weave.  If not, see <http://www.gnu.org/licenses/>.
-->
<mx:Canvas xmlns:mx="http://www.adobe.com/2006/mxml" 
		 verticalScrollPolicy="off" horizontalScrollPolicy="off"
		 borderColor="#54585E" borderThickness="3" borderStyle="solid"
		 backgroundAlpha="1" backgroundColor="#CCCCCC" height="400"
		 xmlns:collab="weave.ui.collaboration.*" xmlns:ui="weave.ui.*">
	
	<mx:Fade id="fadeIn" duration="200" alphaFrom="0" alphaTo="1" />
	<mx:Fade id="fadeOut" duration="200" alphaFrom="1" alphaTo="0" />
	
	<mx:VBox width="100%" height="100%"
			 paddingBottom="{padding}" paddingLeft="{padding}"
			 paddingRight="{padding}" paddingTop="{padding}">
		<mx:VBox id="containerGlobal" width="100%" height="100%">
			<mx:VBox id="containerAddons" width="100%" height="0" horizontalScrollPolicy="off">
				<mx:Canvas width="100%" height="100%" clipContent="true"
						   horizontalScrollPolicy="off" verticalScrollPolicy="off">
					<mx:Canvas id="containerRemoteCams" width="100%" height="100%" autoLayout="false" />
					<mx:HBox verticalAlign="bottom" horizontalAlign="right" bottom="0" right="0">
						<mx:UIComponent id="containerLocalCam" width="80" height="60" />
					</mx:HBox>
				</mx:Canvas>
				<mx:HBox id="addonControls" width="100%" horizontalAlign="center" horizontalScrollPolicy="off">
					<mx:Button id="button_mic" width="28" height="22" toggle="true" 
							   enabled="{addOnsSaved}" click="toggleMic(event)"/>
					<mx:Button id="button_cam" width="28" height="22" toggle="true" 
							   enabled="{addOnsSaved}" click="toggleCam(event)"/>
				</mx:HBox>
			</mx:VBox>
			<mx:VBox id="containerChat" width="100%" height="100%">
				<mx:TextArea id="rtmpErrorLabel" borderThickness="0" backgroundAlpha="0" editable="false"
							 wordWrap="true" color="#FF0000" fontWeight="bold" width="100%" height="20"
							 showEffect="{fadeIn}" hideEffect="{fadeOut}" visible="false" includeInLayout="false" />
					<mx:TextArea id="log" width="100%" height="100%" editable="false" />
				<mx:HBox width="100%">
					<mx:TextInput id="input" width="100%" enter="dispatchMessageEvent()" />
					<mx:Button id="button_send" label="{lang('Send')}" click="dispatchMessageEvent()" />
				</mx:HBox>
			</mx:VBox>
		</mx:VBox>
	</mx:VBox>
	
	<mx:Script>
		<![CDATA[
			import weave.api.WeaveAPI;
			import mx.utils.ObjectUtil;
			import mx.collections.ArrayCollection;
			import mx.collections.ICollectionView;
			import mx.collections.Sort;
			import mx.utils.StringUtil;
			
			import weave.services.collaboration.CollaborationEvent;
			
			public const TYPE_MIC:String						= "MIC";
			public const TYPE_CAM:String						= "CAM";
			public const TYPE_SPEC:String						= "SPEC";
			public const TYPE_PING:String						= "PING";
			public const TYPE_COLOR:String						= "COLOR";
			
			[Bindable] public var xFrom:Number 					= 0;
			[Bindable] public var xTo:Number 					= 0;
			[Bindable] public var yFrom:Number 					= 0;
			[Bindable] public var yTo:Number 					= 0;
			[Bindable] public var unreadMessages:Number 		= 0;
			[Bindable] internal var _userListInfo:Dictionary	= new Dictionary();
			
			[Bindable] public var addOnsSaved:Boolean 			= false;
			[Bindable] public var connectedToRTMPService:Boolean= false;
			[Bindable] public var rtmpService:NetConnection		= null;
			[Bindable] public var ping:Number 					= 0;
			
			internal var nickname:String 						= null;
			internal var roomName:String						= null;
			
			private const padding:Number 						= 10;
			private var enabledMic:Boolean 						= false;
			private var enabledCam:Boolean 						= false;
			private var localVideo:Video   						= null;
			private var nsPublishMic:NetStream 					= null;
			private var nsPublishCam:NetStream 					= null;
			private var nsPlayMicList:Dictionary  				= new Dictionary();
			private var nsPlayCamList:Dictionary				= new Dictionary();

			public var cam:Camera;
			public var mic:Microphone;
			
			[Embed(source="/weave/resources/images/collab/mic.png")]     internal const iconMic:Class;
			[Embed(source="/weave/resources/images/collab/cam.png")]     internal const iconCam:Class;
			[Embed(source="/weave/resources/images/collab/speaker.png")] internal const iconSpeaker:Class;
			[Embed(source="/weave/resources/images/collab/eye.png")]     internal const iconEye:Class;

			override protected function childrenCreated():void
			{
				super.childrenCreated();
//				button_mic.setStyle("icon", iconMic);
//				button_cam.setStyle("icon", iconCam);
			}
			public function logText(txt:String):void
			{
				var from:String = txt.substr(0, txt.indexOf(":"));
				if( from && from == nickname )
					log.htmlText += "<font color='#FF0000'>"+txt+"<br>";
				else
					log.htmlText += "<font color='#0000FF'>"+txt +"<br>";
				
				callLater(
					function():void {
						log.verticalScrollPosition = log.maxVerticalScrollPosition;
					}
				);
				if( !visible ) unreadMessages++;
			}
			private function dispatchMessageEvent():void
			{
				dispatchEvent(new CollaborationEvent(CollaborationEvent.SEND_MESSAGE, input.text));
				input.text = "";
			}
			private function toggleMic(e:MouseEvent):void
			{
				enabledMic = !enabledMic;
				dispatchEvent(new CollaborationEvent(CollaborationEvent.UPDATE_MIC, ( enabledMic ) ? "1" : "0"));
				
				if( rtmpService )
				{
					if( enabledMic )
					{
						nsPublishMic = new NetStream(rtmpService);
						nsPublishMic.addEventListener(NetStatusEvent.NET_STATUS, netStatusEventHandler);
						mic.setUseEchoSuppression(true);
						mic.setSilenceLevel(20);
						nsPublishMic.attachAudio(mic);
						nsPublishMic.publish("m-"+roomName+"-"+nickname, "live");
					}
					else
					{
						nsPublishMic.attachAudio(null);
						nsPublishMic.removeEventListener(NetStatusEvent.NET_STATUS, netStatusEventHandler);
						nsPublishMic.close();
						nsPublishMic = null;
					}
				}
			}
			private function toggleCam(e:MouseEvent):void
			{
				enabledCam = !enabledCam;
				dispatchEvent(new CollaborationEvent(CollaborationEvent.UPDATE_CAM, ( enabledCam ) ? "1" : "0"));
				
				if( rtmpService )
				{
					if( enabledCam )
					{
						localVideo = new Video(containerLocalCam.width, containerLocalCam.height);
						cam.setQuality(0, 90);
						localVideo.attachCamera(cam);
						containerLocalCam.addChild(localVideo);
						
						nsPublishCam = new NetStream(rtmpService);
						nsPublishCam.addEventListener(NetStatusEvent.NET_STATUS, netStatusEventHandler);
						nsPublishCam.attachCamera(cam);
						nsPublishCam.publish("v-"+roomName+"-"+nickname, "live");
						
						if( dictionaryLength(nsPlayCamList) == 0 )
							showLocalDisplay();
					}
					else
					{
						localVideo.attachCamera(null);
						localVideo.clear();
						containerLocalCam.removeChild(localVideo);
						localVideo = null;
						
						nsPublishCam.attachCamera(null);
						nsPublishCam.removeEventListener(NetStatusEvent.NET_STATUS, netStatusEventHandler);
						nsPublishCam.close();
						nsPublishCam = null;
						
						if( dictionaryLength(nsPlayCamList) == 0 )
							hideLocalDisplay();
					}
				}
			}
			private function netStatusEventHandler(e:NetStatusEvent):void
			{
				switch( e.info.code )
				{
					case "NetStream.Publish.BadName":
						showRTMPWarning("Error publishing stream: Bad Name", 10000);
						break;
					default:
						trace("Unhandled netstatus event: "+e.info.code);
						break;
				}
			}
			public function showAddonControls():void
			{
				containerAddons.height = addonControls.height + 6;
			}
			public function showLocalDisplay():void
			{
				containerAddons.height = addonControls.height + 66;
			}
			public function showRemoteDisplay():void
			{
				containerAddons.height = addonControls.height + 146;
			}
			public function hideAddonControls():void	{ containerAddons.height = 0; }
			public function hideRemoteDisplay():void 	{ showAddonControls(); }
			public function hideLocalDisplay():void 	{ showAddonControls(); }
			
			public function showRTMPWarning(msg:String = null, fadeout:Number = -1):void
			{
				if( msg )
				{
					rtmpErrorLabel.text = msg;
					rtmpErrorLabel.visible = true;
					rtmpErrorLabel.includeInLayout = true;
				}
				else
				{
					rtmpErrorLabel.text = "";
					rtmpErrorLabel.visible = false;
					rtmpErrorLabel.includeInLayout = false;
				}
				if( fadeout > 0 )
				{
					var t:Timer = new Timer(fadeout);
					t.addEventListener(TimerEvent.TIMER,
						function():void
						{
							t.stop();
							showRTMPWarning();
						}
					);
					t.start();
				}
			}
			
			public function organizeRemoteVideos():void
			{
				var maxWidth:Number = 140;
				var minWidth:Number = 92;
				var count:Number = streamingCount();
				var usable:Number = containerRemoteCams.width;
				var camWidth:Number = ((usable/(count+1)) > maxWidth) ? maxWidth : (usable/(count+1));
				var names:Array = new Array();
				
				if( camWidth < minWidth )
					camWidth = minWidth;
				
				trace( "Usable width: "+usable);
				trace( usable,"/",count+1,">",maxWidth,"[",((usable / (count+1) > maxWidth)?"T":"F"),"] =",maxWidth,":",camWidth);
				
				for( var n:String in nsPlayCamList ) names.push(n);
				names.sort();
				
				switch( count )
				{
					case 1:
						var vid:CollaborationVideo = nsPlayCamList[names[0]] as CollaborationVideo;
						vid.setSize(camWidth);
						vid.setPos(usable/2-vid.width/2, 0);
						trace("setPos(", usable/2-vid.width/2,", 0);");
						break;
					case 2:
						var vid1:CollaborationVideo = nsPlayCamList[names[0]] as CollaborationVideo;
						vid1.setSize(camWidth);
//						vid1.setPos(usable/3-vid1.width/2, 0);
						
						var vid2:CollaborationVideo = nsPlayCamList[names[1]] as CollaborationVideo;
						vid2.setSize(camWidth);
//						vid2.setPos(2*usable/3-vid2.width/2, 0);
						break;
					case 3:
//						var vid1:CollaborationVideo = nsPlayCamList[names[0]] as CollaborationVideo;
//						vid1.setSize(camWidth);
//						vid1.setPos(usable/6-vid1.width/2, 0);
						
//						var vid2:CollaborationVideo = nsPlayCamList[names[1]] as CollaborationVideo;
//						vid2.setSize(camWidth);
//						vid2.setPos(2*usable/6-vid2.width/2, 0);
						
//						var vid3:CollaborationVideo = nsPlayCamList[names[2]] as CollaborationVideo;
//						vid3.setSize(camWidth);
//						vid3.setPos(4*usable/6-vid3.width/2, 0);
						break;
					default:
						
						break;
				}
			}
			private function dictionaryLength(dic:Dictionary):Number
			{
				var n:Number = 0;
				for( var key:Object in dic )
					n++;
				return n;
			}
			public function streamingCount():Number
			{
				return dictionaryLength(nsPlayCamList);
			}
			
		]]>
	</mx:Script>
</mx:Canvas>