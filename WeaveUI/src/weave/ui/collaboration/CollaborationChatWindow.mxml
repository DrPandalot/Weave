<?xml version="1.0" encoding="utf-8"?>
<!--
	Weave (Web-based Analysis and Visualization Environment)
	Copyright (C) 2008-2011 University of Massachusetts Lowell
	
	This file is a part of Weave.
	
	Weave is free software: you can redistribute it and/or modify
	it under the terms of the GNU General Public License, Version 3,
	as published by the Free Software Foundation.
	
	Weave is distributed in the hope that it will be useful,
	but WITHOUT ANY WARRANTY; without even the implied warranty of
	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
	GNU General Public License for more details.
	
	You should have received a copy of the GNU General Public License
	along with Weave.  If not, see <http://www.gnu.org/licenses/>.
-->
<mx:Canvas xmlns:mx="http://www.adobe.com/2006/mxml"
		   xmlns:collab="weave.ui.collaboration.*"
		   xmlns:ui="weave.ui.*"
		   height="400" backgroundAlpha="1" backgroundColor="#CCCCCC" borderColor="#54585E"
		   borderStyle="solid" borderThickness="3" horizontalScrollPolicy="off"
		   verticalScrollPolicy="off">
	
	<mx:Fade id="fadeIn" alphaFrom="0" alphaTo="1" duration="200"/>
	<mx:Fade id="fadeOut" alphaFrom="1" alphaTo="0" duration="200"/>
	
	<mx:VBox width="100%" height="100%" paddingBottom="{padding}" paddingLeft="{padding}"
			 paddingRight="{padding}" paddingTop="{padding}">
		<mx:VBox id="containerGlobal" width="100%" height="100%">
			<mx:VBox id="containerAddons" width="100%" height="0" horizontalScrollPolicy="off">
				<mx:HBox id="addonControls" width="100%" horizontalAlign="center"
						 horizontalScrollPolicy="off">
					<mx:Button id="button_mic" width="50" height="22" label="MIC"
							   click="toggleMic(event)" enabled="{addOnsSaved &amp;&amp; mic}"
							   toggle="true"/>
					<mx:Button id="button_cam" width="50" height="22" label="CAM"
							   click="toggleCam(event)" enabled="{addOnsSaved &amp;&amp; cam}"
							   toggle="true"/>
				</mx:HBox>
			</mx:VBox>
			<mx:VBox id="containerChat" width="100%" height="100%">
				<mx:TextArea id="rtmpErrorLabel" visible="false" width="100%" height="20"
							 backgroundAlpha="0" borderThickness="0" color="#FF0000"
							 editable="false" fontWeight="bold" hideEffect="{fadeOut}"
							 includeInLayout="false" showEffect="{fadeIn}" wordWrap="true"/>
					<mx:TextArea id="log" width="100%" height="100%" editable="false"/>
				<mx:HBox width="100%">
					<mx:TextInput id="input" width="100%" enter="dispatchMessageEvent()"/>
					<mx:Button id="button_send" label="{lang('Send')}" click="dispatchMessageEvent()"/>
				</mx:HBox>
			</mx:VBox>
		</mx:VBox>
	</mx:VBox>
	
	<mx:Script>
		<![CDATA[
			import weave.services.collaboration.CollaborationEvent;
			
			//Constants for identifying add-on components.
			public const TYPE_MIC:String						= "MIC";
			public const TYPE_CAM:String						= "CAM";
			public const TYPE_SPEC:String						= "SPEC";
			public const TYPE_PING:String						= "PING";
			public const TYPE_COLOR:String						= "COLOR";
			
			[Bindable] public var unreadMessages:Number 		= 0;
			[Bindable] internal var _userListInfo:Dictionary	= new Dictionary();
			
			internal var nickname:String 						= null;
			internal var roomName:String						= null;
			
			//Rtmp variables
			[Bindable] public var addOnsSaved:Boolean 			= false;
			[Bindable] public var connectedToRTMPService:Boolean= false;
			[Bindable] public var rtmpService:NetConnection		= null;
			[Bindable] public var ping:Number 					= 0;			
			private const padding:Number 						= 10;
			private var enabledMic:Boolean 						= false;
			private var enabledCam:Boolean 						= false;
			private var localVideo:Video   						= null;
			private var nsPublishMic:NetStream 					= null;
			private var nsPublishCam:NetStream 					= null;
			private var nsPlayMicList:Dictionary  				= new Dictionary();
			[Bindable] public var cam:Camera								= null;
			[Bindable] public var mic:Microphone                         	= null;
			
			[Embed(source="/weave/resources/images/collab/mic.png")]     internal const iconMic:Class;
			[Embed(source="/weave/resources/images/collab/cam.png")]     internal const iconCam:Class;
			[Embed(source="/weave/resources/images/collab/speaker.png")] internal const iconSpeaker:Class;
			[Embed(source="/weave/resources/images/collab/eye.png")]     internal const iconEye:Class;

			override protected function childrenCreated():void
			{
				super.childrenCreated();
				//Need to determine if icons should be used or text.
//				button_mic.setStyle("icon", iconMic);
//				button_cam.setStyle("icon", iconCam);
			}
			
			/*
			* This function will add the text passed to it into the chat log.
			*/
			public function logText(txt:String):void
			{
				var from:String = txt.substr(0, txt.indexOf(":"));
				if( from && from == nickname )
					log.htmlText += "<font color='#FF0000'>"+txt+"<br>";
				else
					log.htmlText += "<font color='#0000FF'>"+txt +"<br>";
				
				callLater(
					function():void {
						log.verticalScrollPosition = log.maxVerticalScrollPosition;
					}
				);
				if( !visible ) unreadMessages++;
			}
			
			/*
			* Dispatches an event notifying the system that the user has sent a text message.
			*/
			private function dispatchMessageEvent():void
			{
				dispatchEvent(new CollaborationEvent(CollaborationEvent.SEND_MESSAGE, input.text));
				input.text = "";
			}
			
			//Mic and Camera section.
			//The following two functions are functions for the Mic and Cam buttons to handle publishing the streams.
			
			private function toggleMic(e:MouseEvent):void
			{
				if( mic == null )
					return;
				enabledMic = !enabledMic;
				dispatchEvent(new CollaborationEvent(CollaborationEvent.UPDATE_MIC, ( enabledMic ) ? "1" : "0"));
				
				if( rtmpService )
				{
					if( enabledMic )
					{
						nsPublishMic = new NetStream(rtmpService);
						nsPublishMic.addEventListener(NetStatusEvent.NET_STATUS, netStatusEventHandler);
						mic.setUseEchoSuppression(true);
						mic.setSilenceLevel(20);
						nsPublishMic.attachAudio(mic);
						nsPublishMic.publish("m-"+roomName+"-"+nickname, "live");
					}
					else
					{
						nsPublishMic.attachAudio(null);
						nsPublishMic.removeEventListener(NetStatusEvent.NET_STATUS, netStatusEventHandler);
						nsPublishMic.close();
						nsPublishMic = null;
					}
				}
			}
			
			private function toggleCam(e:MouseEvent):void
			{
				if( cam == null )
					return;
				enabledCam = !enabledCam;
				dispatchEvent(new CollaborationEvent(CollaborationEvent.UPDATE_CAM, ( enabledCam ) ? "1" : "0"));
				
				if( rtmpService )
				{
					if( enabledCam )
					{
						cam.setQuality(0, 90);
						
						nsPublishCam = new NetStream(rtmpService);
						nsPublishCam.addEventListener(NetStatusEvent.NET_STATUS, netStatusEventHandler);
						nsPublishCam.attachCamera(cam);
						nsPublishCam.publish("v-"+roomName+"-"+nickname, "live");
					}
					else
					{						
						nsPublishCam.attachCamera(null);
						nsPublishCam.removeEventListener(NetStatusEvent.NET_STATUS, netStatusEventHandler);
						nsPublishCam.close();
						nsPublishCam = null;
					}
				}
			}
			
			private function netStatusEventHandler(e:NetStatusEvent):void
			{
				switch( e.info.code )
				{
					case "NetStream.Publish.Start":
						break;
					case "NetStream.Publish.BadName":
						showRTMPWarning(lang("Error publishing stream: Bad Name"), 10000);
						break;
					default:
						break;
				}
			}
			
			public function showRTMPWarning(msg:String = null, fadeout:Number = -1):void
			{
				if( msg )
				{
					rtmpErrorLabel.text = msg;
					rtmpErrorLabel.visible = true;
					rtmpErrorLabel.includeInLayout = true;
				}
				else
				{
					rtmpErrorLabel.text = "";
					rtmpErrorLabel.visible = false;
					rtmpErrorLabel.includeInLayout = false;
				}
				if( fadeout > 0 )
				{
					var t:Timer = new Timer(fadeout);
					t.addEventListener(TimerEvent.TIMER,
						function():void
						{
							t.stop();
							showRTMPWarning();
						}
					);
					t.start();
				}
			}
			
			//Hide/show Mic and Cam buttons.
			public function showAddonControls():void
			{
				containerAddons.height = addonControls.height + 6;
			}
			public function hideAddonControls():void	{ containerAddons.height = 0; }
			
		]]>
	</mx:Script>
</mx:Canvas>