<?xml version="1.0" encoding="utf-8"?>
<!--
Weave (Web-based Analysis and Visualization Environment)
Copyright (C) 2008-2011 University of Massachusetts Lowell

This file is a part of Weave.

Weave is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License, Version 3,
as published by the Free Software Foundation.

Weave is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with Weave.  If not, see <http://www.gnu.org/licenses/>.
-->
<mx:Canvas xmlns:mx="http://www.adobe.com/2006/mxml" 
		   width="18" height="24" mouseChildren="false">	
	
	<mx:Move id="moveEvent" duration="600" 
			 xFrom="{xFrom}" xTo="{xTo}"
			 yFrom="{yFrom}" yTo="{yTo}"
			 />
	
	<mx:Script>
		<![CDATA[
			import mx.managers.PopUpManager;
			import mx.rpc.events.FaultEvent;
			import mx.rpc.events.ResultEvent;
			
			import weave.api.WeaveAPI;
			import weave.api.reportError;
			import weave.api.services.IURLRequestToken;
			import weave.utils.BitmapUtils;
			
			
			private var vertices:Array =
				[
					[ 0, 16 ],
					[ 1, 16 ],
					[ 4, 13 ],
					[ 8, 20 ],
					[ 9, 20 ],
					[ 10, 19 ],
					[ 7, 12 ],
					[ 11, 12 ],
					[ 11, 11 ],
					[ 0, 0 ]
				];
			private var filtersArray:Array;
			public var color:uint;
			
			[Bindable] public var xFrom:Number = 0;
			[Bindable] public var xTo:Number = 0;
			[Bindable] public var yFrom:Number = 0;
			[Bindable] public var yTo:Number = 0;
			
			[Bindable]
			public static var useImage:Boolean = false;
			public static var imageLink:String = "";
			
			public static function addPopUp(parent:DisplayObject):CollabMouseCursor
			{
				var cursor:CollabMouseCursor = PopUpManager.createPopUp(parent, CollabMouseCursor) as CollabMouseCursor;
				PopUpManager.centerPopUp(cursor);
				cursor.initializeCursor();
				
				return cursor;
			}
			
			public function setPos(x:Number, y:Number):void
			{
				if( !picSuccess && useImage )
					applyImage();
				else if( usingPic && !useImage )
					initializeCursor();
				moveEvent.stop();
				yFrom = this.y;
				xFrom = this.x;
				yTo = y;
				xTo = x;
				moveEvent.play([this]);
			}
			public function initializeCursor():void
			{
				usingPic = false;
				picSuccess = false;
				this.mouseChildren = false;
				if( useImage )	
					applyImage();
				else
				{
					color = 0;
					graphics.clear();
					graphics.lineStyle(1, 0, 1.0, true);
					graphics.moveTo(0, 0);
					for each( var vertex:Array in vertices )
						graphics.lineTo(vertex[0], vertex[1]);
				}
			}
			
			private var picSuccess:Boolean = false;
			private var usingPic:Boolean = false;
			
			private function applyImage():void
			{
				usingPic = true;
				var outputBitMap:Bitmap
				var bData:BitmapData = getImage(imageLink);
				if( bData != null )
				{
					outputBitMap = new Bitmap(bData);
					picSuccess = true;
				}
				else
					outputBitMap = new Bitmap(_missingImage);
				graphics.clear();
				var m:Matrix = new Matrix();
				m.scale(this.width / outputBitMap.width, this.height / outputBitMap.height );
				BitmapUtils.drawMouseImageIcon(graphics, 0, 0, outputBitMap.bitmapData, m);
			}
			
			public function fillCursor(color:uint):void
			{
				this.color = color;
				graphics.clear();
				graphics.lineStyle(1, 0, 1.0, true);
				graphics.moveTo(0, 0);
				graphics.beginFill(color, 0.5);
				for each( var vertex:Array in vertices )
				graphics.lineTo(vertex[0], vertex[1]);
				graphics.endFill();
				this.filters = [ new DropShadowFilter() ];
			}
			public function removePopUp():void
			{
				PopUpManager.removePopUp(this);
			}
			
			[Embed( source="/weave/resources/images/missing.png")]
			private static var _missingImageClass:Class;
			private static const _missingImage:BitmapData = Bitmap(new _missingImageClass()).bitmapData;
			
			/**
			 * This is the image cache.
			 */
			private static const _urlToImageMap:Object = new Object(); // maps a url to a BitmapData
			
		 	private function getImage(url:String):BitmapData
			{
				if (url && _urlToImageMap[url] === undefined)
				{
					_urlToImageMap[url] = null;
					var tokencheck:IURLRequestToken = WeaveAPI.URLRequestUtils.getContent(new URLRequest(url), handleImageDownload, handleFault, url);
				}
				return _urlToImageMap[url] as BitmapData;
			}
			
			private function handleImageDownload(event:ResultEvent, token:Object = null):void
			{
				var bitmap:Bitmap = event.result as Bitmap;
				_urlToImageMap[token] = bitmap.bitmapData;
			}
			
			/**
			 * This function is called when there is an error downloading an image.
			 */
			private function handleFault(event:FaultEvent, token:Object=null):void
			{
				_urlToImageMap[token] = _missingImage;
				reportError(event);
			}
		]]>
	</mx:Script>
</mx:Canvas>
