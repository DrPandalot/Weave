<?xml version="1.0" encoding="utf-8"?>
<mx:Panel xmlns:mx="http://www.adobe.com/2006/mxml"
		  width="120" height="97" headerHeight="5" layout="absolute">
	<mx:Script>
		<![CDATA[
			import weave.api.WeaveAPI;
			
			private const windowSizeConstant:Number = 2;

			private var canvasList:Array = new Array();
			private var controlList:Array = new Array();

			public function addToParticpantList(id:String):void
			{
				if( canvasList == null )
					canvasList = new Array();
				if( alreadyExists(id, canvasList) ) return;
				var collabVidComp:CollaborationVideoComponent = new CollaborationVideoComponent();
				if( id.length > 10 )
					collabVidComp.labelText = id.substr(0, 10) + "...";
				else
					collabVidComp.labelText = id;
				canvasList.push(collabVidComp);
				adjustLayout();
			}
			
			public function removeFromParticipantList(id:String):void
			{
				if( canvasList == null ) return;
				for( var i:int = 0; i < canvasList.length; i++ )
				{
					if( (canvasList[i] as CollaborationVideoComponent).nameLabel.text == id )
					{
						canvasList.splice(i, 1);
						break;
					}
				}
				adjustLayout();
			}
			
			public function clearDisplay():void
			{
				canvasList = null;
				adjustLayout();
			}
			
			public function inControl(ids:Array):void
			{
				for( var i:int = 1; i < ids.length; i++ )
					if( !alreadyExists(ids[i], controlList) )
						controlList.push(ids[i]);
				for( var j:int = 0; j < controlList.length; j++ )
					if( !alreadyExists(controlList[j], ids) )
					{
						lostControl(controlList[j]);
						controlList.splice(j, 1);
					}
				for( var k:int = 0; k < controlList.length; k++ )
					for( var m:int = 0; m < canvasList.length; m++ )
					{
						if( (canvasList[m] as CollaborationVideoComponent).nameLabel.text == controlList[k] )
						{
							(canvasList[m] as CollaborationVideoComponent).width = CollaborationVideoComponent.defaultWidth * windowSizeConstant;
							(canvasList[m] as CollaborationVideoComponent).height = CollaborationVideoComponent.defaultHeight * windowSizeConstant;
							this.height = (canvasList[m] as CollaborationVideoComponent).height + 18;
							//Need to use callLater here, as the height and width changes don't take effect immediately.
							callLater((canvasList[m] as CollaborationVideoComponent).adjustCamera);		
						}/*
						else
						{
							(canvasList[l] as CollaborationVideoComponent).width -= CollaborationVideoComponent.defaultWidth * windowSizeConstant;
							(canvasList[l] as CollaborationVideoComponent).height -= CollaborationVideoComponent.defaultHeight * windowSizeConstant;
						}*/
					}
				adjustLayout();
			}
			
			public function lostControl(id:String):void
			{
				for( var i:int = 0; i < canvasList.length; i++ )
				{
					if( (canvasList[i] as CollaborationVideoComponent).nameLabel.text == id )
					{
						(canvasList[i] as CollaborationVideoComponent).width = CollaborationVideoComponent.defaultWidth;
						(canvasList[i] as CollaborationVideoComponent).height = CollaborationVideoComponent.defaultHeight;
						this.height = 97;
						//Need to use callLater here, as the height and width changes don't take effect immediately.
						callLater((canvasList[i] as CollaborationVideoComponent).adjustCamera);		
					}/*
					else
					{
						(canvasList[i] as CollaborationVideoComponent).width += CollaborationVideoComponent.defaultWidth * windowSizeConstant;
						(canvasList[i] as CollaborationVideoComponent).height += CollaborationVideoComponent.defaultHeight * windowSizeConstant;
						if( (canvasList[i] as CollaborationVideoComponent).height > maxHeight )
							maxHeight = (canvasList[i] as CollaborationVideoComponent).height;
					}*/
				}
				adjustLayout();
			}
			
			private function alreadyExists(id:String, arrayToCheck:Array):Boolean
			{
				for( var i:int = 0; i < arrayToCheck.length; i++ )
				{
					if( arrayToCheck[i] is CollaborationVideoComponent )
					{
						if((arrayToCheck[i] as CollaborationVideoComponent).nameLabel.text == id )
							return true;
					}
					else
						if( arrayToCheck[i] == id )
							return true;
						
				}
				return false;
			}
			
			private function adjustLayout():void
			{
				var xCoord:Number = 0;
				removeAllChildren();
				if( canvasList != null )
				{
					this.width = 0;
					for( var j:int = 0; j < canvasList.length; j++ )
						this.width += (canvasList[j] as CollaborationVideoComponent).width;
					this.width += 20;
					for( var i:int = 0; i < canvasList.length ; i++ )
					{
						(canvasList[i] as CollaborationVideoComponent).x = xCoord;
						xCoord = xCoord + (canvasList[i] as CollaborationVideoComponent).width;	
						addChild( canvasList[i] );
					}
					this.x = ((WeaveAPI.topLevelApplication as DisplayObject).width / 2) - (this.width / 2);
				}
				else
				{
					this.width = 120;
					this.x = (WeaveAPI.topLevelApplication as DisplayObject).width / 2 - this.width / 2;
				}
			}
			
			public function addCameraStream(stream:NetStream, streamPath:String, userName:String):void
			{
				var tempCollaborationVideoComponent:CollaborationVideoComponent = findCamera(userName);
				if( tempCollaborationVideoComponent == null )
					return;
				tempCollaborationVideoComponent.stream = stream;
				stream.play(streamPath);
				tempCollaborationVideoComponent.video.attachNetStream(stream);
			}
			
			public function removeCameraStream(userName:String):NetStream
			{
				var tempCollaborationVideoComponent:CollaborationVideoComponent = findCamera(userName);
				if( tempCollaborationVideoComponent == null )
					return null;
				tempCollaborationVideoComponent.video.attachNetStream(null);
				tempCollaborationVideoComponent.video.clear();
				if( tempCollaborationVideoComponent.stream != null )
					tempCollaborationVideoComponent.stream.close();
				return tempCollaborationVideoComponent.stream;
			}
			
			private function findCamera(name:String):CollaborationVideoComponent
			{
				for( var i:int = 0; canvasList.length; i++ )
				{
					if( (canvasList[i] as CollaborationVideoComponent).nameLabel.text == name )
						return canvasList[i] as CollaborationVideoComponent;
				}
				return null;
			}
		]]>
	</mx:Script>
</mx:Panel>
