<?xml version="1.0" encoding="utf-8"?>
<!--
Weave (Web-based Analysis and Visualization Environment)
Copyright (C) 2008-2011 University of Massachusetts Lowell

This file is a part of Weave.

Weave is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License, Version 3,
as published by the Free Software Foundation.

Weave is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with Weave.  If not, see <http://www.gnu.org/licenses/>.
-->
<mx:Panel xmlns:mx="http://www.adobe.com/2006/mxml"
		  width="120" height="97" headerHeight="5" layout="absolute">
	<mx:Script>
		<![CDATA[
			import weave.api.WeaveAPI;
			
			//Number that determines how much bigger the componenet of the user in control should be.
			private const windowSizeConstant:Number = 2;
			
			//Canvas list is an array of all the components.
			private var canvasList:Dictionary = new Dictionary();
			//Control list is the list of all the users currently in control.
			private var controlList:Array = new Array();
			private var idList:Array = new Array();

			public function addToParticpantList(id:String):void
			{
				if( canvasList == null )
					canvasList = new Dictionary();
				if( canvasList[id] != null ) return;
				var collabVidComp:CollaborationVideoComponent = new CollaborationVideoComponent();
				//The username is longer than 10 characters shorten it so it isn't too big for the componenet.
				if( id.length > 10 )
					collabVidComp.labelText = id.substr(0, 10) + "...";
				else
					collabVidComp.labelText = id;
				canvasList[id] = collabVidComp;
				idList.push(id);
				adjustLayout();
			}
			
			public function removeFromParticipantList(id:String):void
			{
				if( canvasList == null ) return;
				var testID:String = new String();
				if( id.length > 10 )
					testID = id.substr(0, 10) + "...";
				else
					testID = id;
				for( var j:int = 0; j < controlList.length; j++ )
				{
					if( controlList[j] == testID )
					{
						controlList.splice(j, 1);
						break;
					}
				}
				if( canvasList[id] != null )
					canvasList[id] = null;
				var listLocation:int = idList.indexOf(id);
				idList.splice(listLocation, 1);
				adjustLayout();
			}
			/*
			* This function will reset the Participant panel to how it originally starts.
			*/
			public function clearDisplay():void
			{
				canvasList = null;
				controlList = new Array();
				idList = new Array();
				this.height = 97;
				adjustLayout();
			}
			
			/*
			* This function checks the ids of the users who are in control and makes their components bigger and shrinks anyone's component who has lost control.
			*/
			public function inControl(ids:Array):void
			{
				for( var i:int = 1; i < ids.length; i++ )
					if( !alreadyExists(ids[i], controlList) )
						controlList.push(ids[i]);
				for( var j:int = 0; j < controlList.length; j++ )
					if( !alreadyExists(controlList[j], ids) )
					{
						lostControl(controlList[j]);
						controlList.splice(j, 1);
					}
				var testID:String = new String();
				for( var k:int = 0; k < controlList.length; k++ )
				{
					if( controlList[k] is Number ) continue;
						
					if( canvasList[controlList[k]] != null )
					{
						(canvasList[controlList[k]] as CollaborationVideoComponent).width = CollaborationVideoComponent.defaultWidth * windowSizeConstant;
						(canvasList[controlList[k]] as CollaborationVideoComponent).height = CollaborationVideoComponent.defaultHeight * windowSizeConstant;
						this.height = (canvasList[controlList[k]] as CollaborationVideoComponent).height + 18;
						//Need to use callLater here, as the height and width changes don't take effect immediately.
						(canvasList[controlList[k]] as CollaborationVideoComponent).adjustCamera();		
					}
				}
				adjustLayout();
			}
			//This function is used by inControl() to shrink a user's component when they lose control.
			private function lostControl(id:String):void
			{
				if( canvasList[id] != null )
				{
					(canvasList[id] as CollaborationVideoComponent).width = CollaborationVideoComponent.defaultWidth;
					(canvasList[id] as CollaborationVideoComponent).height = CollaborationVideoComponent.defaultHeight;
					this.height = 97;
					//Need to use callLater here, as the height and width changes don't take effect immediately.
					(canvasList[id] as CollaborationVideoComponent).adjustCamera();		
				}
				adjustLayout();
			}
			/*
			* Check if a member exists in a given array.
			*/
			private function alreadyExists(id:String, arrayToCheck:Array):Boolean
			{
				//testID is only for use for CollaborationVideoComponents, otherwise use the full id.
				var testID:String = new String();
				if( id.length > 10 )
					testID = id.substr(0, 10) + "...";
				else
					testID = id;
				for( var i:int = 0; i < arrayToCheck.length; i++ )
				{
					if( arrayToCheck[i] is CollaborationVideoComponent )
					{
						if((arrayToCheck[i] as CollaborationVideoComponent).nameLabel.text == testID )
							return true;
					}
					else
						if( arrayToCheck[i] == id )
							return true;
				}
				return false;
			}
			/*
			* This function is called whenever there is a change in the components to resize the participant panel. And lay out the components.
			*/
			private function adjustLayout():void
			{
				var xCoord:Number = 0;
				removeAllChildren();
				if( canvasList != null )
				{
					this.width = 0;
					var counted:int = 0;
					//This sets the width and height of the panel.
					for( var j:int = 0; j < idList.length; j++ )
					{
						if( (canvasList[idList[j]] as CollaborationVideoComponent).width == CollaborationVideoComponent.defaultWidth && counted == 1 )
							counted = 0;
						else
						{
							this.width += (canvasList[idList[j]] as CollaborationVideoComponent).width;
							if( (canvasList[idList[j]] as CollaborationVideoComponent).width == CollaborationVideoComponent.defaultWidth )
								counted++;
							else
								this.height = (canvasList[idList[j]] as CollaborationVideoComponent).height + 18;
						}
					}
					this.width += 20;
					counted = 0;
					var bigWindow:Boolean = false;
					var extraWidth:Boolean = false;
					//This lays out all of the VideoCollaborationComponents in the panel.
					for( var i:int = 0; i < idList.length ; i++ )
					{
						if( counted == 0 || (canvasList[idList[i]] as CollaborationVideoComponent).width > CollaborationVideoComponent.defaultWidth )
						{
							bigWindow = false;
							extraWidth = false;
							(canvasList[idList[i]] as CollaborationVideoComponent).x = xCoord;
							(canvasList[idList[i]] as CollaborationVideoComponent).y = 0;
							if( (canvasList[idList[i]] as CollaborationVideoComponent).width > CollaborationVideoComponent.defaultWidth )
							{
								xCoord = xCoord + (canvasList[idList[i]] as CollaborationVideoComponent).width;	
								if( i > 0 )
									if( (canvasList[idList[i]] as CollaborationVideoComponent).x == (canvasList[idList[i-1]] as CollaborationVideoComponent).x )
									{
										(canvasList[idList[i]] as CollaborationVideoComponent).x = (canvasList[idList[i]] as CollaborationVideoComponent).x + CollaborationVideoComponent.defaultWidth;
										xCoord += (canvasList[idList[i-1]] as CollaborationVideoComponent).width;
										extraWidth = true;
									}
								bigWindow = true;										
							}
							addChild( canvasList[idList[i]] );
							if( (canvasList[idList[i]] as CollaborationVideoComponent).width == CollaborationVideoComponent.defaultWidth )
								counted++;
						}
						else
						{
							if( !bigWindow )
								(canvasList[idList[i]] as CollaborationVideoComponent).x = xCoord;
							else if( bigWindow && extraWidth )
							{
								(canvasList[idList[i]] as CollaborationVideoComponent).x = xCoord - (canvasList[idList[i-1]] as CollaborationVideoComponent).width - CollaborationVideoComponent.defaultWidth;
								extraWidth = false;
							}
							else if( bigWindow && !extraWidth )
								(canvasList[idList[i]] as CollaborationVideoComponent).x = xCoord - (canvasList[idList[i-1]] as CollaborationVideoComponent).width;
							(canvasList[idList[i]] as CollaborationVideoComponent).y = CollaborationVideoComponent.defaultHeight;
							(canvasList[idList[i]] as CollaborationVideoComponent).adjustCamera();		
							addChild( canvasList[idList[i]] );
							if( !bigWindow )
								xCoord = xCoord + (canvasList[idList[i]] as CollaborationVideoComponent).width;	
							counted = 0;
							bigWindow = false;
						}
						(canvasList[idList[i]] as CollaborationVideoComponent).adjustCamera();
					}
					this.x = ((WeaveAPI.topLevelApplication as DisplayObject).width / 2) - (this.width / 2);
				}
				else
				{
					//This runs if the user is not connected to a collaboration server.
					this.width = 120;
					this.x = (WeaveAPI.topLevelApplication as DisplayObject).width / 2 - this.width / 2;
				}
				//Needed to make sure pictures stay within the boundary of their components.
				if( canvasList != null )
					for( var z:int = 0; z < idList.length; z++ )
						(canvasList[idList[z]] as CollaborationVideoComponent).adjustCamera();
			}
			
			//Camera streaming functions.
			
			/*
			* Adds a video stream to the component of the user specified.
			*/
			public function addCameraStream(stream:NetStream, streamPath:String, userName:String):void
			{
				var tempCollaborationVideoComponent:CollaborationVideoComponent = findVideoComponent(userName);
				if( tempCollaborationVideoComponent == null )
					return;
				tempCollaborationVideoComponent.stream = stream;
				tempCollaborationVideoComponent.play(streamPath);
			}
			
			/*
			* Removes a video stream to the component of the user specified.
			*/
			public function removeCameraStream(userName:String):NetStream
			{
				var tempCollaborationVideoComponent:CollaborationVideoComponent = findVideoComponent(userName);
				if( tempCollaborationVideoComponent == null )
					return null;
				tempCollaborationVideoComponent.close();
				return tempCollaborationVideoComponent.stream;
			}
			
			/*
			* Creates and downloads a user's profile pic in their designated VideoCollaborationComponent.
			*/
			public function createUserProfilePic(id:String, imageURL:String):void
			{
				var personsPanel:CollaborationVideoComponent = findVideoComponent(id);
				if( personsPanel != null )
					personsPanel.applyImage(imageURL);
				adjustLayout();
			}
			
			private function findVideoComponent(name:String):CollaborationVideoComponent
			{
				return canvasList[name] as CollaborationVideoComponent;
			}
		]]>
	</mx:Script>
</mx:Panel>
