<?xml version="1.0" encoding="utf-8"?>
<!--
	
	Weave (Web-based Analysis and Visualization Environment)
	Copyright (C) 2008-2011 University of Massachusetts Lowell
	
	This file is a part of Weave.
	
	Weave is free software: you can redistribute it and/or modify
	it under the terms of the GNU General Public License, Version 3,
	as published by the Free Software Foundation.
	
	Weave is distributed in the hope that it will be useful,
	but WITHOUT ANY WARRANTY; without even the implied warranty of
	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
	GNU General Public License for more details.
	
	You should have received a copy of the GNU General Public License
	along with Weave.  If not, see <http://www.gnu.org/licenses/>.

-->



<ui:DraggablePanel xmlns="weave.visualization.tools.*"
				   xmlns:fx="http://ns.adobe.com/mxml/2009" 
 xmlns:s="library://ns.adobe.com/flex/spark" 
 xmlns:mx="library://ns.adobe.com/flex/mx"
				   xmlns:ui="weave.ui.*"
				   xmlns:userControls="weave.ui.userControls.*"
				   title="{lang('Collaboration')}"
				   creationPolicy="all" layout="{new BasicLayout()}">
	<fx:Script>
		<![CDATA[
			import mx.collections.ArrayCollection;
			import mx.controls.Alert;
			import mx.controls.ToolTip;
			import mx.core.Application;
			import mx.core.IFlexDisplayObject;
			import mx.events.CloseEvent;
			import mx.events.ListEvent;
			import mx.managers.PopUpManager;
			import mx.utils.StringUtil;
			
			import spark.layouts.BasicLayout;
			
			import org.igniterealtime.xiff.events.OutgoingDataEvent;
			import org.igniterealtime.xiff.events.RoomEvent;
			
			import weave.Weave;
			import weave.api.WeaveAPI;
			import weave.api.getCallbackCollection;
			import weave.api.getSessionState;
			import weave.api.linkBindableProperty;
			import weave.api.newDisposableChild;
			import weave.api.registerDisposableChild;
			import weave.api.registerLinkableChild;
			import weave.api.setSessionState;
			import weave.api.core.ILinkableHashMap;
			import weave.core.SessionManager;
			import weave.core.SessionStateLog;
			import weave.services.collaboration.CollaborationEvent;
			import weave.services.collaboration.CollaborationService;
			import weave.ui.AlertTextBox;
			
			public static function get instance():CollaborationTool
			{
				return _instance;
			}
			private static var _instance:CollaborationTool;
			
			override protected function constructor():void
			{
				super.constructor();
				if (!_instance)
					_instance = this;
				else
					throw new Error(lang("CollaborationTool should only have one instance"));
			}
			
			public const collabService:CollaborationService = registerDisposableChild(this, new CollaborationService(Weave.root));
			
			private const labelWidth:Number = 80;
			private const textAreaWidth:Number = 200;
			private var cursorList:ArrayCollection = new ArrayCollection();
			
			override protected function childrenCreated():void
			{
				super.childrenCreated();
				
				collabService.addEventListener(CollaborationEvent.LOG, handleLogEvent);
				collabService.addEventListener(CollaborationEvent.DISCONNECT, handleDisconnect);
				collabService.addEventListener(CollaborationEvent.CONNECT, handleConnect);
				collabService.addEventListener(CollaborationEvent.NICK_ERROR, nickConflictError);
				collabService.addEventListener(CollaborationEvent.LOCKED_ERROR, lockedError);
				collabService.addEventListener(CollaborationEvent.USER_JOINED_ROOM, handleCreateUserMouse);
				
				linkBindableProperty(Weave.properties.collabServerIP, serverIP, 'text');
				linkBindableProperty(Weave.properties.collabServerName, serverName, 'text');
				linkBindableProperty(Weave.properties.collabServerPort, port, 'text');
				linkBindableProperty(Weave.properties.collabServerRoom, roomToJoin, 'text');
				
				updateEnabledSettings();
				serverSettings.addEventListener(KeyboardEvent.KEY_DOWN, handleSettingsKeyDown, true);
				serverSettings.addEventListener(Event.CHANGE, handleChange);
			}
			
			private function handleChange(e:Event):void
			{
				updateEnabledSettings();
			}
			
			private function sendToRoomButton():void
			{
				if( input.text == "" )
					return;
				if( collabService.isConnected )
					collabService.sendTextMessage( input.text );
				input.text = "";	//clear the input
			}
			
			private function connect():void
			{
				if( username.text == "" || serverIP.text == "" || serverName.text == "" || roomToJoin.text == "" || port.text ==  "" )
				{
					Alert.show( lang("Can't leave any field blank") );
				}
				else
				{
					collabService.connect(serverIP.text, serverName.text, int(port.text), roomToJoin.text, username.text);
					updateEnabledSettings();
					tabs.selectedChild = chat;
				}
			}
			
			private function updateEnabledSettings():void
			{
				var connected:Boolean = collabService.isConnected;
				
				serverSettings.enabled = !connected;
				connectButton.enabled = !connected && username.text && serverIP.text && serverName.text && roomToJoin.text && port.text;
				disconnectButton.enabled = connected;
				input.enabled = connected;
				sendButton.enabled = connected;
				
				tabs.selectedChild = connected ? chat : settings;
			}
			
			private function lockedError(e:Event):void
			{
				updateEnabledSettings();
				Alert.show(lang("Server cannot be reached."), lang("Connect error"));
			}
			private function nickConflictError(e:Event):void
			{
				updateEnabledSettings();
				Alert.show(lang("Username already in use.  Please choose another."), lang("Connect error"));
			}
			
			//For when a text message is recieved from the server, it is displayed to the log
			//NOTE: I could not get proper scrolling to work once the recieved text messages
			//		went below the height of the log window. 
			private function handleLogEvent(e:CollaborationEvent):void
			{
				log.appendText(e.getText() + '\n');
				//Sanjay - need to remove this once and commnet above once confirmed its working
				/*log.text += e.getText() + '\n';
				callLater(
					function():void {
						log.verticalScrollPosition = log.maxVerticalScrollPosition;
					}
				);*/
			}
			
			//If the collabService is disconnected for some reason, this ensures the collabUI
			//resets which buttons are disabled and enabled.
			private function handleDisconnect( e:CollaborationEvent):void
			{
				updateEnabledSettings();
			}
			private function handleConnect( e:CollaborationEvent):void
			{
				updateEnabledSettings();
			}
			private function handleCreateUserMouse(e:CollaborationEvent):void
			{
				//cursorList.addItem(CollabMouseCursor.addPopUp(WeaveAPI.topLevelApplication as DisplayObject));
			}
			
			private function handleSettingsKeyDown(event:KeyboardEvent):void
			{
				if (event.keyCode == Keyboard.SPACE)
					event.stopImmediatePropagation();
				updateEnabledSettings();
			}
			
			private static const REQUIRED:String = lang("Required");
		]]>
	</fx:Script>

	<mx:TabNavigator width="100%" height="100%" id="tabs">
		<s:NavigatorContent label="Chat" width="100%" height="100%"
				
				 id="chat">
			<s:layout>
				<s:VerticalLayout  paddingBottom="10" paddingLeft="10" paddingRight="10" paddingTop="10"/>
			</s:layout>
			<mx:HDividedBox width="100%" height="100%" enabled="{disconnectButton.enabled}">
				<s:TextArea id="log" width="80%" height="100%" editable="false"/>
				<mx:List id="users" height="100%" width="20%" minWidth="100" editable="false" dataProvider="{collabService.userList}" />
			</mx:HDividedBox>
			<s:HGroup width="100%" enabled="{disconnectButton.enabled}">
				<s:TextInput id="input" width="100%" enabled="false" enter="sendToRoomButton()"/>
				<s:Button id="sendButton" label="{lang('Send')}" enabled="false" click="sendToRoomButton();"/>
			</s:HGroup>
		</s:NavigatorContent>
	
		<s:NavigatorContent label="{lang('Settings')}" width="100%" height="100%"
				
				 id="settings"  minHeight="0">
			<s:layout>
				<s:VerticalLayout  paddingBottom="10" paddingLeft="10" paddingRight="10" paddingTop="10"/>
			</s:layout>
			
			<s:Scroller horizontalScrollPolicy="off" verticalScrollPolicy="auto">
				<s:Group id="scrollableServerSettings">
					<s:VGroup id="serverSettings"  paddingBottom="10" paddingLeft="10" paddingRight="10" paddingTop="10">
						<ui:Indent label="{lang('IP:')}">
							<s:TextInput id="serverIP" width="{textAreaWidth}" errorString="{serverIP.text?'':REQUIRED}"/>
						</ui:Indent>
						<ui:Indent label="{lang('ServerName:')}">
							<s:TextInput id="serverName" width="{textAreaWidth}" errorString="{serverName.text?'':REQUIRED}"/>
						</ui:Indent>
						<ui:Indent label="{lang('Port:')}">
							<s:TextInput id="port" width="{textAreaWidth}" errorString="{port.text?'':REQUIRED}"/>
						</ui:Indent>
						<ui:Indent label="{lang('Room Name:')}">
							<s:TextInput id="roomToJoin" width="{textAreaWidth}" errorString="{roomToJoin.text?'':REQUIRED}"/>
						</ui:Indent>
						<ui:Indent label="{lang('Username:')}">
							<s:TextInput id="username" width="{textAreaWidth}" errorString="{username.text?'':REQUIRED}"/>
						</ui:Indent>
					</s:VGroup>
					<!--<ui:Indent label="{lang('Cursor color:')}">
					<mx:ColorPicker id="picker" color="{Math.round(Math.random() * 0xFFFFFF)}" />
					</ui:Indent>-->
					<s:HGroup width="100%">
						<s:Button id="connectButton" label="{lang('Connect')}" click="connect();" />
						<s:Button id="disconnectButton" label="{lang('Disconnect')}" enabled="false" click="collabService.disconnect();"/>
					</s:HGroup>
				</s:Group>
			</s:Scroller>
				
			
			
		</s:NavigatorContent>
	</mx:TabNavigator>
	
</ui:DraggablePanel>
