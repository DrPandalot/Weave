<?xml version="1.0" encoding="utf-8"?>
<mx:Panel xmlns:mx="http://www.adobe.com/2006/mxml" layout="absolute" width="15%" height="500" title="Collaboration Group" xmlns:collaboration="weave.ui.collaboration.*" creationComplete="creationCompleteHandler(event)">
	<mx:List id="userList" width="100%" height="100%" labelField="name" minWidth="130">
		<mx:itemRenderer>
			<mx:Component>
				<mx:HBox width="100%" height="100%" horizontalScrollPolicy="off" paddingRight="4">
					<mx:Script>
						<![CDATA[
							import mx.controls.ToolTip;
														
							override public function set data(value:Object):void
							{
								if( outerDocument._userListInfo[value] != null )
								{
									color.setStyle("backgroundColor", 	outerDocument._userListInfo[value].color );
									micPic.visible 			= outerDocument._userListInfo[value].mic;
									micPic.includeInLayout 	= outerDocument._userListInfo[value].mic;
									camPic.visible			= outerDocument._userListInfo[value].cam;
									camPic.includeInLayout	= outerDocument._userListInfo[value].cam;
									specPic.visible			= outerDocument._userListInfo[value].spec;
									specPic.includeInLayout = outerDocument._userListInfo[value].spec;
									collabPing.ping			= outerDocument._userListInfo[value].ping;
								}
								labelName.text = value as String;
								if( (value as String) == outerDocument.nickname )
									labelName.setStyle("fontWeight", "bold");
								else
									labelName.setStyle("fontWeight", "normal");
							}
							
						]]>
					</mx:Script>
					<mx:Canvas id="color" width="16" height="16" borderStyle="solid" 
							   cornerRadius="8" borderThickness="2"
							   borderColor="0"/>
					<mx:Canvas width="100%" clipContent="true" horizontalScrollPolicy="off">
						<mx:Label id="labelName" fontSize="12" width="100%" toolTip="{labelName.text}" />
					</mx:Canvas>
					<mx:Image id="micPic" source="@Embed(source='/weave/resources/images/collab/mic.png')" width="15" height="15" />
					<mx:Image id="camPic" source="@Embed(source='/weave/resources/images/collab/cam.png')" width="15" height="15" />
					<mx:Image id="specPic" source="@Embed(source='/weave/resources/images/collab/eye.png')" width="22" height="12" />
					<collaboration:CollaborationPing id="collabPing" width="16" height="14" />
				</mx:HBox>
			</mx:Component>
		</mx:itemRenderer>
	</mx:List>
	<mx:Button id="cursorButton" width="100%" label="{lang('Request Cursor Control')}" click="cursorButtonClick(event)" y="{this.height - this.borderMetrics.bottom - this.borderMetrics.top - cursorButton.height}"/>
	<mx:Script>
		<![CDATA[
			import org.igniterealtime.xiff.events.RoomEvent;
			import weave.Weave;
			import weave.services.collaboration.CollaborationService;
			import weave.api.registerDisposableChild;
			import weave.api.WeaveAPI;
			import mx.managers.PopUpManager;
			import mx.core.mx_internal;
			import mx.events.FlexEvent;
			import mx.collections.ArrayCollection;
			import mx.collections.ICollectionView;
			import weave.services.collaboration.CollaborationEvent;
			import mx.controls.Image;
			
			public const TYPE_MIC:String						= "MIC";
			public const TYPE_CAM:String						= "CAM";
			public const TYPE_SPEC:String						= "SPEC";
			public const TYPE_PING:String						= "PING";
			public const TYPE_COLOR:String						= "COLOR";
			private var CHAT:CollaborationChatWindow 			= null;
			private var SETTINGS:CollaborationSettingsWindow 	= null;
			
			private var mouseTimer:Timer						= null;
			private var pingTimer:Timer							= null;
			
			[Embed(source="/weave/resources/images/tinyWrench2.png")]	private const iSettings:Class;
			[Embed(source="/weave/resources/images/collab/chat.png")]   private const iChat:Class;  
			public const collabService:CollaborationService 	= registerDisposableChild(this, new CollaborationService(Weave.root));
			
			[Bindable] internal var _userListInfo:Dictionary	= new Dictionary();
			internal var nickname:String 						= null;
			
			override protected function childrenCreated():void
			{
				super.childrenCreated();
				cursorButton.enabled = false;
			}
			
			public function setUserAttribute(type:String, name:String, val:Number):void
			{
				var o:Object = null;
				
				if( _userListInfo[name] == null )
				{
					o = new Object();
					_userListInfo[name] = o;
				}
				switch( type )
				{
					case TYPE_COLOR:
						_userListInfo[name].color = val;
						break;
					case TYPE_MIC:
						_userListInfo[name].mic = val;
						break;
					case TYPE_CAM:
						_userListInfo[name].cam = val;
						break;
					case TYPE_PING:
						_userListInfo[name].ping = val;
						break;
					case TYPE_SPEC:
						_userListInfo[name].spec = val;
						break;
				}
				(userList.dataProvider as ICollectionView).refresh();
				
/* 				if( name == nickname ) return;
				if( !rtmpService ) 	   return;
				
				if( val == 1 )
				{
					if( type == TYPE_MIC )
					{
						var ns:NetStream = new NetStream(rtmpService);
						ns.addEventListener(NetStatusEvent.NET_STATUS, netStatusEventHandler);
						ns.play("m-"+roomName+"-"+name);
						nsPlayMicList[name] = ns;
					}
					else if( type == TYPE_CAM )
					{
						var remoteVideo:CollaborationVideo = new CollaborationVideo();
						remoteVideo.stream = new NetStream(rtmpService);
						remoteVideo.stream.addEventListener(NetStatusEvent.NET_STATUS, netStatusEventHandler);
						remoteVideo.video = new Video(140, 105);
						remoteVideo.play("v-"+roomName+"-"+name);
						//						remoteVideo.setPos(containerRemoteCams.width/2-remoteVideo.width/2, 0);
						remoteVideo.nickname = name;
						containerRemoteCams.addChild(remoteVideo);
						nsPlayCamList[name] = remoteVideo;
						
						if( dictionaryLength(nsPlayCamList) > 0 )
							showRemoteDisplay();
						
						//						organizeRemoteVideos();
					}
				}
				else
				{
					if( type == TYPE_MIC )
					{
						if( nsPlayMicList[name] )
						{
							nsPlayMicList[name].removeEventListener(NetStatusEvent.NET_STATUS, netStatusEventHandler);
							nsPlayMicList[name].close();
							delete nsPlayMicList[name];
						}
					}
					else if( type == TYPE_CAM )
					{
						if( nsPlayCamList[name] )
						{
							nsPlayCamList[name].stream.removeEventListener(NetStatusEvent.NET_STATUS, netStatusEventHandler);
							containerRemoteCams.removeChild(nsPlayCamList[name]);
							nsPlayCamList[name].close();
							delete nsPlayCamList[name];
							
							if( dictionaryLength(nsPlayCamList) == 0 && enabledCam )
								showLocalDisplay();
							else if( dictionaryLength(nsPlayCamList) == 0 && !enabledCam )
								hideRemoteDisplay();
							
							//							organizeRemoteVideos();
						}
					}
				}
				(userList.dataProvider as ICollectionView).refresh(); */
			} 
			
			protected function cursorButtonClick(event:MouseEvent):void
			{
				if( lang("Request Cursor Control") == cursorButton.label )
				{
					dispatchEvent(new CollaborationEvent( CollaborationEvent.SEND_MOUSE_CONTROL_REQUEST ) );
					cursorButton.label = lang("Cancel Control Request");
				}
				else
				{
					dispatchEvent(new CollaborationEvent( CollaborationEvent.SEND_RELINQUISH_MOUSE_CONTROL ) );
					cursorButton.label = lang("Request Cursor Control");
				}
			}
			
			public function set userNameList(array:ArrayCollection):void
			{
				userList.dataProvider = array;
			}
			
			protected function creationCompleteHandler(event:FlexEvent):void
			{
				//Service event listeners.
				collabService.addEventListener(CollaborationEvent.LOG, handleLogEvent);
/* 				collabService.addEventListener(CollaborationEvent.DISCONNECT, handleDisconnect);
				collabService.addEventListener(CollaborationEvent.CONNECT, handleConnect);
				collabService.addEventListener(CollaborationEvent.NICK_ERROR, nickConflictError);
				collabService.addEventListener(CollaborationEvent.LOCKED_ERROR, lockedError);
				collabService.addEventListener(CollaborationEvent.USER_JOINED_ROOM, handleCreateUserMouse);
				collabService.addEventListener(CollaborationEvent.USER_LEFT_ROOM, handleRemoveUserElements);
				collabService.addEventListener(CollaborationEvent.USER_REQUEST_MOUSE_POS, handleUserRequestMousePos);
				collabService.addEventListener(CollaborationEvent.USER_UPDATE_MOUSE_POS, updateMousePos);
				collabService.addEventListener(CollaborationEvent.USER_REQUEST_USERLIST, handleUserRequestUserlist);
				collabService.addEventListener(CollaborationEvent.USER_UPDATE_USERLIST, handleUserUpdateUserlist);
				collabService.addEventListener(CollaborationEvent.UPDATE_PING, updatePing);
				collabService.addEventListener(CollaborationEvent.UPDATE_MIC, userMicUpdated);
				collabService.addEventListener(CollaborationEvent.UPDATE_CAM, userCamUpdated);
				collabService.addEventListener(CollaborationEvent.REQUEST_MOUSE_CONTROL, addMouseToQueue);
				collabService.addEventListener(CollaborationEvent.RELINQUISH_MOUSE_CONTROL, removeMouseFromQueue); */
				
				
				//Setting up the buttons for settings and chat.
				var settingsButton:Button = new Button();
				settingsButton.setStyle("icon", iSettings);
				settingsButton.width  = this.getHeaderHeight() * .75;
				settingsButton.height = this.getHeaderHeight();
				settingsButton.x = this.width - settingsButton.width;
				settingsButton.setStyle("cornerRadius", 3);
				titleBar.addChild(settingsButton);			
				var chatButton:Button = new Button();
				chatButton.setStyle("icon", iChat);
				chatButton.width  = this.getHeaderHeight() * .75;
				chatButton.height = this.getHeaderHeight();
				chatButton.x = this.width - settingsButton.width - chatButton.width;
				chatButton.setStyle("cornerRadius", 3);
				titleBar.addChild(chatButton);	
				chatButton.enabled = false;
				settingsButton.addEventListener(MouseEvent.CLICK, openSettingsPanel);
				chatButton.addEventListener(MouseEvent.CLICK, openChatWindow);
				createSettingsPanel();
				createChatPanel();
				SETTINGS.addEventListener(CollaborationEvent.CONN_SETTINGS_SAVED, connectToCollabServer);
			}
			
			private function handleLogEvent(e:CollaborationEvent):void
			{
				CHAT.logText(e.getText());
				if( !CHAT.visible && collabService.isConnected ) {
					//Add in a change to make the chat button orange.
				} else {
					CHAT.unreadMessages = 0;
				}
			}
			
			private function requestPing(e:TimerEvent):void 		   { collabService.sendPing(SETTINGS.collab_NICKNAME); }
			
			private var connTimer:Timer;
			
			private function connectToCollabServer(e:CollaborationEvent):void
			{
				setUserAttribute(TYPE_COLOR, SETTINGS.collab_NICKNAME, SETTINGS.collab_COLOR);
				collabService.connect(Weave.properties.collabServerIP.value, 
					Weave.properties.collabServerName.value, 
					int(Weave.properties.collabServerPort.value), 
					Weave.properties.collabServerRoom.value, 
					SETTINGS.collab_NICKNAME);
				
				// Set timeout to 10 seconds
				connTimer = new Timer(10000);
				connTimer.addEventListener(TimerEvent.TIMER, serverUnresponsive);
				connTimer.start();
			}
			
			private function serverUnresponsive(e:TimerEvent):void
			{
				connTimer = null;
				
				if( !SETTINGS.visible ) SETTINGS.show();
				SETTINGS.showConnectionWarning("Server not responding");
			}
			
			private function createSettingsPanel():void
			{
				SETTINGS = PopUpManager.createPopUp(WeaveAPI.topLevelApplication as DisplayObject, CollaborationSettingsWindow) as CollaborationSettingsWindow;
				SETTINGS.hide();
				SETTINGS.x = this.width;
				SETTINGS.y = this.y;
			}
			
			private function createChatPanel():void
			{
				CHAT = PopUpManager.createPopUp(WeaveAPI.topLevelApplication as DisplayObject, CollaborationChatWindow) as CollaborationChatWindow;
				CHAT.visible = false;
				CHAT.width = 300;
				CHAT.height = this.height;
				CHAT.x = this.width;
				CHAT.y = this.y;
			}
			
			private function openSettingsPanel(e:MouseEvent):void
			{
				if( !SETTINGS.visible )
					SETTINGS.show();
				else
					SETTINGS.hide();
			}
			
			private function openChatWindow(e:MouseEvent):void				
			{
				if( !CHAT.visible )
					CHAT.visible = true;
				else
					CHAT.visible = false;
			}
			
		]]>
	</mx:Script>
</mx:Panel>
