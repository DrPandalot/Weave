<?xml version="1.0" encoding="utf-8"?>
<mx:Panel xmlns:mx="http://www.adobe.com/2006/mxml" layout="absolute" width="185" height="500" title="Collaboration Group" xmlns:collaboration="weave.ui.collaboration.*" horizontalScrollPolicy="off" move="repositionWindowsHandler(event)" creationComplete="creationCompleteHandler(event)">
	<mx:List id="userList" width="100%" height="100%" labelField="name" minWidth="130">
		<mx:itemRenderer>
			<mx:Component>
				<mx:HBox width="100%" height="100%" horizontalScrollPolicy="off" paddingRight="4">
					<mx:Script>
						<![CDATA[
							import mx.controls.ToolTip;
														
							override public function set data(value:Object):void
							{
								if( outerDocument._userListInfo[value] != null )
								{
									color.setStyle("backgroundColor", 	outerDocument._userListInfo[value].color );
									micPic.visible 			= outerDocument._userListInfo[value].mic;
									micPic.includeInLayout 	= outerDocument._userListInfo[value].mic;
									camPic.visible			= outerDocument._userListInfo[value].cam;
									camPic.includeInLayout	= outerDocument._userListInfo[value].cam;
									specPic.visible			= outerDocument._userListInfo[value].spec;
									specPic.includeInLayout = outerDocument._userListInfo[value].spec;
									collabPing.ping			= outerDocument._userListInfo[value].ping;
								}
								labelName.text = value as String;
								if( (value as String) == outerDocument.nickname )
									labelName.setStyle("fontWeight", "bold");
								else
									labelName.setStyle("fontWeight", "normal");
							}
							
						]]>
					</mx:Script>
					<mx:Canvas id="color" width="16" height="16" borderStyle="solid" 
							   cornerRadius="8" borderThickness="2"
							   borderColor="0"/>
					<mx:Canvas width="100%" clipContent="true" horizontalScrollPolicy="off">
						<mx:Label id="labelName" fontSize="12" width="100%" toolTip="{labelName.text}" />
					</mx:Canvas>
					<mx:Image id="micPic" source="@Embed(source='/weave/resources/images/collab/mic.png')" width="15" height="15" />
					<mx:Image id="camPic" source="@Embed(source='/weave/resources/images/collab/cam.png')" width="15" height="15" />
					<mx:Image id="specPic" source="@Embed(source='/weave/resources/images/collab/eye.png')" width="22" height="12" />
					<collaboration:CollaborationPing id="collabPing" width="16" height="14" />
				</mx:HBox>
			</mx:Component>
		</mx:itemRenderer>
	</mx:List>
	<mx:Button id="cursorButton" width="100%" label="{lang('Request Cursor Control')}" click="cursorButtonClick(event)"/>
	<mx:Script>
		<![CDATA[
			import mx.controls.Button;
			import mx.events.MoveEvent;
			import mx.events.CloseEvent;
			import mx.controls.Alert;
			import org.igniterealtime.xiff.conference.RoomOccupant;
			import weave.api.reportError;
			import org.igniterealtime.xiff.events.RoomEvent;
			import weave.Weave;
			import weave.services.collaboration.CollaborationService;
			import weave.api.registerDisposableChild;
			import weave.api.WeaveAPI;
			import mx.managers.PopUpManager;
			import mx.core.mx_internal;
			import mx.events.FlexEvent;
			import mx.collections.ArrayCollection;
			import mx.collections.ICollectionView;
			import weave.services.collaboration.CollaborationEvent;
			import mx.controls.Image;
			
			public const collabService:CollaborationService = registerDisposableChild(this, new CollaborationService(Weave.root));
			public const TYPE_MIC:String					= "MIC";
			public const TYPE_CAM:String					= "CAM";
			public const TYPE_SPEC:String					= "SPEC";
			public const TYPE_PING:String					= "PING";
			public const TYPE_COLOR:String					= "COLOR";
			
			private var CHAT:CollaborationChatWindow;
			private var SETTINGS:CollaborationSettingsWindow;
			private var PARTICIPANTS:ParticipantPanel;
			private var disConButtonPushed:Boolean			= false;
			private var mouseTimer:Timer;
			private var pingTimer:Timer;
			private var connTimer:Timer;
			private var chatButton:Button              		= new Button();
			
			[Embed(source="/weave/resources/images/tinyWrench2.png")]	private const iSettings:Class;
			[Embed(source="/weave/resources/images/collab/chat.png")]   private const iChat:Class;  
			
			[Bindable] internal var _userListInfo:Dictionary	= new Dictionary();
			internal var nickname:String 						= null;
			
			public function set userNameList(array:ArrayCollection):void
			{
				userList.dataProvider = array;
			}
			
			private function adjustCursorButtonHeight():void
			{
				cursorButton.y = this.userList.height - cursorButton.height; 
			}
			
			protected function repositionWindowsHandler(event:MoveEvent):void
			{
				if( SETTINGS && CHAT )
				{
					if( (WeaveAPI.topLevelApplication as DisplayObject).width - (this.x + this.width) < CHAT.width )
					{
						SETTINGS.x = this.x - SETTINGS.width;
						CHAT.x = this.x - CHAT.width;
					}
					else
					{
						SETTINGS.x = this.x + this.width;
						CHAT.x = this.x + this.width;
					}
					SETTINGS.y = this.y;
					CHAT.y = this.y;
				}
			}
			
			public function setUserAttribute(type:String, name:String, val:Number):void
			{
				var o:Object = null;
				
				if( _userListInfo[name] == null )
				{
					o = new Object();
					_userListInfo[name] = o;
				}
				switch( type )
				{
					case TYPE_COLOR:
						_userListInfo[name].color = val;
						break;
					case TYPE_MIC:
						_userListInfo[name].mic = val;
						break;
					case TYPE_CAM:
						_userListInfo[name].cam = val;
						break;
					case TYPE_PING:
						_userListInfo[name].ping = val;
						break;
					case TYPE_SPEC:
						_userListInfo[name].spec = val;
						break;
				}
				(userList.dataProvider as ICollectionView).refresh();
				
/* 				if( name == nickname ) return;
				if( !rtmpService ) 	   return;
				
				if( val == 1 )
				{
					if( type == TYPE_MIC )
					{
						var ns:NetStream = new NetStream(rtmpService);
						ns.addEventListener(NetStatusEvent.NET_STATUS, netStatusEventHandler);
						ns.play("m-"+roomName+"-"+name);
						nsPlayMicList[name] = ns;
					}
					else if( type == TYPE_CAM )
					{
						var remoteVideo:CollaborationVideo = new CollaborationVideo();
						remoteVideo.stream = new NetStream(rtmpService);
						remoteVideo.stream.addEventListener(NetStatusEvent.NET_STATUS, netStatusEventHandler);
						remoteVideo.video = new Video(140, 105);
						remoteVideo.play("v-"+roomName+"-"+name);
						//						remoteVideo.setPos(containerRemoteCams.width/2-remoteVideo.width/2, 0);
						remoteVideo.nickname = name;
						containerRemoteCams.addChild(remoteVideo);
						nsPlayCamList[name] = remoteVideo;
						
						if( dictionaryLength(nsPlayCamList) > 0 )
							showRemoteDisplay();
						
						//						organizeRemoteVideos();
					}
				}
				else
				{
					if( type == TYPE_MIC )
					{
						if( nsPlayMicList[name] )
						{
							nsPlayMicList[name].removeEventListener(NetStatusEvent.NET_STATUS, netStatusEventHandler);
							nsPlayMicList[name].close();
							delete nsPlayMicList[name];
						}
					}
					else if( type == TYPE_CAM )
					{
						if( nsPlayCamList[name] )
						{
							nsPlayCamList[name].stream.removeEventListener(NetStatusEvent.NET_STATUS, netStatusEventHandler);
							containerRemoteCams.removeChild(nsPlayCamList[name]);
							nsPlayCamList[name].close();
							delete nsPlayCamList[name];
							
							if( dictionaryLength(nsPlayCamList) == 0 && enabledCam )
								showLocalDisplay();
							else if( dictionaryLength(nsPlayCamList) == 0 && !enabledCam )
								hideRemoteDisplay();
							
							//							organizeRemoteVideos();
						}
					}
				}
				(userList.dataProvider as ICollectionView).refresh(); */
			} 
			
			protected function creationCompleteHandler(event:FlexEvent):void
			{
				adjustCursorButtonHeight();
				cursorButton.enabled = false;
				this.y = (WeaveAPI.topLevelApplication as DisplayObject).height * .25;
				
				//Service event listeners.
				collabService.addEventListener(CollaborationEvent.LOG, handleLogEvent);
 				collabService.addEventListener(CollaborationEvent.DISCONNECT, handleDisconnect);
				collabService.addEventListener(CollaborationEvent.CONNECT, handleConnect);
				collabService.addEventListener(CollaborationEvent.NICK_ERROR, nickConflictError);
				collabService.addEventListener(CollaborationEvent.LOCKED_ERROR, lockedError);
				collabService.addEventListener(CollaborationEvent.USER_JOINED_ROOM, handleCreateUserMouse);
				collabService.addEventListener(CollaborationEvent.USER_LEFT_ROOM, handleRemoveUserElements);
				collabService.addEventListener(CollaborationEvent.USER_REQUEST_MOUSE_POS, handleUserRequestMousePos);
				collabService.addEventListener(CollaborationEvent.USER_UPDATE_MOUSE_POS, updateMousePos);
				collabService.addEventListener(CollaborationEvent.USER_REQUEST_USERLIST, handleUserRequestUserlist);
				collabService.addEventListener(CollaborationEvent.USER_UPDATE_USERLIST, handleUserUpdateUserlist);
				collabService.addEventListener(CollaborationEvent.UPDATE_PING, updatePing);
				collabService.addEventListener(CollaborationEvent.UPDATE_MIC, userMicUpdated);
				collabService.addEventListener(CollaborationEvent.UPDATE_CAM, userCamUpdated);
				collabService.addEventListener(CollaborationEvent.REQUEST_MOUSE_CONTROL, addMouseToQueue);
				collabService.addEventListener(CollaborationEvent.RELINQUISH_MOUSE_CONTROL, removeMouseFromQueue);
	
				userNameList = collabService.userList;
				
				//Setting up the buttons for settings and chat.
				var settingsButton:Button = new Button();
				settingsButton.setStyle("icon", iSettings);
				settingsButton.width  = this.getHeaderHeight() * .75;
				settingsButton.height = this.getHeaderHeight();
				settingsButton.x = this.width - settingsButton.width;
				settingsButton.setStyle("cornerRadius", 3);
				settingsButton.addEventListener(MouseEvent.CLICK, openSettingsPanel);
				titleBar.addChild(settingsButton);			
				chatButton.setStyle("icon", iChat);
				chatButton.width  = this.getHeaderHeight() * .75;
				chatButton.height = this.getHeaderHeight();
				chatButton.x = this.width - settingsButton.width - chatButton.width;
				chatButton.setStyle("cornerRadius", 3);
				chatButton.addEventListener(MouseEvent.CLICK, openChatWindow);
				titleBar.addChild(chatButton);	
				chatButton.enabled = false;
				
				createSettingsPanel();
				createChatPanel();
				createParticipantPanel();
				SETTINGS.addEventListener(CollaborationEvent.CONN_SETTINGS_CONNECT, connect);
				SETTINGS.addEventListener(CollaborationEvent.CONN_SETTINGS_DISCONNECT, disconnect);
				CHAT.addEventListener(CollaborationEvent.SEND_MESSAGE, sendMessageEventHandler);
				CHAT.addEventListener(CollaborationEvent.UPDATE_MIC, updateUserMic);
				CHAT.addEventListener(CollaborationEvent.UPDATE_CAM, updateUserCam);
			}
			
			public function removed():void
			{
				disConButtonPushed = true;
				disconnect();
				resetUserMice();
				if(CHAT)
				{
					PopUpManager.removePopUp(CHAT);
					CHAT = null;
				}
				if(SETTINGS)
				{
					PopUpManager.removePopUp(SETTINGS);
					SETTINGS = null;
				}
			}
			
			private function connect(e:CollaborationEvent = null):void
			{
				collabService.connect(Weave.properties.collabServerIP.value, 
					Weave.properties.collabServerName.value, 
					int(Weave.properties.collabServerPort.value), 
					Weave.properties.collabServerRoom.value, 
					SETTINGS.collab_NICKNAME);
				// Set timeout to 10 seconds
				connTimer = new Timer(10000);
				connTimer.addEventListener(TimerEvent.TIMER, serverUnresponsive);
				connTimer.start();
				
				PARTICIPANTS.addToParticpantList(collabService.nickname);
				
				disConButtonPushed = false;
			}
			
			private function disconnect(e:CollaborationEvent = null):void
			{
				disConButtonPushed = true;
				CHAT.visible = false;
				PARTICIPANTS.clearDisplay();
				if( collabService.isConnected )
					collabService.disconnect();
				//	disconnectionFromRTMPServer();
			}
			
			private function handleConnect( e:CollaborationEvent ):void
			{
				trace( "handleConnect()" );
				stopConTimer();
				updateEnabledSettings();
				openChatWindow();
				CHAT.nickname = collabService.nickname;
				CHAT.roomName = collabService.roomToJoin;
				setUserAttribute(TYPE_MIC, SETTINGS.collab_NICKNAME, 0);
				setUserAttribute(TYPE_CAM, SETTINGS.collab_NICKNAME, 0);
				setUserAttribute(TYPE_SPEC, SETTINGS.collab_NICKNAME, (Weave.properties.collabSpectating.value) ? 1 : 0);
				
				joinedRoomCreateMouseList();
				//	connectToRTMPServer();
				cursorButton.enabled = true;
				
				mouseTimer = new Timer(600);
				mouseTimer.addEventListener(TimerEvent.TIMER, mouseMove);
				
				pingTimer = new Timer(10000);
				pingTimer.addEventListener(TimerEvent.TIMER, requestPing);
				pingTimer.start();
				
				collabService.room.addEventListener(RoomEvent.ROOM_LEAVE, onTimeout);
				collabService.sendMouseMessage(SETTINGS.collab_NICKNAME, SETTINGS.collab_COLOR, xMousePercent(), yMousePercent());
				collabService.hasControl = false;
			}
			
			private function handleDisconnect( e:CollaborationEvent ):void
			{
				if( collabService.room )
					collabService.room.removeEventListener(RoomEvent.ROOM_LEAVE, onTimeout);
				if( mouseTimer ) {
					mouseTimer.stop();
					mouseTimer.removeEventListener(TimerEvent.TIMER, mouseMove);
					mouseTimer = null;
				}
				if( pingTimer ) {
					pingTimer.stop();
					pingTimer.removeEventListener(TimerEvent.TIMER, requestPing);
					pingTimer = null;
				}
				updateEnabledSettings();
				resetUserMice();
				disConButtonPushed = false;
				cursorButton.enabled = false;
			}
			
			private function updateUserMic(e:CollaborationEvent):void  { collabService.sendAddonUpdate(SETTINGS.collab_NICKNAME, collabService.TYPE_MIC, ( e.getText() == "1" )); }
			private function updateUserCam(e:CollaborationEvent):void  { collabService.sendAddonUpdate(SETTINGS.collab_NICKNAME, collabService.TYPE_CAM, ( e.getText() == "1" )); }
			private function requestPing(e:TimerEvent):void 		   { collabService.sendPing(SETTINGS.collab_NICKNAME); }
			
			private function updateEnabledSettings():void
			{
				if( collabService.isConnected )
				{
					SETTINGS.connectButton.label = lang("Disconnect");
					chatButton.enabled = true;
				}
				else
				{
					SETTINGS.connectButton.label = lang("Connect");
					chatButton.enabled = false;
				}
			}
			
			private function onTimeout(e:RoomEvent):void
			{
				if( !disConButtonPushed ) {
					resetUserMice();
					//disconnectionFromRTMPServer();
					Alert.show("Would you like to reconnect to the room?", "Disconnection Alert", Alert.YES | Alert.NO, null, disconnectHandler);
				}
			}
			
			private function disconnectHandler( e:CloseEvent ):void
			{
				if (e.detail == Alert.YES)
					connect();
			}
			
			private function nickConflictError(e:Event):void
			{
				stopConTimer();
				if( !SETTINGS.visible ) openSettingsPanel();
				SETTINGS.showConnectionWarning("Username already exists");
				updateEnabledSettings();
				
				//disconnectionFromRTMPServer();
			}
			
			private function lockedError(e:Event):void
			{
				stopConTimer();
				if( !SETTINGS.visible ) openSettingsPanel();
				SETTINGS.showConnectionWarning("Server is locked");
			}
			
			private function stopConTimer():void
			{
				if( connTimer ) 
				{
					connTimer.stop();
					connTimer.removeEventListener(TimerEvent.TIMER, serverUnresponsive);
					connTimer = null;
				}
			}
			
			private function handleRemoveUserElements(e:CollaborationEvent):void
			{
				trace( "Removing " + e.getText() + "\'s cursor" );
				PARTICIPANTS.removeFromParticipantList(e.getText());
				if( WeaveAPI.CollaborationCursorManager == null ) 
				{
					reportError(e.getText() + "\'s mouse does not exist.");
					return;
				}
				WeaveAPI.CollaborationCursorManager.removeCursor(e.getText());
				setUserAttribute(TYPE_CAM, e.getText(), 0);
				setUserAttribute(TYPE_MIC, e.getText(), 0);
			}
			
			private function handleUserRequestUserlist(e:CollaborationEvent):void
			{
				collabService.requestAddonStatus(e.getText(), _userListInfo);
			}
			
			private function handleUserUpdateUserlist(e:CollaborationEvent):void
			{
				var info:Dictionary = e.getInfo() as Dictionary;
				for( var name:String in info )
				{
					trace( "Setting attributes for:", name );
					setUserAttribute(CHAT.TYPE_CAM,	name, info[name].cam);
					trace( "Cam:", info[name].cam );
					setUserAttribute(CHAT.TYPE_COLOR, 	name, info[name].color);
					trace( "color:", info[name].color );
					setUserAttribute(CHAT.TYPE_MIC,  	name, info[name].mic);
					trace( "mic:", info[name].mic);
					setUserAttribute(CHAT.TYPE_PING, 	name, info[name].ping);
					trace( "ping:", info[name].ping );
					setUserAttribute(CHAT.TYPE_SPEC, 	name, info[name].spec);
					trace( "spec:", info[name].spec );
				}
			}
			
			private function updatePing(e:CollaborationEvent):void 	   { setUserAttribute(TYPE_PING, e.getText(), e.getX()); }
			private function userMicUpdated(e:CollaborationEvent):void { setUserAttribute(TYPE_MIC, e.getText(), Number(e.getColor())); }
			private function userCamUpdated(e:CollaborationEvent):void { setUserAttribute(TYPE_CAM, e.getText(), Number(e.getColor())); }
			
			private function handleLogEvent(e:CollaborationEvent):void
			{
				CHAT.logText(e.getText());
				if( !CHAT.visible && collabService.isConnected ) {
					chatButton.setStyle("fillColors", [0xFF6600, 0xFF6600]);
				} else {
					CHAT.unreadMessages = 0;
					chatButton.setStyle("fillColors", [0xFFFFFF, 0xCCCCCC]);
				}
			}
			
			private function serverUnresponsive(e:TimerEvent):void
			{
				stopConTimer();
				
				if( !SETTINGS.visible ) SETTINGS.show();
				SETTINGS.showConnectionWarning("Server not responding");
			}
			
			private function sendMessageEventHandler(e:CollaborationEvent):void
			{
				collabService.sendTextMessage( e.getText() );
			}
			
			private function createSettingsPanel():void
			{
				SETTINGS = PopUpManager.createPopUp(WeaveAPI.topLevelApplication as DisplayObject, CollaborationSettingsWindow) as CollaborationSettingsWindow;
				SETTINGS.hide();
				SETTINGS.x = this.width;
				SETTINGS.y = this.y;
			}
			
			private function createChatPanel():void
			{
				CHAT = PopUpManager.createPopUp(WeaveAPI.topLevelApplication as DisplayObject, CollaborationChatWindow) as CollaborationChatWindow;
				CHAT.visible = false;
				CHAT.width = 300;
				CHAT.height = this.height;
				CHAT.x = this.width;
				CHAT.y = this.y;
			}
			
			private function createParticipantPanel():void
			{
				PARTICIPANTS = PopUpManager.createPopUp(WeaveAPI.topLevelApplication as DisplayObject, ParticipantPanel) as ParticipantPanel;
				PARTICIPANTS.visible = true;
				PARTICIPANTS.y = WeaveAPI.topLevelApplication.visDesktop.y;
				PARTICIPANTS.x = 0;
			}
			
			private function openSettingsPanel(e:MouseEvent = null):void
			{
				if(SETTINGS) SETTINGS.visible ? SETTINGS.hide() : SETTINGS.show();
			}
			
			private function openChatWindow(e:MouseEvent = null):void				
			{
				if(CHAT) 
					if(CHAT.visible)
						CHAT.visible = false 
					else
					{
						CHAT.visible = true; 
						chatButton.setStyle("fillColors", [0xFFFFFF, 0xCCCCCC]);
					}
			}
			
			//Mouse functions		
			
			private var lastX:Number = 0;
			private var lastY:Number = 0;
			
			private function joinedRoomCreateMouseList():void
			{
				trace("joinedRoomCreateMouseList();");
				
				for each( var person:RoomOccupant in collabService.room ) 
				{
					if( person.displayName == collabService.nickname ) continue;
					WeaveAPI.CollaborationCursorManager.createCursor(person.displayName);
					PARTICIPANTS.addToParticpantList(person.displayName);
					trace("asking " + person.displayName + " for mouse pos");
					collabService.requestMouseMessage(person.displayName);
				}
			}
			
			protected function cursorButtonClick(event:MouseEvent):void
			{
				if( lang("Request Cursor Control") == cursorButton.label )
				{
					collabService.requestMouseControl(collabService.nickname);
					cursorButton.label = lang("Cancel Control Request");
					adjustCursorButtonHeight();
				}
				else
				{
					collabService.relinquishMouseControl(collabService.nickname);
					collabService.hasControl = false;
					mouseTimer.stop();
					cursorButton.label = lang("Request Cursor Control");
					adjustCursorButtonHeight();
				}
			}
			
			private function addMouseToQueue(e:CollaborationEvent):void
			{
				var position:Number = WeaveAPI.CollaborationCursorManager.addToQueue(e.getText(), collabService.nickname);
				if( position == 0 )
				{
					collabService.hasControl = true;
					mouseTimer.start();
					cursorButton.label = lang("Relinquish Control");
					adjustCursorButtonHeight();
				}
				else if( position > 0 )
				{
					collabService.hasControl = false;
					mouseTimer.stop();
					cursorButton.label = lang("You are in position ") + position;
					adjustCursorButtonHeight();
				}
			}
			
			private function removeMouseFromQueue(e:CollaborationEvent):void
			{
				var position:Number =  WeaveAPI.CollaborationCursorManager.removeFromQueue(e.getText(), collabService.nickname);
				if( position == 0 )
				{
					collabService.hasControl = true;
					mouseTimer.start();
					cursorButton.label = lang("Relinquish Control");
					adjustCursorButtonHeight();
				}
				else if( position > 0 )
				{
					collabService.hasControl = false;
					mouseTimer.stop();
					cursorButton.label = lang("You are in position ") + position;
					adjustCursorButtonHeight();
				}
			}
			
			private function handleCreateUserMouse(e:CollaborationEvent):void
			{
				
				trace("handleCreateUserMouse();");
				if( e.getText() == collabService.nickname ) return;
				if( WeaveAPI.CollaborationCursorManager.getCursorIds() == null )	// You have just joined the room and ask everyone for their mice
				{
					joinedRoomCreateMouseList();
				}
				else // You are already in the room and someone joins
				{
					WeaveAPI.CollaborationCursorManager.createCursor(e.getText());
					WeaveAPI.CollaborationCursorManager.setVisible(e.getText(), true);
					PARTICIPANTS.addToParticpantList(e.getText());
				}
			}
			
			private function resetUserMice():void
			{
				for( var i:int = 0;i < WeaveAPI.CollaborationCursorManager.getCursorIds().length; i++ )
					WeaveAPI.CollaborationCursorManager.removeCursor(WeaveAPI.CollaborationCursorManager.getCursorIds()[i]);
			}
			
			private function handleUserRequestMousePos(e:CollaborationEvent):void
			{
				trace("handleUserRequestMousePos();");
				collabService.sendMouseMessage(collabService.nickname, SETTINGS.collab_COLOR, xMousePercent(), yMousePercent());
			}
			
			private function mouseMove(e:TimerEvent):void
			{
				if( collabService.room.length < 2 ) return;				// Your the only one in the room ( dont send )
				if( lastX == mouseX && lastY == mouseY ) return;		// Your mouse never moved ( dont send )
				
				//				trace(collabService.username+" ("+xMousePercent()+"%,"+yMousePercent()+"%)");
				collabService.sendMouseMessage(collabService.nickname, SETTINGS.collab_COLOR, xMousePercent(), yMousePercent());
				lastX = mouseX;
				lastY = mouseY;
			}
			
			private function updateMousePos(e:CollaborationEvent):void
			{
				if( WeaveAPI.CollaborationCursorManager.getCursorIds().length == 0 )
					joinedRoomCreateMouseList();
				var found:Boolean = false;
				for( var i:int = 0; i < WeaveAPI.CollaborationCursorManager.getCursorIds().length; i++ )
				{
					if( WeaveAPI.CollaborationCursorManager.getCursorIds()[i] == e.getText() )
						found = true;
				}
				if( !found )
					WeaveAPI.CollaborationCursorManager.createCursor(e.getText());
				
				WeaveAPI.CollaborationCursorManager.setPosition(e.getText(), percentToCoordX(e.getX()), percentToCoordY(e.getY()), 5000);
				
				if( e.getColor() != WeaveAPI.CollaborationCursorManager.getColor(e.getText()) )
				{
					WeaveAPI.CollaborationCursorManager.setColor(e.getText(), e.getColor(), 1000);
					setUserAttribute(TYPE_COLOR, e.getText(), e.getColor());
				}
			}
			
			private function coordToPercentX(x:Number):Number { return x / WeaveAPI.topLevelApplication.stage.stageWidth;   }
			private function percentToCoordX(x:Number):Number { return x * WeaveAPI.topLevelApplication.stage.stageWidth;   }
			private function coordToPercentY(y:Number):Number { return y / WeaveAPI.topLevelApplication.stage.stageHeight;  }
			private function percentToCoordY(y:Number):Number { return y * WeaveAPI.topLevelApplication.stage.stageHeight;  }
			private function xMousePercent():Number { return WeaveAPI.topLevelApplication.stage.mouseX / WeaveAPI.topLevelApplication.stage.stageWidth;  }
			private function yMousePercent():Number { return WeaveAPI.topLevelApplication.stage.mouseY / WeaveAPI.topLevelApplication.stage.stageHeight; }
			
		]]>
	</mx:Script>
</mx:Panel>
