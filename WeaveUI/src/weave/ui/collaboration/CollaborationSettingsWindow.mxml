<?xml version="1.0" encoding="utf-8"?>
<!--
	Weave (Web-based Analysis and Visualization Environment)
	Copyright (C) 2008-2011 University of Massachusetts Lowell
	
	This file is a part of Weave.
	
	Weave is free software: you can redistribute it and/or modify
	it under the terms of the GNU General Public License, Version 3,
	as published by the Free Software Foundation.
	
	Weave is distributed in the hope that it will be useful,
	but WITHOUT ANY WARRANTY; without even the implied warranty of
	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
	GNU General Public License for more details.

	You should have received a copy of the GNU General Public License
	along with Weave.  If not, see <http://www.gnu.org/licenses/>.
-->
<mx:Canvas xmlns:mx="http://www.adobe.com/2006/mxml"
		   xmlns:ui="weave.ui.*"
		   width="300" height="315" backgroundAlpha="0" backgroundColor="#CCCCCC"
		   creationPolicy="all" hideEffect="{fadeOut}" showEffect="{fadeIn}">	
	<mx:Fade id="fadeIn" alphaFrom="0" alphaTo="1" duration="200"/>
	<mx:Fade id="fadeOut" alphaFrom="1" alphaTo="0" duration="200"/>
	
	<mx:VBox width="100%" height="100%" horizontalGap="0" verticalGap="0">
		<mx:Canvas id="SettingsWindow" width="290" height="300" backgroundAlpha="1"
				   backgroundColor="#CCCCCC" borderColor="#54585E" borderStyle="solid"
				   borderThickness="3">
			<mx:TabNavigator id="nav" width="100%" height="100%" backgroundAlpha="0"
							 backgroundColor="#DDDDDD" change="onTabChange(event)">
				<mx:VBox width="100%" height="100%" label="Connection" paddingBottom="{padding}"
						 paddingLeft="{padding}" paddingRight="{padding}" paddingTop="{padding}">
					<mx:HBox width="100%">
						<mx:Label width="{labelWidth}" text="Username:"/>
						<mx:TextInput id="nickname" width="{textAreaWidth}"
									  change="trimInput(event);"/>	
					</mx:HBox>
					<mx:HBox width="100%">
						<mx:Label width="{labelWidth}" text="User Color:"/>
						<mx:ColorPicker id="picker" selectedColor="{generateRandomColor()}"/>
					</mx:HBox>
					<mx:HBox>
						<mx:Label text="Use images for pointers:"/>
						<mx:CheckBox id="useImagePointers"
									 change="useImagePointers_changeHandler(event)"
									 selected="{CollabMouseCursor.useImage}"/>
					</mx:HBox>
					<mx:HBox>
						<mx:Label text="Link:"/>
						<mx:TextInput id="linkForImage" enabled="{CollabMouseCursor.useImage}"/>
						<mx:Button label="Load" click="button1_clickHandler(event)"
								   enabled="{CollabMouseCursor.useImage}"/>						
					</mx:HBox>
					<mx:HBox>
						<mx:Label text="Show participants cameras:"/>
						<mx:CheckBox id="showParticipantPanel" selected="true" click="showParticipantPanelClick(event)"/>					
					</mx:HBox>
					<mx:Spacer height="10"/>
					<ui:Center>
						<mx:Label visible="{warningVisible}" color="#FF0000" fontWeight="bold"
								  text="{warningMsg}"/>
					</ui:Center>
					<mx:Spacer height="100%"/>
					<ui:Center>
						<mx:HBox>
							<mx:Button id="connectButton" label="{lang('Connect')}"
									   click="saveSettings(event)"/>
							<mx:Button id="cancelButton" label="{lang('Cancel')}"/>
						</mx:HBox>
					</ui:Center>
				</mx:VBox>
				<mx:VBox width="100%" height="100%" label="Add-ons" enabled="true"
						 paddingBottom="{padding}" paddingLeft="{padding}" paddingRight="{padding}"
						 paddingTop="{padding}">
					<mx:HBox width="100%">
						<mx:Label width="{labelWidth}" text="Microphone:"/>
						<mx:ComboBox id="micList" width="{textAreaWidth}"
									 change="startMicActivityMonitor()"/>
					</mx:HBox>
					<mx:HBox width="100%">
						<mx:Spacer width="{labelWidth}"/>
						<mx:Canvas width="{textAreaWidth}" height="16" borderColor="#54585E"
								   borderStyle="solid" borderThickness="2">
							<mx:Canvas id="micActivity" height="16" backgroundColor="#0000FF"/>
						</mx:Canvas>
					</mx:HBox>
					<mx:HBox width="100%">
						<mx:Label width="{labelWidth}" text="Camera:"/>
						<mx:ComboBox id="camList" width="{textAreaWidth}"
									 change="startCamActivityMonitor()"/>
					</mx:HBox>
					<mx:HBox width="100%">
						<mx:Spacer width="{labelWidth}"/>
						<mx:Canvas width="{textAreaWidth}" height="{textAreaWidth*3/4}"
								   borderColor="#54585E" borderStyle="solid" borderThickness="3">
							<mx:UIComponent id="camActivity" width="100%" height="100%"/>
						</mx:Canvas>
					</mx:HBox>
					<mx:Spacer height="100%"/>
					<ui:Center>
						<mx:Button id="saveAddonsButton" label="{lang('Save')}"
								   click="saveAddons(event)"/>
					</ui:Center>
				</mx:VBox>
			</mx:TabNavigator>
		</mx:Canvas>
	</mx:VBox>
	<mx:Script>
		<![CDATA[
			import mx.controls.Alert;
			import mx.events.IndexChangedEvent;
			import mx.utils.StringUtil;
			
			import weave.Weave;
			import weave.services.collaboration.CollaborationEvent;
			
			private const labelWidth:Number = 80;
			private const textAreaWidth:Number = 150;
			private const padding:Number = 10;
			private const anchorSize:Number = 15;

			private var testMic:Microphone;
			private var micTimer:Timer;
			private var testVid:Video;
			private var testCam:Camera;
			
			public var collab_NICKNAME:String;
			public var collab_COLOR:uint;
			
			public var collab_MIC:Microphone = null;
			public var collab_CAMERA:Camera = null;
			
			[Bindable] public var warningMsg:String = "";
			[Bindable] public var warningVisible:Boolean = false;
			
			private function saveSettings(event:MouseEvent):void
			{
				if( nickname.text == "" )
				{
					Alert.show("Please enter a username.","Error");
					return;
				}
				if( Weave.properties.collabServerIP.value == "" || 
					Weave.properties.collabServerName.value == "" || 
					Weave.properties.collabServerRoom.value == "" || 
					Weave.properties.collabServerPort.value ==  "" ||
					Weave.properties.collabRTMPServer.value == "")
				{
					Alert.show("There is an error with the server properties.", "Error");
				}
				collab_NICKNAME = nickname.text;
				collab_COLOR = picker.selectedColor;
				
				if( connectButton.label == lang("Connect" ) )
				{
					connectButton.label = lang("Connecting");
					dispatchEvent(new CollaborationEvent(CollaborationEvent.CONN_SETTINGS_CONNECT));
				}
				else
				{
					connectButton.label = lang("Disconnecting");
					dispatchEvent(new CollaborationEvent(CollaborationEvent.CONN_SETTINGS_DISCONNECT));
				}
				
				
				// Slow down the fadeout to read
				fadeOut.duration = 1500;
				hide();
			}
			private function saveAddons(event:MouseEvent):void
			{
				collab_MIC = Microphone.getMicrophone(micList.selectedIndex);
				collab_CAMERA = Camera.getCamera(camList.selectedIndex as String);
				
				dispatchEvent(new Event(CollaborationEvent.ADDON_SETTINGS_SAVED));
				
				saveSettings(event);
			}
			public function show():void
			{
				this.visible = true;
				saveAddonsButton.label = lang("Save");
				fadeOut.duration = 500;
				
				if( nav.selectedIndex == 1 ) {
					startMicActivityMonitor();
					startCamActivityMonitor();
				}
			}
			public function hide():void
			{
				this.visible = false;
				if( micTimer ) stopMicActivityMonitor();
				if( testVid )  stopCamActivityMonitor();
				resetWarning();
			}
			private function trimInput(event:Event):void
			{
				event.target.text = StringUtil.trim(event.target.text); // hack
			}
			private function startMicActivityMonitor():void
			{
				if( micTimer ) stopMicActivityMonitor();
				
				testMic = Microphone.getMicrophone(micList.selectedIndex);
				if( !testMic ) return;
				
				testMic.setLoopBack(true);
				testMic.setUseEchoSuppression(true);
				
				micTimer = new Timer(300);
				micTimer.addEventListener(TimerEvent.TIMER, updateWidth);
				micTimer.start();
			}
			private function stopMicActivityMonitor():void
			{
				testMic.setLoopBack(false);
				testMic.setUseEchoSuppression(false);

				micTimer.stop();
				micTimer.removeEventListener(TimerEvent.TIMER, updateWidth);
			}
			private function updateWidth(e:TimerEvent):void
			{
				var width:Number = ( textAreaWidth / 100 ) * testMic.activityLevel;
				if( width >= 0 ) micActivity.width = width;
				else micActivity.width = 0;
			}
			private function startCamActivityMonitor():void
			{
				if( testVid && camActivity.contains(testVid) ) stopCamActivityMonitor();
				
				testCam = Camera.getCamera(camList.selectedIndex as String);
				if( !testCam ) return;
				
				testVid = new Video(camActivity.width, camActivity.height);
				testVid.attachCamera(testCam);
				camActivity.addChild(testVid);
			}
			private function stopCamActivityMonitor():void
			{
				if( testVid != null )
				{
					testVid.attachCamera(null);
					testVid.clear();
					camActivity.removeChild(testVid);
					testVid = null;
				}
			}
			public function showConnectionWarning(msg:String):void
			{
				nav.selectedIndex = 0;
				warningMsg = msg;
				warningVisible = true;
			}
			private function resetWarning():void
			{
				warningMsg = "";
				warningVisible = false;
			}
			private function generateRandomColor():uint
			{
				var col:uint = Math.random() * uint.MAX_VALUE; 
				return col;
			}
			private function onTabChange(event:IndexChangedEvent):void
			{
				if( event.newIndex == 1 ) {		// If the tab is set to Add-ons
					if( Microphone.names.length == 0 && Camera.names.length == 0 )
						saveAddonsButton.enabled = false;
					else
						saveAddonsButton.enabled = true;
					if( Microphone.names.length == 0 ) {
						micActivity.enabled = false;
						micList.enabled = false;
					} else {
						micActivity.enabled = true;
						micList.enabled = true;
						startMicActivityMonitor();
						micList.dataProvider = Microphone.names;
					}
					if( Camera.names.length == 0 ) {
						camActivity.enabled = false;
						camList.enabled = false;
					} else {
						camActivity.enabled = true;
						camList.enabled = true;
						startCamActivityMonitor();
						camList.dataProvider = Camera.names;
					}
					resetWarning();
				} else {
					if( Microphone.names.length > 0 )
						stopMicActivityMonitor();
					if( Camera.names.length > 0 )
						stopCamActivityMonitor();
				}
			}
			
			protected function useImagePointers_changeHandler(event:Event):void
			{
				if( useImagePointers.selected == true )
					CollabMouseCursor.useImage = true;
				else
					CollabMouseCursor.useImage = false;
			}
			
			protected function button1_clickHandler(event:MouseEvent):void
			{
				CollabMouseCursor.imageLink = linkForImage.text;			
			}
			
			protected function showParticipantPanelClick(event:MouseEvent):void
			{
				dispatchEvent( new CollaborationEvent(CollaborationEvent.PARTICIPANT_PANEL_SHOW));
			}
			
		]]>
	</mx:Script>
</mx:Canvas>
