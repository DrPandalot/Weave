<?xml version="1.0" encoding="utf-8"?>
<!--
/*
    Weave (Web-based Analysis and Visualization Environment)
    Copyright (C) 2008-2011 University of Massachusetts Lowell

    This file is a part of Weave.

    Weave is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License, Version 3,
    as published by the Free Software Foundation.

    Weave is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with Weave.  If not, see <http://www.gnu.org/licenses/>.
*/
-->
<mx:HBox xmlns:mx="http://www.adobe.com/2006/mxml" 
		 xmlns="weave.ui.controlBars.*"
		 xmlns:ui="weave.ui.*"
	     width="100%"
    	 backgroundColor="0x8a8a8a" backgroundAlpha="1.0"
    	 verticalAlign="middle"
	     styleName="weave-menu-bar-style"
	     horizontalScrollPolicy="off"
		 verticalScrollPolicy="off"
		 >
	<!--
		TODO:
		This class needs to be rewritten.
		The item renderers that get generated by this menubar are NOT the
		same WeaveMenuItem objects that appear in the dataProvider.
	-->
	<mx:MenuBar id="menubar"
				change="handleMenuItemChosen(event)"
				height="24"
				width="100%"
				dataProvider="{_menuList}"
				labelField="weaveLabel"
				iconField="iconURL"
				menuBarItemRenderer="{(function():*{return new ClassFactory(CustomMenuBarItem);}())}"
				menuShow="handleMenuShow(event)"
				
				menuStyleName="weave-menu-style"
				styleName="weave-menu-bar-style"
				/>
	<mx:Style>
		.weave-menu-style {
			color: #000000;
			selectionColor: #F8A4FB;
			textRollOverColor: #FFFFFF;
			textSelectedColor: #000000;
			openDuration: 0;
			padding-left: 0;
			padding-right: 0;
			padding-top: 0;
			padding-bottom: 0;
			
		}
		
		.weave-menu-bar-style {
			rollOverColor: #88A4DB;
			selectionColor: #F8A4FB;
			fontFamily: Arial;
			fontWeight: bold;
			padding-left: 0;
			padding-right: 0;
			padding-top: 0;
			padding-bottom: 0;
			highlightAlphas: 0, 0;
   			fillAlphas: 1, 1;
   			button-style-name: "weave-menu-bar-button-style";
   			
		}
		
		.weave-menu-bar-button-style {
			cornerRadius: 0;
			paddingLeft: 0;
			paddingRight: 0;
			paddingTop: 0;
			paddingBottom: 0;
		}
		.menu-button-style {
			padding-left: 0;
			padding-right: 0;
			padding-top: 2;
			padding-bottom: 2;
			corner-radius: 0;
			fill-alphas: 1, 1;
			fill-colors: #dadada, #dadada;
		}
	</mx:Style>
	 <mx:HBox  id="logoParentHBox" verticalAlign="middle" right="{menubar.getStyle('cornerRadius') + 3}" top="{(menubar.height) / 2}">
	 	<ui:OICLogoPane id="oicLogo"/>
	 </mx:HBox>       
	

    <mx:Script>
    	<![CDATA[
			import mx.collections.ArrayCollection;
			import mx.controls.Menu;
			import mx.core.mx_internal;
			import mx.events.MenuEvent;
			
			import weave.Weave;
			import weave.api.reportError;
			import weave.compiler.StandardLib;
			import weave.ui.OICLogoPane;
			
			use namespace mx_internal;
    		
			[Bindable]
			private var _dp:ArrayCollection = new ArrayCollection([]);

			[Bindable]
			private var _menuList:ArrayCollection = new ArrayCollection();

			private function handleMenuShow(event:MenuEvent):void
			{
				// tip taken from : http://blog.flexexamples.com/2010/02/19/setting-a-variable-row-height-on-an-mx-menubar-control-in-flex/
				// this will reduce the vertical space between separators and other items in the menu
				event.menu.variableRowHeight = true;
				event.menu.invalidateSize();
				validateNow();
				
				// prevent the menu from appearing off-screen.
				event.menu.callLater(repositionMenu, [event.menu]);
			}
			
			private const menuMouseListeners:Dictionary = new Dictionary(true);
			private const itemHeight:int = 20;
			private const scrollShadow:GradientGlowFilter = new GradientGlowFilter(0, 90, [0, 0], [0, 1], [0, 255], 0, itemHeight / 2, 2, BitmapFilterQuality.HIGH, BitmapFilterType.OUTER);
			private function repositionMenu(menu:Menu):void
			{
				if (!menu.parent)
					return;
				
				// always make the menu appear below the menu bar
				var global:Point = menubar.localToGlobal(new Point(0, menubar.height));
				menu.y = menu.parent.globalToLocal(global).y;
				
				var listener:Function = menuMouseListeners[menu] as Function;
				if (listener == null)
				{
					// add a sprite for a shadow to indicate when there are more menu items below or above
					var sprite:Sprite = new Sprite();
					sprite.filters = [scrollShadow];
					menu.addChild(sprite);
					
					// add an event listener that will automatically scroll the menu
					listener = function(..._):void
					{
						var visibleHeight:Number = Math.min(menu.height, stage.stageHeight - global.y);
						var menuMouseY:Number = stage.mouseY - global.y;
						var maxScroll:Number = menu.height - visibleHeight;
						
						// The itemHeight offsets are used to align the minimum and maximum scroll positions with the middle of the first and last menu items.
						var scrollPos:Number = Math.round((menuMouseY - itemHeight / 2) / (visibleHeight - itemHeight) * maxScroll);
						scrollPos = StandardLib.constrain(scrollPos, 0, maxScroll);
						menu.scrollRect = new Rectangle(0, scrollPos, menu.width, visibleHeight);
						
						// update shadow graphics
						sprite.graphics.clear();
						sprite.graphics.lineStyle(1, 0, 1, true);
						if (scrollPos > 0)
						{
							// hint that there are more items above
							sprite.graphics.moveTo(0, scrollPos - 1);
							sprite.graphics.lineTo(menu.width, scrollPos - 1);
						}
						if (scrollPos < maxScroll)
						{
							// hint that there are more items below
							sprite.graphics.moveTo(0, scrollPos + visibleHeight);
							sprite.graphics.lineTo(menu.width, scrollPos + visibleHeight);
						}
					};
					menu.addEventListener(MouseEvent.MOUSE_MOVE, listener);
					menuMouseListeners[menu] = listener;
				}
				listener(); // scroll now
			}
    		
    		public function refreshMenuBar():void
    		{
    			_menuList.refresh();
				
				validateNow();
    		}
    		
    		public function removeAllMenus():void
    		{
    			_menuList.removeAll();
				
				validateNow();
    		}
			override protected function createChildren():void
			{
				super.createChildren();

				Weave.properties.showCopyright.addGroupedCallback(this, addLogo, true);
    		}
    		
			private function addLogo():void
			{
				if (!parent)
					return callLater(addLogo);
				
				if (Weave.properties.showCopyright.value)
					addChild(logoParentHBox);
				else if (this == logoParentHBox.parent)
					removeChild(logoParentHBox);
			}

    		// NOTE: for now NO submenus!!
    		public function addMenuToMenuBar(menuName:String, isDynamic:Boolean = false, enabled:Boolean = true, separatorBefore:Boolean = false):WeaveMenuItem
    		{
    			if(separatorBefore)
    				_menuList.addItem( WeaveMenuItem.makeNewSeparatorItem() );
    				
    			var menuItem:WeaveMenuItem = new WeaveMenuItem(menuName);
    			menuItem.isDynamic = isDynamic;
    			menuItem.enabled = enabled;
    			_menuList.addItem(menuItem);

    			return menuItem;
    		}
    		public function addMenuItemToMenu(menu:WeaveMenuItem, menuItem:WeaveMenuItem):void
    		{
				var menuToModify:WeaveMenuItem = menu;
    			
    			if(menuToModify.children == null)
    				menuToModify.children = new ArrayCollection();
    				
    			menuToModify.children.addItem(menuItem);
    		}
    		public function removeMenuItemFromMenu(menuItemToRemove:WeaveMenuItem, parentMenu:WeaveMenuItem):void
    		{
				var n:int = parentMenu.children.getItemIndex(menuItemToRemove);
				if (n < 0)
				{
					reportError("removeMenuItemFromMenu: item not found");
					return;
				}
				
				parentMenu.children.removeItemAt(n);
				
				validateNow();
			}
    		public function addSeparatorToMenu(menu:WeaveMenuItem):void
    		{
    			if(menu.children == null)
    				menu.children = new ArrayCollection();
    			
    			// stop if the last item is already a separator
    			if (menu.children.length > 0)
    			{
	    			var lastChild:WeaveMenuItem = menu.children.getItemAt(menu.children.length - 1) as WeaveMenuItem;
	    			if (lastChild.type == WeaveMenuItem.TYPE_SEPARATOR)
	    				return;
	    		}

    			menu.children.addItem(WeaveMenuItem.makeNewSeparatorItem());
    		}
    		
    		private function handleMenuItemChosen(event:MenuEvent):void
    		{   
   				var targetMenuItem:WeaveMenuItem = (event.item as WeaveMenuItem);    					
   				targetMenuItem.runClickFunction();
    		}
    	]]>
    </mx:Script>
</mx:HBox>
