<?xml version="1.0" encoding="utf-8"?>
<!--
/*
    Weave (Web-based Analysis and Visualization Environment)
    Copyright (C) 2008-2011 University of Massachusetts Lowell

    This file is a part of Weave.

    Weave is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License, Version 3,
    as published by the Free Software Foundation.

    Weave is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with Weave.  If not, see <http://www.gnu.org/licenses/>.
*/
-->
<mx:VBox xmlns:mx="http://www.adobe.com/2006/mxml"
		 label="General"
		 enabled="{_tool != null}"
		 verticalGap="{verticalGap}"
		 creationPolicy="all" xmlns:settings="weave.ui.settings.*" xmlns:ui="weave.ui.*">
	
	<mx:HBox width="100%">
		<mx:CheckBox id="enableTitle" label="Visualization title" toolTip="Selecting this option will turn the title of this tool on or off"
					 creationComplete="linkBindableProperty(_tool.enableTitle, event.target, 'selected');"/>
		<mx:TextInput id="titleInput"
					  width="100%"
					  toolTip="Entering a title here will override the automatic title generated by the tool."
					  creationComplete="linkBindableProperty(_tool.panelTitle, event.target, 'text', 500);"/>
	</mx:HBox>
	<mx:HBox>
		<mx:Label text="Background color:"/>
		<mx:ColorPicker toolTip="Select a color for the background of this visualization tool." 
						id="backgroundColorPicker"
						change="backgroundColorPicked();"/>
		<mx:Button label="Reset" click="_tool.panelBackgroundColor.value = NaN;"/>
	</mx:HBox>
	<mx:HBox width="100%" id="marginProperties" verticalAlign="middle">
		<mx:Label  text="Margins:"/>
		
		<mx:NumericStepper id="marginLeft" toolTip="Enter a number of pixels to use for the left margin"
						   minimum="0" maximum="200" stepSize="5"
						   creationComplete="linkBindableProperty(_tool.visualization.marginLeft, event.target, 'value');"/>
		<mx:VBox>
			<mx:NumericStepper id="marginTop" toolTip="Enter a number of pixels to use for the top margin"
							   minimum="0" maximum="200" stepSize="5"
							   creationComplete="linkBindableProperty(_tool.visualization.marginTop, event.target, 'value');"/>
			<mx:NumericStepper id="marginBottom" toolTip="Enter a number of pixels to use for the bottom margin"
							   minimum="0" maximum="200" stepSize="5"
							   creationComplete="linkBindableProperty(_tool.visualization.marginBottom, event.target, 'value');"/>
		</mx:VBox>
		<mx:NumericStepper id="marginRight" toolTip="Enter a number of pixels to use for the right margin"
						   minimum="0" maximum="200" stepSize="5"
						   creationComplete="linkBindableProperty(_tool.visualization.marginRight, event.target, 'value');"/>
	</mx:HBox>
	<mx:VBox id="axisSettings" verticalGap="{verticalGap}">
		<mx:HBox width="100%" verticalAlign="middle">
			<mx:Label text="Grid color:" />
			<mx:ColorPicker id="gridColorPicker" toolTip="Select a color for the grid lines of this visualization"
							creationComplete="linkBindableProperty(_tool.visualization.gridLineColor, event.target, 'selectedColor');"/>
			
			<mx:Label text="Thickness:" />
			<mx:NumericStepper id="gridLineThicknessStepper" minimum="1" maximum="10"
							   creationComplete="linkBindableProperty(_tool.visualization.gridLineThickness, event.target, 'value');"/>

			<mx:Label text="Opacity:" />
			<mx:HSlider id="gridLineAlphaSlider" 
						width="100%" 
						snapInterval="0.1"
						tickInterval="0.5" labels="{['0%','50%','100%']}" 
						dataTipFormatFunction="{alphaSliderFormatFunction}"
						minimum="0.0" maximum="1.0" 
						liveDragging="true"
						creationComplete="linkBindableProperty(_tool.visualization.gridLineAlpha, event.target, 'value');"/>
		</mx:HBox>
		<mx:VBox>
			<ui:TextBox label="Y axis title:" id="yAxisTitle" indent="{yAxisLabelFunction.labelComponent.width}"/>
			<mx:HBox verticalAlign="middle">
				<ui:TextBox label="Y axis label function:" id="yAxisLabelFunction"/>
				<mx:Label text="Angle:"/>
				<mx:NumericStepper id="yLabelAngle" minimum="-180" maximum="180" stepSize="15"/>
			</mx:HBox>
		</mx:VBox>
		<mx:VBox>
			<ui:TextBox label="X axis title:" id="xAxisTitle" indent="{xAxisLabelFunction.labelComponent.width}"/>
			<mx:HBox verticalAlign="middle">
				<ui:TextBox label="X axis label function:" id="xAxisLabelFunction"/>
				<mx:Label text="Angle:"/>
				<mx:NumericStepper id="xLabelAngle" minimum="-180" maximum="180" stepSize="15"/>
			</mx:HBox>
		</mx:VBox>
	</mx:VBox>

	<mx:Script>
		<![CDATA[
			import mx.controls.Alert;
			import mx.events.FlexEvent;
			
			import weave.api.linkBindableProperty;
			import weave.core.SessionManager;
			import weave.ui.DraggablePanel;
			import weave.utils.EventUtils;
			import weave.visualization.tools.SimpleVisTool;
			
			private const verticalGap:int = 16;
			private const indent:int = 150;

			[Bindable]
			private var _tool:SimpleVisTool = null;
			
			public function set target(tool:SimpleVisTool):void
			{
				if (_tool)
					throw new Error("target should not be set more than once");
				
				_tool = tool;
			}
			override protected function childrenCreated():void
			{
				super.childrenCreated();
				
				_tool.panelBackgroundColor.addGroupedCallback(this, backgroundColorCallback, true);
				_tool.addEventListener(FlexEvent.UPDATE_COMPLETE, function(..._):void { backgroundColorCallback(); });
				
				if (_tool.showAxes)
				{
					linkBindableProperty(_tool.visualization.getXAxisLayer().axisPlotter.overrideAxisName, xAxisTitle, 'text');
					linkBindableProperty(_tool.visualization.getXAxisLayer().axisPlotter.labelFunction, xAxisLabelFunction, 'text');
					linkBindableProperty(_tool.visualization.getXAxisLayer().axisPlotter.axisLabelRelativeAngle, xLabelAngle, 'value');
					
					linkBindableProperty(_tool.visualization.getYAxisLayer().axisPlotter.overrideAxisName, yAxisTitle, 'text');
					linkBindableProperty(_tool.visualization.getYAxisLayer().axisPlotter.labelFunction, yAxisLabelFunction, 'text');
					linkBindableProperty(_tool.visualization.getYAxisLayer().axisPlotter.axisLabelRelativeAngle, yLabelAngle, 'value');
				}
				else
				{
					axisSettings.parent.removeChild(axisSettings);
				}
			}
			
			private function backgroundColorCallback():void
			{
				backgroundColorPicker.selectedColor = _tool.getStyle('backgroundColor');
			}
			private function backgroundColorPicked():void
			{
				_tool.panelBackgroundColor.value = backgroundColorPicker.selectedColor;
			}
			private function alphaSliderFormatFunction(value:Number):String
			{
				return int((value * 100)) + "% Opaque" + "\n" + int(100 - (value * 100)) + "% Transparent";
			}
		]]>
	</mx:Script>
</mx:VBox>
