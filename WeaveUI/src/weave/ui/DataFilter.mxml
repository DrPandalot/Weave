<?xml version="1.0" encoding="utf-8"?>
<!--
/*
    Weave (Web-based Analysis and Visualization Environment)
    Copyright (C) 2008-2011 University of Massachusetts Lowell

    This file is a part of Weave.

    Weave is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License, Version 3,
    as published by the Free Software Foundation.

    Weave is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with Weave.  If not, see <http://www.gnu.org/licenses/>.
*/
-->
<DraggablePanel xmlns="weave.ui.*" 
				layout="vertical" verticalAlign="middle"
				xmlns:mx="http://www.adobe.com/2006/mxml" 
				xmlns:ui="weave.ui.*" implements="weave.api.ui.IVisTool_Utility, weave.api.ui.ISelectableAttributes, weave.api.core.ILinkableObjectWithNewProperties"
				horizontalScrollPolicy="off" verticalScrollPolicy="off"
				>
	<mx:Script>
		<![CDATA[
			import avmplus.getQualifiedClassName;
			
			import weave.Weave;
			import weave.api.core.ICallbackCollection;
			import weave.api.core.ILinkableObject;
			import weave.api.data.IAttributeColumn;
			import weave.api.data.IKeyFilter;
			import weave.api.getCallbackCollection;
			import weave.api.getSessionState;
			import weave.api.newLinkableChild;
			import weave.api.registerLinkableChild;
			import weave.api.setSessionState;
			import weave.api.ui.ILinkableObjectEditor;
			import weave.api.ui.IVisTool;
			import weave.core.ExternalSessionStateInterface;
			import weave.core.LinkableBoolean;
			import weave.core.LinkableDynamicObject;
			import weave.core.LinkableWatcher;
			import weave.data.KeySets.NumberDataFilter;
			import weave.data.KeySets.StringDataFilter;
			import weave.editors.StringDataFilterEditor;
			import weave.menus.WeaveMenuItem;
			import weave.utils.ColumnUtils;
			
			WeaveAPI.ClassRegistry.registerImplementation(IVisTool, DataFilter, "Data Filter");
			
			private const filter:LinkableDynamicObject = registerLinkableChild(this, new LinkableDynamicObject(IKeyFilter), handleFilterWatcher);
			public const editor:LinkableDynamicObject = registerLinkableChild(this, new LinkableDynamicObject(ILinkableObjectEditor), handleEditor, true);
			
			private var _editorStateMissing:Boolean = false;
			
			private function getFilter():IKeyFilter
			{
				return filter.target as IKeyFilter;
			}
			private function getEditor():ILinkableObjectEditor
			{
				return editor.target as ILinkableObjectEditor;
			}
			private function handleEditor():void
			{
				var _editor:ILinkableObjectEditor = getEditor();
				if (_editor && !_editor.parent)
					addChild(_editor as DisplayObject);
			}
			
			private function getFilterColumn():IAttributeColumn
			{
				var kf:IKeyFilter = getFilter();
				var ndf:NumberDataFilter = kf as NumberDataFilter;
				var sdf:StringDataFilter = kf as StringDataFilter;
				return ((ndf && ndf.column) || (sdf && sdf.column)) as IAttributeColumn;
			}
			
			override protected function inConstructor():void
			{
				super.inConstructor();
				enableSubMenu.value = true;
			}
			
			override protected function createChildren():void
			{
				if (createdChildren)
					return;
				super.createChildren();
				
				function onClick(item:WeaveMenuItem):void
				{
					var filterType:Class = item.data[0] as Class;
					var layoutMode:String = item.data[1];
					setFilterType(filterType, {layoutMode: layoutMode});
				}
				function isToggled(item:WeaveMenuItem):Boolean
				{
					var filterType:Class = item.data[0] as Class;
					var layoutMode:String = item.data[1];
					if (getFilter() is filterType)
					{
						if (layoutMode)
						{
							var editor:StringDataFilterEditor = getEditor() as StringDataFilterEditor;
							return editor && editor.layoutMode.value == layoutMode;
						}
						return true;
					}
					return false;
				}
				subMenuButton.data = [
					{
						data: [StringDataFilter],
						label: lang("String filter"),
						type: WeaveMenuItem.TYPE_RADIO,
						toggled: isToggled,
						children: MenuToolViewStack.LAYOUTS.map(function(layout:String, i:int, a:Array):Object {
							return {
								data: [StringDataFilter, layout],
								label: MenuToolViewStack.layoutLabelFunction(layout),
								click: onClick,
								type: WeaveMenuItem.TYPE_RADIO,
								toggled: isToggled
							};
						})
					},{
						data: [NumberDataFilter],
						label: lang("Number filter"),
						click: onClick,
						type: WeaveMenuItem.TYPE_RADIO,
						toggled: isToggled
					},
					WeaveMenuItem.TYPE_SEPARATOR,
					{
						label: lang("Show filter toggle CheckBox"),
						type: WeaveMenuItem.TYPE_RADIO,
						groupName: 'showToggle',
						toggled: function():Boolean {
							var _editor:ILinkableObjectEditor = getEditor();
							return _editor && getSessionState(_editor)['showToggle'];
						},
						click: function():void {
							var _editor:ILinkableObjectEditor = getEditor();
							if (_editor)
								setSessionState(_editor, {showToggle: !getSessionState(_editor)['showToggle']}, false);
						}
					},
					WeaveMenuItem.TYPE_SEPARATOR,
					{
						label: lang("Edit session state"),
						click: toggleControlPanel
					}
				];
				
				callLater(initLater);
			}
			
			private function initLater():void
			{
				if (filter.targetPath == null)
					filter.targetPath = [Weave.DEFAULT_SUBSET_KEYFILTER, 'filters', WeaveAPI.globalHashMap.getName(this)];
				if (!getFilter())
					setFilterType(StringDataFilter, null);
				
				if (_editorStateMissing && editor.target is StringDataFilterEditor)
					(editor.target as StringDataFilterEditor).layoutMode.value = MenuToolViewStack.LAYOUT_COMBO;
				_editorStateMissing = false;
			}
			
			override public function dispose():void
			{
				if (filter.targetPath)
				{
					try
					{
						WeaveAPI.ExternalSessionStateInterface.removeObject(filter.targetPath);
					}
					catch (e:Error)
					{
						trace(e.getStackTrace());
					}
				}
				super.dispose()
			}
			
			private function setFilterType(type:Class, editorDiff:Object):void
			{
				var editorState:Object = editor.target && getSessionState(editor.target);
				var filterState:Object = filter.target && getSessionState(filter.target);
				
				try
				{
					WeaveAPI.ExternalSessionStateInterface.requestObject(filter.targetPath, getQualifiedClassName(type));
				}
				catch (e:Error)
				{
					trace(e.getStackTrace());
				}
				
				if (filter.target && filterState)
					setSessionState(filter.target, filterState);
				if (editor.target && editorState)
				{
					WeaveAPI.SessionManager.combineDiff(editorState, editorDiff);
					setSessionState(editor.target, editorState);
				}
			}
			
			private function handleFilterWatcher():void
			{
				handlePanelTitleChange();
				
				var _filter:ILinkableObject = getFilter();
				if (_filter)
				{
					var editorClass:Class = WeaveAPI.EditorManager.getEditorClass(_filter);
					if (editorClass)
					{
						var _editor:ILinkableObjectEditor = editor.requestLocalObject(editorClass, false);
						if (_editor)
							_editor.setTarget(_filter);
						return;
					}
				}
				
				editor.removeObject();
			}
			
			override public function get defaultPanelTitle():String
			{
				if (getFilterColumn())
					return lang('Filter for {0}', ColumnUtils.getTitle(getFilterColumn()));
				
				return lang('Filter');
			}
			
			public function getSelectableAttributeNames():Array
			{
				return getFilterColumn() ? ['Filter'] : [];
			}
			
			public function getSelectableAttributes():Array
			{
				return getFilterColumn() ? [getFilterColumn()] : [];
			}
			
			public function handleMissingSessionStateProperty(newState:Object, missingProperty:String):void
			{
				if (missingProperty == 'editor')
				{
					_editorStateMissing = true;
					if (editor.target is StringDataFilterEditor)
						(editor.target as StringDataFilterEditor).layoutMode.value = MenuToolViewStack.LAYOUT_COMBO;
					else
						callLater(initLater);
				}
			}
		]]>
	</mx:Script>
</DraggablePanel>
