<?xml version="1.0" encoding="utf-8"?>
<!--This component is UI to show a summery of the document object assigned to it.
Use the static functions to show this as a popup.
-->
<mx:VBox xmlns:mx="http://www.adobe.com/2006/mxml"
		 xmlns:infomap="weave.ui.infomap.*" 
		 width="200" height="250" 
		 verticalScrollPolicy="off" 
		 horizontalScrollPolicy="off" 
		 paddingLeft="5" paddingRight="5" paddingTop="5" paddingBottom="5"
		 visible="true"
		 mouseChildren="false">
	<mx:Fade target="{this}" id="fadeIn" alphaFrom="0.0" alphaTo="1.0" duration="1500"/>
	<mx:Fade target="{this}" id="fadeOut" alphaFrom="1.0" alphaTo="0.0" duration="700"/>
	
	<mx:Script >
		<![CDATA[
			import flash.net.navigateToURL;
			
			import mx.managers.PopUpManager;
			import mx.rpc.events.FaultEvent;
			import mx.rpc.events.ResultEvent;
			
			import weave.Weave;
			import weave.api.core.ILinkableObject;
			import weave.api.getLinkableDescendants;
			import weave.api.getLinkableOwner;
			import weave.api.services.IURLRequestToken;
			import weave.core.LinkableString;
			import weave.core.SessionManager;
			import weave.services.addAsyncResponder;
			import weave.utils.DocumentSummaryEvent;
			import weave.visualization.layers.InteractiveVisualization;
			import weave.visualization.layers.Visualization;
			import weave.visualization.plotters.IDocumentPlotter;
			
			private static var _docURL:LinkableString = new LinkableString("");
			
			override protected function childrenCreated():void
			{
				super.childrenCreated();
				this.setStyle("backgroundColor",0xEDE6E6);
				this.setStyle("borderStyle","solid");
				this.setStyle("borderColor",0xC40202);
				this.setStyle("cornerRadius",10);
				this.setStyle("borderThickness",2);
				this.maxWidth = 250;
				this.maxHeight = 300;
				
				//					_docURL.addGroupedCallback(this, updateText);
				
				//					linkBindableProperty(doc.summary,nodeDescription,"text");
				//					linkBindableProperty(doc.title,nodeTitle,"text");
				//					linkBindableProperty(doc.date,nodeTimeStamp,"text");
				
			}
			
			private static var instance:DocumentSummaryComponent = null;
			private static var requestToken:IURLRequestToken = null;
			private static var  _offset:Number = 20;
			/**
			 * Call this function to show a Summary Component as a Popup
			 * 
			 * @param xPos the x value of the popup
			 * @param yPos the y value of the popup
			 * @param document The document object whose summary is to be displayed
			 * @parent the parent display object calling this function
			 * */
			public static function show(xPos:Number,yPos:Number,docURL:String,parent:DisplayObject, imageURL:String):void
			{
				if(!instance)
					instance = new DocumentSummaryComponent();
				if(!docURL)
					return;
				
				instance.fadeOut.stop();
				_docURL.value = docURL;
				
				_bitmap = null;
				
				//Make the URL to fetch the image here.
				var imgURL:String = imageURL;
				
				if(imgURL && !(imgURL=="ERROR"))
				{
					requestToken = WeaveAPI.URLRequestUtils.getContent(instance,new URLRequest(imgURL),handleImage,null,_docURL.value);
				}
				if(xPos+instance.width >=parent.stage.stageWidth)
				{
					xPos = xPos - instance.width - _offset; 
				}
				xPos = Math.min(xPos, parent.stage.stageWidth - instance.width);
				yPos = Math.min(yPos, parent.stage.stageHeight - instance.height);
				instance.move(xPos,yPos);
				PopUpManager.addPopUp(instance,parent);
				instance.nodeTitle.text= _docURL.value;
				
				instance.fadeIn.play();
			}
			
			public static function hide():void
			{
				if(instance)
				{
					if(requestToken)
					{
						requestToken.cancelRequest(); 
					}
					instance.fadeIn.stop();
					instance.fadeOut.play();
					PopUpManager.removePopUp(instance);
				}
			}
			
			//								
			[Bindable]
			private static var _bitmap:Bitmap = new Bitmap();
			private static function handleImage(event:ResultEvent,token:Object=null):void
			{
				if(token==_docURL.value)
					_bitmap = new Bitmap((event.result as Bitmap).bitmapData);
				
			}
			
			private static function handleNoImage(event:FaultEvent,token:Object=null):void
			{
				_bitmap = null;
			}
			
			private static var _initializedObjects:Dictionary = staticInit();
			private static function staticInit():Dictionary
			{
				(WeaveAPI.SessionManager as SessionManager).addTreeCallback(null, initAllDraggableVisualizations, true);
				return new Dictionary(true);
			}
			private static function initAllDraggableVisualizations():void
			{
				var plotters:Array = getLinkableDescendants(WeaveAPI.globalHashMap, IDocumentPlotter);
				for each (var plotter:IDocumentPlotter in plotters)
				{
					if (_initializedObjects[plotter])
						continue;
					_initializedObjects[plotter] = true;
					var owner:ILinkableObject = getLinkableOwner(plotter);
					while (owner && !(owner is InteractiveVisualization))
						owner = getLinkableOwner(owner);
					
					if (!owner || _initializedObjects[owner])
						continue;
					initDraggableVisualization(owner as InteractiveVisualization);
				}
			}
			private static function initDraggableVisualization(visualization:InteractiveVisualization):void
			{
				_initializedObjects[visualization] = true;
				visualization.addEventListener(DocumentSummaryEvent.DISPLAY_DOCUMENT, showDocumentToolTip);
				visualization.addEventListener(DocumentSummaryEvent.HIDE_DOCUMENT, hideDocumentToolTip);
				visualization.addEventListener(DocumentSummaryEvent.OPEN_DOCUMENT, openExternalDocument);
				
				function getPlotter():IDocumentPlotter
				{
					return getLinkableDescendants(visualization, IDocumentPlotter)[0];
				}
				
				function showDocumentToolTip(e:DocumentSummaryEvent):void
				{
					var plotter:IDocumentPlotter = getPlotter();
					if (!plotter)
						return;
					
					var docLink:String = plotter.getDocumentURL(e.imageKey);
					if (!docLink)
						return;
					var imageURL:String = plotter.getThumbnailURL(e.imageKey);
					if (imageURL)
						DocumentSummaryComponent.show(e.xPos,e.yPos,e.docTitle,visualization,imageURL);
				}
				function hideDocumentToolTip(e:DocumentSummaryEvent):void
				{
					DocumentSummaryComponent.hide();
				}
				function openExternalDocument(e:DocumentSummaryEvent):void
				{
					var plotter:IDocumentPlotter = getPlotter();
					if (!plotter)
						return;
					var docLink:String = plotter.getDocumentURL(e.imageKey);
					if (!docLink)
						return;
					
					if( ExternalInterface.available )
					{
						try{
							ExternalInterface.call("open", docLink, "_blank", "width=800,height=800,left=100,top=200");
						}
						catch(e:Error) 
						{
						}
					}
					else
						navigateToURL(new URLRequest(docLink), '_blank');
				}
			}

		]]>
	</mx:Script>
	<mx:Text id="nodeTitle" fontWeight="bold" width="100%"/>
	<!--<mx:HRule width="100%"/>-->
	<mx:HBox width="100%" height="100%" verticalScrollPolicy="off" horizontalScrollPolicy="off">
		<mx:Image id="nodeThumbnail" source="{_bitmap}" maintainAspectRatio="false" maxWidth="140" maxHeight="140"/>
	</mx:HBox>	
</mx:VBox>