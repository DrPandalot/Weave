<?xml version="1.0" encoding="utf-8"?>
<!--
/*
Weave (Web-based Analysis and Visualization Environment)
Copyright (C) 2008-2011 University of Massachusetts Lowell

This file is a part of Weave.

Weave is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License, Version 3,
as published by the Free Software Foundation.

Weave is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with Weave.  If not, see <http://www.gnu.org/licenses/>.
*/

-->
<SimpleVisTool xmlns="weave.visualization.tools.*" 
			   xmlns:mx="http://www.adobe.com/2006/mxml"
			   xmlns:ui="weave.ui.*" xmlns:editors="weave.editors.*" 
			   implements="weave.api.ui.IVisTool"
			   >
	<mx:Script>
		<![CDATA[
			import weave.Weave;
			import weave.api.copySessionState;
			import weave.api.core.ILinkableHashMap;
			import weave.api.data.IAttributeColumn;
			import weave.api.data.IQualifiedKey;
			import weave.api.getCallbackCollection;
			import weave.api.getLinkableOwner;
			import weave.api.getSessionState;
			import weave.api.registerLinkableChild;
			import weave.api.setSessionState;
			import weave.api.ui.IVisTool;
			import weave.compiler.StandardLib;
			import weave.core.ClassUtils;
			import weave.core.LinkableVariable;
			import weave.data.DataSources.DocumentMapDataSource;
			import weave.data.KeySets.KeySet;
			import weave.primitives.Bounds2D;
			import weave.ui.SelectableAttributesCheckBoxList;
			import weave.utils.ColumnUtils;
			import weave.utils.NumberUtils;
			import weave.utils.ZoomUtils;
			import weave.visualization.layers.PlotManager;
			import weave.visualization.plotters.DraggableNestedRadvizPlotter;
			import weave.visualization.plotters.DraggableScatterPlotPlotter;
			
			WeaveAPI.ClassRegistry.registerImplementation(IVisTool, DraggableScatterPlotTool, "Document Map");
			
			[Bindable]
			public var plotter:DraggableScatterPlotPlotter = null;
			
			private var _probe:KeySet = Weave.defaultProbeKeySet;
			
			override protected function inConstructor():void
			{
				super.inConstructor();
				
				// lock dynamic objects into place
				plotter = initializePlotters(DraggableScatterPlotPlotter, false);
				visualization.plotManager.enableFixedAspectRatio.value = false;
				
				visualization.enableZoomAndPan.value = false;
				
				visualization.enableAutoZoomXToNiceNumbers.value = false;
				visualization.enableAutoZoomYToNiceNumbers.value = false;
				
				getCallbackCollection(plotter).addGroupedCallback(this, handlePanelTitleChange, true);
				
				visualization.plotManager.marginBottom.value = "10";
				visualization.plotManager.marginTop.value    = "10";
				visualization.plotManager.marginLeft.value   = "10";
				visualization.plotManager.marginRight.value  = "10";
			}
			
			
			override public function initSelectableAttributes(input:Array):void
			{
				ColumnUtils.initSelectableAttributes([plotter.dataX, plotter.dataY, plotter.fill.color], input);
			}
			
			public const attributesToIncludeInProbe:LinkableVariable = registerLinkableChild(this, new LinkableVariable(Array, null, null), handleAttributesToIncludeInProbe, true);
			private function handleAttributesToIncludeInProbe():void
			{
				var columns:Array = SelectableAttributesCheckBoxList.getSelectedAttributeColumns(this, attributesToIncludeInProbe);
				visualization.additionalProbeColumns = columns;
			}
			[Deprecated] public function set includeToolAttributesInProbe(value:Boolean):void
			{
				attributesToIncludeInProbe.setSessionState(value ? getSelectableAttributeNames() : []);
			}
			
			override public function get defaultPanelTitle():String
			{
				return lang("DocMap");
			}
			
			override protected function childrenCreated():void
			{
				super.childrenCreated();
				
				_probe.addImmediateCallback(this, updateTopicProbe);
				
				enableSubMenu.value = true;
				enableSubMenu.lock();
				subMenuButton.data = [
					{
						label: lang("Create Nested RadViz"),
						click: createNestedRadViz
					},{
						label: lang('Lock all document positions'),
						click: plotter.lockAllDataPoints
					},{
						label: lang('Unlock and reset all document positions'),
						click: plotter.resetMovedDataPoints
					}
				];
			}
			
			private function createNestedRadViz():void
			{
				var selfName:String = WeaveAPI.globalHashMap.getName(this);
				var newName:String = 'NestedRadViz_from_' + selfName;
				var tool:CustomTool = WeaveAPI.globalHashMap.requestObject(newName, CustomTool, false);
				tool.sendWindowToForeground();
				
				var px:int = StandardLib.asNumber(StandardLib.replace(this.panelX.value, '%', ''));
				var py:int= StandardLib.asNumber(StandardLib.replace(this.panelY.value, '%', ''));
				var pw:int= StandardLib.asNumber(StandardLib.replace(this.panelWidth.value, '%', ''));
				var ph:int= StandardLib.asNumber(StandardLib.replace(this.panelHeight.value, '%', ''));
				if (px + pw == 100)
					px-=3;
				else
					px+=3;
				if (py + ph == 100)
					py-=3;
				else
					py+=3;
				setSessionState(tool, {panelX: px + '%', panelY: py + '%', panelWidth: pw + '%', panelHeight: ph + '%'});
				
				var pm1:PlotManager = visualization.plotManager;
				var pm2:PlotManager = tool.visualization.plotManager;
				pm2.marginTop.value = '0';
				pm2.marginBottom.value = '0';
				pm2.marginLeft.value = '0';
				pm2.marginRight.value = '0';
				pm2.enableFixedAspectRatio.value = true;
				pm2.enableAutoZoomToExtent.value = false;
				
				var plotName:String = WeaveAPI.ClassRegistry.getDisplayName(DraggableNestedRadvizPlotter);
				var newPlotter:DraggableNestedRadvizPlotter = pm2.plotters.requestObject(plotName, DraggableNestedRadvizPlotter, false);
				copySessionState(plotter.topicColumns, newPlotter.topicColumns);
				copySessionState(plotter.docLinks, newPlotter.docLinks);
				copySessionState(plotter.thumbnails, newPlotter.thumbnails);
				copySessionState(plotter.sizeBy, newPlotter.docRadius);
				
				var names:Array = newPlotter.topicColumns.getNames();
				
				var srcBounds:Bounds2D = new Bounds2D();
				var screenBounds:Bounds2D = new Bounds2D();
				pm1.zoomBounds.getDataBounds(srcBounds);
				pm1.zoomBounds.getScreenBounds(screenBounds);
				
				var destBounds:Bounds2D = new Bounds2D();
				destBounds.setCenteredRectangle(0, 0, names.length/2, names.length/2);
				ZoomUtils.conformDataBoundsToAspectRatio(destBounds, screenBounds, screenBounds.getWidth() / screenBounds.getHeight());
				pm2.zoomBounds.setDataBounds(destBounds, true);

				var o:Object = {};
				var points:Array = plotter.getOrderedTopicPoints();
				for (var i:int = 0; i < names.length; i++)
				{
					var point:Point = points[i];
					srcBounds.projectPointTo(point, destBounds);
					o[names[i]] = point;
				}
				newPlotter.topicPositions.setSessionState(o);
			}
			
			private function updateTopicProbe():void
			{
				if( _probe.keys.length == 1 )
					plotter.probedKey = _probe.keys[0];
				else
					plotter.probedKey = null;
			}
			
			public function createLegend():void
			{
				var sizeBinLegendTool:SizeBinLegendTool = Weave.root.requestObject(null, SizeBinLegendTool, false);
				sizeBinLegendTool.dynamicScatterPlotTool.globalName = Weave.root.getName(this);
			}
			
		]]>
	</mx:Script>
	<editorFactory><mx:Component><ui:ControlPanel>
		<mx:Script>
			<![CDATA[
				import weave.api.linkBindableProperty;
				import weave.compiler.StandardLib;
				import weave.core.UIUtils;
				import weave.visualization.plotters.RegressionLinePlotter;
			]]>
		</mx:Script>
		<mx:VBox id="VizControlsPanel" label="{lang('Visualization Controls')}">
			<editors:DraggableScatterPlotEditor id="plotEditor" width="100%" creationComplete="plotEditor.setTarget(outerDocument.plotter)"/>
		</mx:VBox>
		<mx:VBox id="AdvancedPanel" label="{lang('Advanced')}">
			<mx:Button label="{lang('Show legend')}" click="outerDocument.createLegend()"/>
			<ui:SelectableAttributesCheckBoxList id="selectedAttrList" creationComplete="selectedAttrList.setup(outerDocument, outerDocument.attributesToIncludeInProbe)"/>
			
		</mx:VBox>
	</ui:ControlPanel></mx:Component></editorFactory>
</SimpleVisTool>
