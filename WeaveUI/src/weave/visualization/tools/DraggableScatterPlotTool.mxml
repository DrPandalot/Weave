<?xml version="1.0" encoding="utf-8"?>
<!--
/*
Weave (Web-based Analysis and Visualization Environment)
Copyright (C) 2008-2011 University of Massachusetts Lowell

This file is a part of Weave.

Weave is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License, Version 3,
as published by the Free Software Foundation.

Weave is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with Weave.  If not, see <http://www.gnu.org/licenses/>.
*/

-->
<SimpleVisTool xmlns="weave.visualization.tools.*" 
			   xmlns:mx="http://www.adobe.com/2006/mxml"
			   xmlns:ui="weave.ui.*" xmlns:editors="weave.editors.*" 
			   implements="weave.api.ui.IVisTool_Basic"
			   >
	<mx:Script>
		<![CDATA[
			import weave.Weave;
			import weave.api.getCallbackCollection;
			import weave.api.registerLinkableChild;
			import weave.api.ui.IVisTool;
			import weave.core.LinkableVariable;
			import weave.data.KeySets.KeySet;
			import weave.ui.DocumentSummaryComponent;
			import weave.ui.SelectableAttributesCheckBoxList;
			import weave.utils.ColumnUtils;
			import weave.utils.DocumentSummaryEvent;
			import weave.visualization.plotters.DraggableScatterPlotPlotter;
			
			WeaveAPI.ClassRegistry.registerImplementation(IVisTool, DraggableScatterPlotTool, "Document Map");
			
			[Bindable]
			public var plotter:DraggableScatterPlotPlotter = null;
			
			private var _probe:KeySet = Weave.defaultProbeKeySet;
			
			override protected function inConstructor():void
			{
				super.inConstructor();
				
				// lock dynamic objects into place
				plotter = initializePlotters(DraggableScatterPlotPlotter, false);
				visualization.plotManager.enableFixedAspectRatio.value = true;
				
				visualization.enableZoomAndPan.value = false;
				
				visualization.enableAutoZoomXToNiceNumbers.value = false;
				visualization.enableAutoZoomYToNiceNumbers.value = false;
				
				getCallbackCollection(plotter).addGroupedCallback(this, handlePanelTitleChange, true);
				
				visualization.plotManager.marginBottom.value = "0";
				visualization.plotManager.marginTop.value    = "0";
				visualization.plotManager.marginLeft.value   = "0";
				visualization.plotManager.marginRight.value  = "0";
				
				visualization.addEventListener(DocumentSummaryEvent.DISPLAY_DOCUMENT, showDocumentToolTip);
				visualization.addEventListener(DocumentSummaryEvent.HIDE_DOCUMENT, hideDocumentToolTip);
				visualization.addEventListener(DocumentSummaryEvent.OPEN_DOCUMENT, openExternalDocument);
			}
			
			private function showDocumentToolTip(e:DocumentSummaryEvent):void
			{
				var imageURL:String = String(plotter.thumbnails.getValueFromKey(e.imageKey, String));
				DocumentSummaryComponent.show(e.xPos,e.yPos,e.docTitle,this,imageURL);
			}
			
			private function hideDocumentToolTip(e:DocumentSummaryEvent):void
			{
				DocumentSummaryComponent.hide();
			}
			
			private function openExternalDocument(e:DocumentSummaryEvent):void
			{
				var docLink:String = plotter.docLinks.getValueFromKey(e.imageKey, String);
				if( !docLink )
					return;
				if( ExternalInterface.available )
				{
					try{
						ExternalInterface.call("open", docLink, "_blank", "width=800,height=800,left=100,top=200");
					}
					catch(e:Error) 
					{
					}
				}
			}
			
			override public function initSelectableAttributes(input:Array):void
			{
				ColumnUtils.initSelectableAttributes([plotter.dataX, plotter.dataY, plotter.fill.color], input);
			}
			
			public const attributesToIncludeInProbe:LinkableVariable = registerLinkableChild(this, new LinkableVariable(Array, null, null), handleAttributesToIncludeInProbe, true);
			private function handleAttributesToIncludeInProbe():void
			{
				var columns:Array = SelectableAttributesCheckBoxList.getSelectedAttributeColumns(this, attributesToIncludeInProbe);
				visualization.additionalProbeColumns = columns;
			}
			[Deprecated] public function set includeToolAttributesInProbe(value:Boolean):void
			{
				attributesToIncludeInProbe.setSessionState(value ? getSelectableAttributeNames() : []);
			}
			
			override public function get defaultPanelTitle():String
			{
				return lang("DocMap");
			}
			
			override protected function childrenCreated():void
			{
				super.childrenCreated();
				
				_probe.addImmediateCallback(this, updateTopicProbe);
			}
			
			private function updateTopicProbe():void
			{
				if( _probe.keys.length == 1 )
					plotter.probedKey = _probe.keys[0];
				else
					plotter.probedKey = null;
			}
			
			public function createLegend():void
			{
				var sizeBinLegendTool:SizeBinLegendTool = Weave.root.requestObject(null, SizeBinLegendTool, false);
				sizeBinLegendTool.dynamicScatterPlotTool.globalName = Weave.root.getName(this);
			}
			
			public function resetMovedPoints():void
			{
				plotter.resetMovedDataPoints();
			}
			
		]]>
	</mx:Script>
	<editorFactory><mx:Component><ui:ControlPanel>
									 <mx:Script>
										 <![CDATA[
											 import weave.api.linkBindableProperty;
											 import weave.compiler.StandardLib;
											 import weave.core.UIUtils;
											 import weave.visualization.plotters.RegressionLinePlotter;
										 ]]>
									 </mx:Script>
									 <mx:VBox id="VizControlsPanel" label="{lang('Visualization Controls')}">
										 <editors:DraggableScatterPlotEditor id="plotEditor" width="100%" creationComplete="plotEditor.setTarget(outerDocument.plotter)"/>
									 </mx:VBox>
									 <mx:VBox id="AdvancedPanel" label="{lang('Advanced')}">
										 <mx:Button label="{lang('Show legend')}" click="outerDocument.createLegend()"/>
										 <mx:Button label="{lang('Reset Moved Points')}" click="outerDocument.resetMovedPoints()"/>
										 
										 <ui:SelectableAttributesCheckBoxList id="selectedAttrList" creationComplete="selectedAttrList.setup(outerDocument, outerDocument.attributesToIncludeInProbe)"/>
										 
									 </mx:VBox>
								 </ui:ControlPanel></mx:Component></editorFactory>
</SimpleVisTool>
