<SimpleVisTool xmlns="weave.visualization.tools.*" 
	     xmlns:mx="http://www.adobe.com/2006/mxml"
	     xmlns:ui="weave.ui.*" 
		 xmlns:userControls="weave.ui.userControls.*"
		 layout="vertical">
		<mx:VBox>

		<mx:Button id="reinitButton" label="Launch External Tool" click="reloadCytoscape()"/>
		<mx:Button id="raiseButton" label="Focus External Tool" enabled="{_cytoscapeReady}" click="raiseCytoscape()"/>

		</mx:VBox>
		
	
	<mx:Script>
		<![CDATA[
			import weave.Weave;
			import weave.api.WeaveAPI;
			import weave.api.data.IKeySet;
			import weave.api.data.IQualifiedKey;
			import weave.api.data.IAttributeColumn;
			import weave.api.getCallbackCollection;
			import weave.api.graphs.IGraphAlgorithm;
			import weave.api.linkBindableProperty;
			import weave.api.linkSessionState;
			import weave.api.primitives.IBounds2D;
			import weave.api.registerLinkableChild;
			import weave.api.registerDisposableChild;
			import weave.api.newDisposableChild;
			import weave.api.data.ColumnMetadata;
			import weave.api.ui.IVisTool;
			import weave.core.LinkableBoolean;
			import weave.core.LinkableString;
			import weave.core.LinkableNumber;
			import weave.data.AttributeColumns.AlwaysDefinedColumn;
			import weave.data.AttributeColumns.DynamicColumn;
			import weave.data.CSVParser;
			import weave.data.KeySets.KeySet;
			import weave.data.KeySets.KeyFilter;
			import weave.data.KeySets.FilteredKeySet;
			import weave.primitives.Bounds2D;
			import mx.controls.Alert;
			import flash.external.ExternalInterface;
			import flash.utils.Dictionary;
			import flash.utils.Timer;
			import flash.events.TimerEvent;

			// Node columns
			public const nodeColorColumn:DynamicColumn = registerLinkableChild(this, new DynamicColumn(IAttributeColumn), null);
			public const nodeLabelColumn:DynamicColumn = registerLinkableChild(this, new DynamicColumn(), null);
			public const nodeRadiusColumn:DynamicColumn = registerLinkableChild(this, new DynamicColumn(), null);
			// Edge columns
			public const edgeSourceColumn:DynamicColumn = registerLinkableChild(this, new DynamicColumn(IAttributeColumn), null);
			public const edgeTargetColumn:DynamicColumn = registerLinkableChild(this, new DynamicColumn(IAttributeColumn), null);
			public const edgeLabelColumn:DynamicColumn = registerLinkableChild(this, new DynamicColumn(IAttributeColumn), null);
			public const edgeThicknessColumn:DynamicColumn = registerLinkableChild(this, new DynamicColumn(), null);
			public const edgeColorColumn:DynamicColumn = registerLinkableChild(this, new DynamicColumn(IAttributeColumn), null);
			public const edgeWeightColumn:DynamicColumn = registerLinkableChild(this, new DynamicColumn(IAttributeColumn), null);
			
			// General configuration
			public const layoutSeed:LinkableNumber = registerLinkableChild(this, new LinkableNumber(0), handleGraphLayoutChange);
			public const layoutType:LinkableString = registerLinkableChild(this, new LinkableString("ForceDirected"), handleGraphLayoutChange);
			private const layouts:Array = ["ForceDirected", "Circle", "Radial", "Tree"];

			private var _subset:KeyFilter = Weave.defaultSubsetKeyFilter;
			private var _selection:KeySet = Weave.defaultSelectionKeySet;
			private var _probe:KeySet = Weave.defaultProbeKeySet;				

			WeaveAPI.registerImplementation(IVisTool, CytoscapeWebTool, "Cytoscape-Web Tool");
			private var _toolName:String;

			// Scratchspace for prepping the data to be sent to CytoscapeWeb
	
			private var _edgeKeyType:String;
			private var _nodeKeyType:String;
			private var _primitiveEdges:Object;
			private var _primitiveNodes:Object;
			private var _primitiveLayout:Object;
			public var _nodeFilteredKeys:FilteredKeySet = newDisposableChild(this, FilteredKeySet);
			public var _edgeFilteredKeys:FilteredKeySet = newDisposableChild(this, FilteredKeySet);

			private var _deferredFuncs:Dictionary = new Dictionary();

			[Bindable] public var _cytoscapeBlocked:Boolean = false;
			[Bindable] public var _cytoscapeReady:Boolean = false;

			override protected function constructor():void
			{
				super.constructor();
				_nodeFilteredKeys.keyFilter.globalName = Weave.DEFAULT_SUBSET_KEYFILTER;
				_edgeFilteredKeys.keyFilter.globalName = Weave.DEFAULT_SUBSET_KEYFILTER;
				_nodeFilteredKeys.setColumnKeySources([nodeLabelColumn, nodeColorColumn, nodeRadiusColumn]);
				_edgeFilteredKeys.setColumnKeySources([edgeSourceColumn, edgeTargetColumn, edgeThicknessColumn, edgeColorColumn, edgeWeightColumn]);

				_edgeFilteredKeys.addImmediateCallback(this, handleEdgeColumnChange);
				_nodeFilteredKeys.addImmediateCallback(this, handleNodeColumnChange);
			}
			public function cytoscapeReady():void
			{
				_cytoscapeReady = true;
				_cytoscapeBlocked = false;

				// Process all our deferred functions.
				for (var key:Object in _deferredFuncs)
				{
					var func:Function = key as Function;
					if (func != null)
						func();
				}

				_deferredFuncs = new Dictionary(); // Clear the deferred functions.
			}

			private function raiseCytoscape():void
			{
				ExternalInterface.call(
				"function (weaveID, toolname) {\
					var weave = weaveID ? document.getElementById(weaveID) : document;\
					weave.external_tools[toolname].focus();\
					}", 
						ExternalInterface.objectID, _toolName);
			}
			private function launchTimeout(event:TimerEvent):void
			{
				if (!_cytoscapeReady)
				{
					_cytoscapeBlocked = true;
					Alert.show(lang("This external tool failed to load. Try disabling your popup blocker for this site to prevent this from happening in the future."), _toolName + " " + lang("Error"), Alert.OK);
				}
			}
			private function reloadCytoscape():void
			{	
				_cytoscapeBlocked = false;
				_cytoscapeReady = false;
				launchCytoscape();
				handleGraphLayoutChange();
				handleEdgeColumnChange();
				handleNodeColumnChange();
			}
			private function launchCytoscape():void
			{
				var windowFeatures:String = "menubar=no,status=no,toolbar=no";
				ExternalInterface.call(
				"function (weaveID, toolname, url, name, features) {\
				 var weave = weaveID ? document.getElementById(weaveID) : document;\
				 if (weave.external_tools == undefined) weave.external_tools = {};\
				 weave.external_tools[toolname] = window.open(url, toolname, features);\
				}", 
					ExternalInterface.objectID, _toolName, "CytoscapeWebPopout.html", _toolName, windowFeatures);

				var launchTimer:Timer = new Timer(5000, 1);
				launchTimer.addEventListener(TimerEvent.TIMER, launchTimeout);
				launchTimer.start();
			}


			private function updateProbeChange():void
			{
				ExternalInterface.call(
					"function (weaveID, toolname, elements) {\
						var weave = weaveID ? document.getElementById(weaveID) : document;\
						weave.external_tools[toolname].probe(elements);\
						}",
						ExternalInterface.objectID, _toolName, _probe.keys);
			}
			private function updateSelectionChange():void
			{
				ExternalInterface.call(
					"function (weaveID, toolname, elements) {\
						var weave = weaveID ? document.getElementById(weaveID) : document;\
						weave.external_tools[toolname].select(elements);\
						}",
						ExternalInterface.objectID, _toolName, _selection.keys);
			}

			private const _networkSchema:Object = {
					nodes: [{name: "label", type: "string", defValue: ""}, 
							{name: "keyType", type: "string"}, 
							{name: "localName", type: "string"},
							{name: "color", type: "string", defValue: ""},
							{name: "radius", type: "string", defVaue: 30}],
					edges: [{name: "label", type: "string", defValue: ""},
							{name: "keyType", type: "string"}, 
							{name: "localName", type: "string"},
							{name: "color", type: "string", defValue: ""},
							{name: "thickness", type: "number", defValue: 5},
							{name: "weight", type: "number", defValue: 1}]
			};

			private const nodePropertyMappings:Object = {
				label:{column:nodeLabelColumn, type:String},
				color:{column:nodeColorColumn, type:String},
				radius:{column:nodeRadiusColumn, type:Number}
			};

			private const edgePropertyMappings:Object = {
				label:{column:edgeLabelColumn, type:String},
				source:{column:edgeSourceColumn, type:String, required:true},
				target:{column:edgeTargetColumn, type:String, required:true},
				color:{column:edgeColorColumn, type:String},
				thickness:{column:edgeThicknessColumn, type:Number},
				weight:{column:edgeWeightColumn, type:Number}
			};
			private function buildPrimitiveElements(keyset:IKeySet, mapping:Object):Array
			{
				var elements:Array = [];

				var keys:Array = keyset.keys;
				var keys_len = keys.length;
				var key_idx:int;

				for (key_idx = 0; key_idx < keys_len; key_idx++)
				{
					var element:Object = {};
					var key:IQualifiedKey;
					key = keys[key_idx];

					// Fixed element properties
					element.keyType = key.keyType;
					element.localName = key.localName;

					for (var prop:String in mapping)
					{
						element[prop] = mapping[prop].column.getValueFromKey(key, mapping[prop].type);

						// If the element is invalid (missing a required field),
						// set it to null so we know not to add it.
						if ((element[prop] == null) && (mapping[prop].required == true))
						{
							element = null;
							break;
						}
					}
					
					if (element != null)
					{
						elements.push(element);
					}
				}

				return elements;
			}
			private function handleNodeColumnChange():void
			{
				_primitiveNodes = buildPrimitiveElements(_nodeFilteredKeys, nodePropertyMappings);
				_nodeKeyType =  nodeColorColumn.getMetadata(ColumnMetadata.KEY_TYPE) ||
								nodeLabelColumn.getMetadata(ColumnMetadata.KEY_TYPE) ||
								nodeRadiusColumn.getMetadata(ColumnMetadata.KEY_TYPE);

				sendNetworkToCytoscape();
			}

			private function handleEdgeColumnChange():void
			{
				/* If edgesource and edgetarget don't share a common keytype, don't bother rebuilding the edges; the result will be garbage. */
				var srcKeyType:String = edgeSourceColumn.getMetadata(ColumnMetadata.KEY_TYPE);
				var targetKeyType:String = edgeTargetColumn.getMetadata(ColumnMetadata.KEY_TYPE);
				if (srcKeyType != targetKeyType) return;
				
				_edgeKeyType = srcKeyType;
				_primitiveEdges = buildPrimitiveElements(_edgeFilteredKeys, edgePropertyMappings);

				sendNetworkToCytoscape();
			}

			private function sendNetworkToCytoscape():void
			{

				if (!_cytoscapeReady)
				{
					_deferredFuncs[sendNetworkToCytoscape] = true;
					return;
				}
				if (_primitiveNodes == null || _primitiveEdges == null)
					return;
				var parameters:Object = {};
				var element_to_key_types:Object = {nodes: _nodeKeyType, edges: _edgeKeyType};
				var primitiveElements:Array = _primitiveNodes.concat(_primitiveEdges);
				parameters.dataSchema = _networkSchema;
				parameters.layout = _primitiveLayout;
				ExternalInterface.call(
					"function (weaveID, toolname, records, element_to_key_types, parameters) {\
						var weave = weaveID ? document.getElementById(weaveID) : document;\
						weave.external_tools[toolname].load_data(records, element_to_key_types);\
						weave.external_tools[toolname].launch(parameters);\
						}",
						ExternalInterface.objectID, _toolName, primitiveElements, element_to_key_types, parameters);
			}

			private function handleGraphLayoutChange():void
			{
				_primitiveLayout = {name: layoutType.value, options: {seed: layoutSeed.value}};
				ExternalInterface.call(
					"function (weaveID, toolname, layout) {\
						var weave = weaveID ? document.getElementById(weaveID) : document;\
						weave.external_tools[toolname].vis.layout(layout);\
						}",
						ExternalInterface.objectID, _toolName, _primitiveLayout);
			}


			

			override protected function childrenCreated():void
			{
				super.childrenCreated();

				nodeColorComponent.dynamicObject = nodeColorColumn;
				nodeRadiusComponent.dynamicObject = nodeRadiusColumn;
				nodeLabelComponent.dynamicObject = nodeLabelColumn;
				edgeSourceComponent.dynamicObject = edgeSourceColumn;
				edgeTargetComponent.dynamicObject = edgeTargetColumn;
				edgeThicknessComponent.dynamicObject = edgeThicknessColumn;
				edgeLabelComponent.dynamicObject = edgeLabelColumn;
				edgeWeightComponent.dynamicObject = edgeWeightColumn;
				
				_probe.addImmediateCallback(this, updateProbeChange);
				_selection.addImmediateCallback(this, updateSelectionChange);
				_toolName = WeaveAPI.globalHashMap.getName(this);
			}
			
			/*
			override public function getSelectableAttributeNames():Array
			{
				return [lang("Color"), lang("Node IDs"), lang("Label"), lang("Edge Source IDs"), lang("Edge Target IDs"), lang("Edge Color Column")];
			}
			*/

		]]>
	</mx:Script>
		<ui:ControlPanel>
		<mx:VBox id="attributesPanel" label="{lang('Attributes for Graph')}">
			<ui:DynamicColumnComponent visTool="{this}" id="nodeLabelComponent" label="{lang('Node Labels')}"/>
			<ui:DynamicColumnComponent visTool="{this}" id="nodeColorComponent" label="{lang('Node Color')}"/> 
			<ui:DynamicColumnComponent visTool="{this}" id="nodeRadiusComponent" label="{lang('Node Size')}"/> 
			<ui:DynamicColumnComponent visTool="{this}" id="edgeSourceComponent" label="{lang('Edge Sources')}"/>
			<ui:DynamicColumnComponent visTool="{this}" id="edgeTargetComponent" label="{lang('Edge Targets')}"/>
			<ui:DynamicColumnComponent visTool="{this}" id="edgeThicknessComponent" label="{lang('Edge Thickness')}"/>
			<ui:DynamicColumnComponent visTool="{this}" id="edgeLabelComponent" label="{lang('Edge Labels')}"/>
			<ui:DynamicColumnComponent visTool="{this}" id="edgeWeightComponent" label="{lang('Edge Weight')}"/>
		</mx:VBox>
		<mx:VBox id="VizControlsPanel" label="{lang('Visualization Controls')}">
		 	<mx:HBox>
		 		<mx:Label text="{lang('Layout Method')}"/>
		 		<mx:ComboBox id="layoutCombo" 
				creationComplete="linkBindableProperty(this.layoutType, event.target, 'selectedItem')"
				dataProvider="{this.layouts}"/>
			</mx:HBox>
			<mx:HBox>
				<mx:Label text="{lang('Radius Size')}"
						  toolTip="{lang('Use this option to control the default size of the each node in the graph.')}"/>
				<mx:NumericStepper id="numRadiusSize" minimum="1"/>
			</mx:HBox>

			 <mx:CheckBox id="undirectedCheckBox" label="{lang('Undirected edges.')}" 
				toolTip="{lang('Use this option if you want your graph data to be assumed as undirected.')}"/> 
		</mx:VBox>
	</ui:ControlPanel>
</SimpleVisTool>
