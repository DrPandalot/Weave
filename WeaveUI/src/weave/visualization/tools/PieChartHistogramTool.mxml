<?xml version="1.0" encoding="utf-8"?>
<!--
/*
    Weave (Web-based Analysis and Visualization Environment)
    Copyright (C) 2008-2011 University of Massachusetts Lowell

    This file is a part of Weave.

    Weave is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License, Version 3,
    as published by the Free Software Foundation.

    Weave is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with Weave.  If not, see <http://www.gnu.org/licenses/>.
*/
-->
<SimpleVisTool xmlns="weave.visualization.tools.*" 
	     xmlns:mx="http://www.adobe.com/2006/mxml"
		 xmlns:ui="weave.ui.*"
		 xmlns:userControls="weave.ui.userControls.*"
	     layout="absolute">
	<mx:Script>
		<![CDATA[
			import weave.api.getCallbackCollection;
			import weave.api.linkBindableProperty;
			import weave.api.registerLinkableChild;
			import weave.api.ui.IVisTool;
			import weave.core.LinkableVariable;
			import weave.core.UIUtils;
			import weave.data.AttributeColumns.FilteredColumn;
			import weave.utils.ColumnUtils;
			import weave.visualization.plotters.PieChartHistogramPlotter;

			WeaveAPI.ClassRegistry.registerImplementation(IVisTool, PieChartHistogramTool, "Pie Chart Histogram");
			
			public var _plotter:PieChartHistogramPlotter = null;
			
			override protected function constructor():void
			{
				super.constructor();
				// lock dynamic objects into place
				_plotter = initializePlotters(PieChartHistogramPlotter, false);
				
				visualization.plotManager.enableAutoZoomToExtent.value = true;
				visualization.plotManager.enableFixedAspectRatio.value = true;
				
				
				getCallbackCollection(visualization.plotManager.zoomBounds).addImmediateCallback(this, invalidateAxes);
				getCallbackCollection(_plotter).addImmediateCallback(this, invalidateAxes);
				invalidateAxes();
				handleSelectAllAttrInProbe(true);//default to include all selectable attributes in tool
				
				_plotter.binnedData.addImmediateCallback(this,updateProbeColumns,true);
				
				visualization.plotManager.marginTop.value = "65";
				visualization.plotManager.marginBottom.value = "65";
				visualization.plotManager.marginLeft.value = "85";
				visualization.plotManager.marginRight.value = "85";
			}
			
			override protected function childrenCreated():void
			{
				super.childrenCreated();
				cRampEditor.colorRamp = _plotter.chartColors;
				binEditor.setTarget(_plotter.binnedData);
				linkBindableProperty(attributesToIncludeInProbe,probeChecklist,"selection");
			}
			
			public const attributesToIncludeInProbe:LinkableVariable = registerLinkableChild(this,new LinkableVariable(Array),updateProbeColumns,true);
			[Deprecated] public function set includeToolAttributesInProbe(value:Boolean):void
			{
				handleSelectAllAttrInProbe(value);
			}
			
			private function handleSelectAllAttrInProbe(setAll:Boolean):void
			{
				var attributes:Array = getSelectableAttributeNames();
				var valuesToSet:Array = [];
				if(setAll)
				{
					for each (var name:String in attributes)
					{
						valuesToSet.push(true);
					}
				}
				else
				{
					for each (var name2:String in attributes)
					{
						valuesToSet.push(false);
					}
				}
				attributesToIncludeInProbe.setSessionState(valuesToSet);
			}

			private function updateProbeColumns():void
			{
				
				/* first check to see if select all should be disabled or not */
				var attrToIncludeCheckList:Array = attributesToIncludeInProbe.getSessionState() as Array;
				if(probeColumnsCheckBox)
				{
					if (attrToIncludeCheckList && attrToIncludeCheckList.indexOf(true) >= 0)
						probeColumnsCheckBox.selected = true;
				}
				var attributes:Array = getSelectableAttributes();
				var columns:Array = [];
				
				var dataColIndex:int = attributes.indexOf((_plotter.binnedData.getInternalColumn() as FilteredColumn).internalDynamicColumn);
				if (_plotter.binnedData.getInternalColumn() && attrToIncludeCheckList[dataColIndex])
						columns.push(_plotter.binnedData.getInternalColumn());
				
				visualization.additionalProbeColumns = columns;
			}
			
			private function invalidateAxes():void
			{
				handlePanelTitleChange();
			}
			
			override public function get defaultPanelTitle():String
			{
				return lang("[Pie Chart Histogram] of {0}", ColumnUtils.getTitle(_plotter.unfilteredData));
			}
			
			
		]]>
	</mx:Script>
	<ui:ControlPanel>
		<mx:VBox label="{lang('Binning')}">
			<ui:DynamicColumnComponent label="data" creationComplete="(event.target as DynamicColumnComponent).dynamicObject = (_plotter.binnedData.getInternalColumn() as FilteredColumn).internalDynamicColumn"/>
			<ui:BinningDefinitionEditor id="binEditor"/>
		</mx:VBox>
		<mx:VBox label="{lang('Mouseover info')}">
			<ui:CheckBoxWithNestedOptions id="probeColumnsCheckBox" label="{lang('Include tool attributes in mouseover info')}"
						 change="if (UIUtils.hasFocus(probeColumnsCheckBox)) handleSelectAllAttrInProbe(probeColumnsCheckBox.selected)">
				<ui:CheckBoxList id="probeChecklist" translate="true" dataProvider="{getSelectableAttributeNames()}" />
			</ui:CheckBoxWithNestedOptions>
		</mx:VBox>
		<mx:VBox id="attributesPanel" label="{lang('Display')}">
			<ui:Indent label="{lang('Label angle')}">
				<mx:HSlider
							snapInterval="0.25" minimum="0" maximum="1" liveDragging="true" tickInterval="0.25"
							dataTipFormatFunction="{function(v:Number):String { return String(Math.round(100*v))+'%' }}"
							creationComplete="linkBindableProperty(_plotter.labelAngleRatio, event.target, 'value')"/>
			</ui:Indent>
			<mx:HBox width="100%">
				<mx:Label text="{lang('Inner radius')}"/>
				<mx:HSlider
					snapInterval="0.05" minimum="0" maximum="1" liveDragging="true" tickInterval="0.25"
					creationComplete="linkBindableProperty(_plotter.innerRadius, event.target, 'value')"/>
			</mx:HBox>
			<ui:ColorRampEditor id="cRampEditor"/>
		</mx:VBox>
	</ui:ControlPanel>
</SimpleVisTool>
