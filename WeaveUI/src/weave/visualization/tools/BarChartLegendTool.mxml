<?xml version="1.0" encoding="utf-8"?>
<!--
/*
    Weave (Web-based Analysis and Visualization Environment)
    Copyright (C) 2008-2011 University of Massachusetts Lowell

    This file is a part of Weave.

    Weave is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License, Version 3,
    as published by the Free Software Foundation.

    Weave is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with Weave.  If not, see <http://www.gnu.org/licenses/>.
*/
-->
<SimpleVisTool xmlns="weave.visualization.tools.*" 
			   xmlns:mx="http://www.adobe.com/2006/mxml"
			   xmlns:ui="weave.ui.*"
			   layout="absolute">
	<mx:Script>
		<![CDATA[
			import mx.controls.Alert;
			import mx.events.FlexEvent;
			import mx.managers.CursorManager;
			
			import weave.Weave;
			import weave.api.WeaveAPI;
			import weave.api.copySessionState;
			import weave.api.getCallbackCollection;
			import weave.api.linkBindableProperty;
			import weave.api.registerLinkableChild;
			import weave.api.ui.IPlotLayer;
			import weave.core.LinkableDynamicObject;
			import weave.core.SessionManager;
			import weave.data.AttributeColumns.DynamicColumn;
			import weave.data.AttributeColumns.FilteredColumn;
			import weave.data.AttributeColumns.ReferencedColumn;
			import weave.primitives.ColorRamp;
			import weave.ui.AttributeSelectorPanel;
			import weave.ui.DraggablePanel;
			import weave.utils.ColumnUtils;
			import weave.utils.CustomCursorManager;
			import weave.visualization.layers.SelectablePlotLayer;
			import weave.visualization.plotters.BarChartLegendPlotter;
			import weave.visualization.plotters.ColorBinLegendPlotter;
			
			[Bindable] private var _barLegendPlotter:BarChartLegendPlotter;
			private var _barLegendLayerName:String;
			private const _colorLegendLayerName:String = "color legend";
			private var _colorLegendLayer:SelectablePlotLayer;
			private var _colorLegendPlotter:ColorBinLegendPlotter;
			
			override protected function constructor():void
			{
				super.constructor();
				// lock dynamic objects into place
				
				// create bar segment legend
				_barLegendPlotter = initDefaultPlotter(BarChartLegendPlotter);
				_barLegendLayerName = visualization.layers.getName(plotLayer);
				
				// create global color ramp legend
				_colorLegendLayer = visualization.layers.requestObject(_colorLegendLayerName, SelectablePlotLayer, true);
				_colorLegendPlotter = _colorLegendLayer.getDynamicPlotter().requestLocalObject(ColorBinLegendPlotter, true);
				_colorLegendLayer.useTextBitmapFilters.value = true;
				
				visualization.enableAutoZoomToExtent.value = true;
				visualization.enableZoomAndPan.value = false;
				
				visualization.topMarginClickCallbacks.addImmediateCallback(this, handleMarginLabelClick);
				_colorLegendPlotter.dynamicColorColumn.addGroupedCallback(this, updateMarginLabel, true);

				panelWidth.value = "20%";
				panelHeight.value = "50%";

				visualization.marginBottom.value = 5;
				visualization.marginTop.value    = DEFAULT_MARGIN_TOP;
				visualization.marginLeft.value   = 5;
				visualization.marginRight.value  = 5;
				
				Weave.properties.axisFontFamily.addGroupedCallback(this,updateMarginLabel);
				Weave.properties.axisFontColor.addGroupedCallback(this,updateMarginLabel);
				Weave.properties.axisFontSize.addGroupedCallback(this,updateMarginLabel);
				Weave.properties.axisFontUnderline.addGroupedCallback(this, updateMarginLabel);
			}
			override protected function childrenCreated():void
			{
				super.childrenCreated();
				visualization.marginTop.addGroupedCallback(this, handleMarginChange);
				linkBindableProperty(visualization.marginTop, marginLabel, "height");
				linkBindableProperty(_barLegendPlotter.maxColumns, maxCols, 'value');
				linkBindableProperty(_colorLegendPlotter.maxColumns, maxCols, 'value');
				linkBindableProperty(_colorLegendPlotter.reverseOrder, chkReverseOrder, 'selected');
				linkBindableProperty(_barLegendPlotter.reverseOrder, chkReverseOrder, 'selected');
			}
			private static const DEFAULT_MARGIN_TOP:int = 25;
			private function handleMarginChange():void
			{
				marginLabelCheckBox.selected = visualization.marginTop.value != 0;
			}
			
			public const dynamicBarChartTool:LinkableDynamicObject = registerLinkableChild(this, new LinkableDynamicObject(CompoundBarChartTool), handleBarChartChange, true);
			
			private function get barChart():CompoundBarChartTool
			{
				return dynamicBarChartTool.internalObject as CompoundBarChartTool;
			}
			
			private function handleBarChartChange():void
			{
				// update the legend properties to reflect the new bar chart properties.
				
				if (barChart != null)
				{
					copySessionState(barChart._plotter.chartColors, _barLegendPlotter.chartColors);
					copySessionState(barChart._plotter.heightColumns, _barLegendPlotter.columns);
				}
				
				if (_barLegendPlotter.columns.getObjects().length == 1 || barChart == null)
				{
					// show global color ramp legend
					_colorLegendLayer.layerIsVisible.value = true;
					plotLayer.layerIsVisible.value = false;
				}
				else
				{
					// show bar segment legend
					_colorLegendLayer.layerIsVisible.value = false;
					plotLayer.layerIsVisible.value = true;
				}
				
				updateMarginLabel();
			}
			
			private function handleMarginLabelClick():void
			{
				if (_barLegendPlotter.columns.getObjects().length == 1 || barChart == null)
					AttributeSelectorPanel.openDefaultSelector(_colorLegendPlotter.dynamicColorColumn);
				else
					AttributeSelectorPanel.openDefaultSelector(barChart._plotter.heightColumns);
			}
			
			[Bindable]
			private var marginLabelText:String = "";
			
			private function updateMarginLabel():void
			{
				if (!parent)
					return callLater(updateMarginLabel);
				
				if (_barLegendPlotter.columns.getObjects().length <= 1 || barChart == null)
				{
					marginLabelText = ColumnUtils.getTitle(_colorLegendPlotter.dynamicColorColumn);
					visualization.additionalProbeColumns = WeaveAPI.SessionManager.getLinkableDescendants(_colorLegendPlotter.dynamicColorColumn, ReferencedColumn);
				}
				else
				{
					marginLabelText = "Bar Segment Colors";
					visualization.additionalProbeColumns = null;
				}
				marginLabel.setStyle("fontFamily", Weave.properties.axisFontFamily.value);
				marginLabel.setStyle("color", Weave.properties.axisFontColor.value);
				marginLabel.setStyle("fontSize", Weave.properties.axisFontSize.value);
				if(Weave.properties.axisFontUnderline.value) marginLabel.setStyle("textDecoration", "underline");
				else marginLabel.setStyle("textDecoration", "none");
			}
			
			override protected function handlePanelTitleChange():void
			{
				super.handlePanelTitleChange();
				if (!panelTitle.value)
					title = "Bar Chart Legend";
			}
			
		]]>
	</mx:Script>
	
	<mx:TextArea id="marginLabel"
				fontWeight="bold" click="handleMarginLabelClick()" 
				x="0" y="0" paddingLeft="5" paddingTop="5" paddingRight="5"
				text="{marginLabelText}" width="100%"
				rollOver="CustomCursorManager.showCursor(CustomCursorManager.LINK_CURSOR)"
				horizontalScrollPolicy="off" verticalScrollPolicy="off"
				rollOut="CursorManager.removeAllCursors()"
				wordWrap="true" selectable="false" editable="false"
				borderThickness="0" backgroundAlpha="0"
			  	toolTip="{marginLabelText} &#13;&#09;Click here to select the attribute(s) used for the bars."/>
	
	<ui:ControlPanel>
		<mx:VBox id="attributesPanel" label="Attributes for Color Bin Legend">
			<mx:CheckBox id="marginLabelCheckBox" 
						 label="Show legend attribute name" 
						 change="visualization.marginTop.value = marginLabelCheckBox.selected ? DEFAULT_MARGIN_TOP : 0" 
						 toolTip="Click to hide the title of the Legend."/>
			<mx:HBox>
				<mx:Label text="Number of columns"/>
				<mx:NumericStepper id="maxCols" minimum="1"
								   toolTip="This specifies the maximum number of columns to show in a row in the legend."/>
			</mx:HBox>
			<mx:CheckBox label="Reverse item order" id="chkReverseOrder"
						 toolTip="Check this box to reverse the ordering of the items in this legend."/>
		</mx:VBox>
	</ui:ControlPanel>
</SimpleVisTool>
