<SimpleVisTool xmlns="weave.visualization.tools.*" 
	     xmlns:mx="http://www.adobe.com/2006/mxml"
	     xmlns:ui="weave.ui.*" 
		 xmlns:userControls="weave.ui.userControls.*"
		 layout="vertical">
		<mx:VBox>

		<!-- <mx:Button id="reinitButton" label="Launch External Tool" click="reloadCytoscape()"/>
		<mx:Button id="raiseButton" label="Focus External Tool" enabled="{_cytoscapeReady}" click="raiseCytoscape()"/> -->

		</mx:VBox>
		
	
	<mx:Script>
		<![CDATA[
			import weave.Weave;
			import weave.api.WeaveAPI;
			import weave.api.data.IKeySet;
			import weave.api.data.IQualifiedKey;
			import weave.api.data.IAttributeColumn;
			import weave.api.getCallbackCollection;
			import weave.api.graphs.IGraphAlgorithm;
			import weave.api.linkBindableProperty;
			import weave.api.linkSessionState;
			import weave.api.primitives.IBounds2D;
			import weave.api.registerLinkableChild;
			import weave.api.registerDisposableChild;
			import weave.api.data.ColumnMetadata;
			import weave.api.ui.IVisTool;
			import weave.core.LinkableBoolean;
			import weave.core.LinkableString;
			import weave.core.LinkableNumber;
			import weave.data.AttributeColumns.AlwaysDefinedColumn;
			import weave.data.AttributeColumns.DynamicColumn;
			import weave.data.KeySets.KeySet;
			import weave.primitives.Bounds2D;
			import weave.services.WeaveRenderServlet;
			import weave.services.addAsyncResponder;
			import mx.rpc.AsyncToken;
			import mx.rpc.events.FaultEvent;
			import mx.rpc.events.ResultEvent;
			import mx.controls.Alert;
			import flash.external.ExternalInterface;
			import flash.utils.Dictionary;
			import flash.utils.Timer;
			import flash.display.Loader;
			import flash.events.TimerEvent; 

			public const labelColumn:DynamicColumn = registerLinkableChild(this, new DynamicColumn(IAttributeColumn), handleNodeColumnChange);
			private const labelDataField:String = "nodeLabels";
			public const edgeSourceColumn:DynamicColumn = registerLinkableChild(this, new DynamicColumn(IAttributeColumn), handleEdgeColumnChange);
			private const edgeSourceDataField:String = "edgeSrc";
			public const edgeTargetColumn:DynamicColumn = registerLinkableChild(this, new DynamicColumn(IAttributeColumn), handleEdgeColumnChange);
			private const edgeTargetDataField:String = "edgeDestId";
			
			public const layoutSeed:LinkableNumber = registerLinkableChild(this, new LinkableNumber(0), handleGraphLayoutChange);
			public const layoutType:LinkableString = registerLinkableChild(this, new LinkableString("ForceDirected"), handleGraphLayoutChange);



			//private var _subset:KeyFilter = Weave.defaultSubsetKeyFilter;
			private var _selection:KeySet = Weave.defaultSelectionKeySet;
			private var _probe:KeySet = Weave.defaultProbeKeySet;				

			public var _renderServlet:WeaveRenderServlet = new WeaveRenderServlet(Weave.properties.renderServiceURL.value);

			public var _contextId:String = null;
			public var _lastRawImage:Loader = null;

			WeaveAPI.registerImplementation(IVisTool, ServerGraphTool, lang("JGraphX Tool"));

			private function renderPNG(content:String):void
			{

			}

			private function updateProbeChange():void
			{

			}

			private function updateSelectionChange():void
			{ 

			}


			private function handleGraphLayoutChange():void
			{

			}

			private function handleColumnChange():void
			{
				var dataFieldNames:Array = [labelDataField, edgeSourceDataField, edgeTargetDataField];
				var dataFieldValues:Array = ["8", "3", "4"]; // Todo, don't hardcode this.
				if (_contextId)
					_renderServlet.setData(_contextId, dataFieldNames, dataFieldValues);

			}

			private function handleNodeColumnChange():void
			{
				handleColumnChange();
			}
			private function handleEdgeColumnChange():void
			{
				handleColumnChange();
			}

			private function setContextId(event:ResultEvent, user:Object):void
			{
				_contextId = event.result as String;
			}
			override protected function childrenCreated():void
			{
				super.childrenCreated();

				labelComponent.dynamicObject = labelColumn;
				edgeSourceComponent.dynamicObject = edgeSourceColumn;
				edgeTargetComponent.dynamicObject = edgeTargetColumn;

				
				_probe.addImmediateCallback(this, updateProbeChange);
				_selection.addImmediateCallback(this, updateSelectionChange);
				var contextToken:AsyncToken  = _renderServlet.getRenderContext("");
				addAsyncResponder(contextToken, setContextId, null, null);

			}
			/*
			override public function getSelectableAttributeNames():Array
			{
				return [lang("Color"), lang("Node IDs"), lang("Label"), lang("Edge Source IDs"), lang("Edge Target IDs"), lang("Edge Color Column")];
			}
			*/

		]]>
	</mx:Script>
		<ui:ControlPanel>
		<mx:VBox id="attributesPanel" label="{lang('Attributes for Graph')}">
			<!-- <ui:DynamicColumnComponent visTool="{this}" id="colorComponent" label="{lang('Node Color')}"/>  -->
			<!-- <ui:DynamicColumnComponent visTool="{this}" id="nodeComponent" label="{lang('Nodes')}"/> -->
			<!-- <ui:DynamicColumnComponent visTool="{this}" id="nodeRadiusComponent" label="{lang('Node Size')}"/> -->
			<ui:DynamicColumnComponent visTool="{this}" id="labelComponent" label="{lang('Node Labels')}"/>
			<ui:DynamicColumnComponent visTool="{this}" id="edgeSourceComponent" label="{lang('Edge Sources')}"/>
			<ui:DynamicColumnComponent visTool="{this}" id="edgeTargetComponent" label="{lang('Edge Targets')}"/>
		</mx:VBox>
		<!-- <mx:VBox id="VizControlsPanel" label="{lang('Visualization Controls')}">
			<mx:HBox>
				<mx:Label text="{lang('Radius Size')}"
						  toolTip="{lang('Use this option to control the default size of the each node in the graph.')}"/>
				<mx:NumericStepper id="numRadiusSize" minimum="1"/>
			</mx:HBox>

			 <mx:CheckBox id="undirectedCheckBox" label="{lang('Undirected edges.')}" 
				toolTip="{lang('Use this option if you want your graph data to be assumed as undirected.')}"/> 
		</mx:VBox>	-->
	</ui:ControlPanel>
</SimpleVisTool>
