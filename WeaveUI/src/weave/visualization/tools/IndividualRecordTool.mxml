<?xml version="1.0" encoding="utf-8"?>
<tools:SimpleVisTool xmlns:mx="http://www.adobe.com/2006/mxml"
					 xmlns:tools="weave.visualization.tools.*"
					 xmlns:ui="weave.ui.*"
					 width="400" height="300" layout="vertical">
	<mx:HBox id="profileArea" width="100%" height="30%">
		<mx:Canvas id="profileImage" width="30%" height="100%" backgroundColor="0xF443DC"/>
		<mx:Box id="personalInformationBox" width="70%" height="100%" direction="vertical">
			<mx:Label id="infoLine1" text="test1"/>
			<mx:Label id="infoLine2" text="test2"/>
			<mx:Label id="infoLine3" text="test3"/>
			<mx:Label id="infoLine4" text="test4"/>
			<mx:Label id="infoLine5" text="test5"/>
		</mx:Box>
		<mx:Button id="lockButton" label="{lang('Lock Record')}" click="lockRecordClick(event)"/>
	</mx:HBox>
	<mx:Script>
		<![CDATA[
			import weave.Weave;
			import weave.api.WeaveAPI;
			import weave.api.data.IAttributeColumn;
			import weave.api.linkBindableProperty;
			import weave.api.newDisposableChild;
			import weave.api.newLinkableChild;
			import weave.api.registerLinkableChild;
			import weave.api.ui.IVisTool;
			import weave.core.LinkableBoolean;
			import weave.core.LinkableNumber;
			import weave.core.LinkableString;
			import weave.data.AttributeColumns.DynamicColumn;
			import weave.data.AttributeColumns.ImageColumn;
			import weave.data.KeySets.FilteredKeySet;
			import weave.data.KeySets.KeySet;
			import weave.utils.BitmapText;
			import weave.utils.BitmapUtils;
			import weave.visualization.plotters.IndividualRecordToolPlotter;
			import weave.visualization.plotters.SimpleAxisPlotter;
			
			public const profilePicturesColumn:ImageColumn = newLinkableChild(this, ImageColumn, handlePictureChange, true);
			public const firstProfileColumn:DynamicColumn = newLinkableChild(this, DynamicColumn, columnLine1Update, true);
			public const secondProfileColumn:DynamicColumn = newLinkableChild(this, DynamicColumn, columnLine2Update, true);
			public const thirdProfileColumn:DynamicColumn = newLinkableChild(this, DynamicColumn, columnLine3Update, true);
			public const fourthProfileColumn:DynamicColumn = newLinkableChild(this, DynamicColumn, columnLine4Update, true);
			public const fifthProfileColumn:DynamicColumn = newLinkableChild(this, DynamicColumn, columnLine5Update, true);
			
			public const line1LeadingText:LinkableString = registerLinkableChild(this, new LinkableString(""), updateLine1);
			public const line2LeadingText:LinkableString = registerLinkableChild(this, new LinkableString(""), updateLine2);
			public const line3LeadingText:LinkableString = registerLinkableChild(this, new LinkableString(""), updateLine3);
			public const line4LeadingText:LinkableString = registerLinkableChild(this, new LinkableString(""), updateLine4);
			public const line5LeadingText:LinkableString = registerLinkableChild(this, new LinkableString(""), updateLine5);
			
			private var previousText1:String;
			private var previousText2:String;
			private var previousText3:String;
			private var previousText4:String;
			private var previousText5:String;
			
			public const _recordKeySubset:FilteredKeySet = newDisposableChild(this, FilteredKeySet);
			private var _selection:KeySet = Weave.defaultSelectionKeySet;
			private var _probe:KeySet = Weave.defaultProbeKeySet;	
			public const sizeAxisTickCountRequested:LinkableNumber = registerLinkableChild(this, new LinkableNumber(5), sizeAxisTickCountRequestedChanged, true);
			public const showAllLabels:LinkableBoolean = registerLinkableChild(this, new LinkableBoolean(false), updateAxes, true);
			
			public const _locked:LinkableBoolean = registerLinkableChild(this, new LinkableBoolean(false), updateLockLabel);
			
			WeaveAPI.registerImplementation(IVisTool, IndividualRecordTool, lang("Individual Record Tool"));
			
			[Bindable]
			public var _plotter:IndividualRecordToolPlotter = null;
			
			override protected function constructor():void
			{
				super.constructor();
				
				_plotter = initializePlotters(IndividualRecordToolPlotter, true);
				
				visualization.plotManager.enableAutoZoomToExtent.value = true;
				visualization.plotManager.enableFixedAspectRatio.value = true;
				visualization.enableZoomAndPan.value = false;
				
				_recordKeySubset.keyFilter.globalName = Weave.DEFAULT_SUBSET_KEYFILTER;
				
				_recordKeySubset.setColumnKeySources([profilePicturesColumn,firstProfileColumn,secondProfileColumn,thirdProfileColumn,fourthProfileColumn,fifthProfileColumn]);
				
				_recordKeySubset.addGroupedCallback(this, handleSubsetChange);
				_probe.addGroupedCallback(this, handleSubsetChange);
				_selection.addGroupedCallback(this, handleSubsetChange);
			}
			
			override protected function childrenCreated():void
			{
				super.childrenCreated();
				
				visualization.plotManager.marginTop.value = (profileArea.percentHeight+5).toString()+"%";
				visualization.plotManager.marginLeft.value = "70";
				visualization.plotManager.marginRight.value = "20";
				visualization.plotManager.marginBottom.value = "40";
				
				previousText1 = line1LeadingText.value;
				previousText2 = line1LeadingText.value;
				previousText3 = line1LeadingText.value;
				previousText4 = line1LeadingText.value;
				previousText5 = line1LeadingText.value;
				
				imageCol.dynamicObject = profilePicturesColumn;
				profileFirstCol.dynamicObject = firstProfileColumn;
				profileSecondCol.dynamicObject = secondProfileColumn;
				profileThirdCol.dynamicObject = thirdProfileColumn;
				profileFourthCol.dynamicObject = fourthProfileColumn;
				profileFifthCol.dynamicObject = fifthProfileColumn;
				
				linkBindableProperty(line1LeadingText, this.infoLine1FrontText1, "text");
				linkBindableProperty(line2LeadingText, this.infoLine1FrontText2, "text");
				linkBindableProperty(line3LeadingText, this.infoLine1FrontText3, "text");
				linkBindableProperty(line4LeadingText, this.infoLine1FrontText4, "text");
				linkBindableProperty(line5LeadingText, this.infoLine1FrontText5, "text");
			}
			
			private function updateAxes():void
			{
				var heightColumns:Array = _plotter.heightColumns.getObjects();
				
				var sortAxisTitle:String = "Testing";
				var sortAxisToolTipColumn:IAttributeColumn = _plotter.sortColumn;
				var heightAxisTitle:String = 'Year';
				var heightAxisToolTipColumn:IAttributeColumn = null;
				
				var sortAxis:SimpleAxisPlotter;
				var heightAxis:SimpleAxisPlotter;
				
				var xAxisTitle:String; // title for x axis
				var yAxisTitle:String; // title for y axis 
				
				yAxisTitle = sortAxisTitle;
				sortAxis = yAxisPlotter;
				visualization.leftMarginColumn = sortAxisToolTipColumn;
				
				heightAxis = xAxisPlotter;
				xAxisTitle = heightAxisTitle;
				visualization.bottomMarginColumn = heightAxisToolTipColumn;
				
				visualization.enableProbeLine(false, false);
				
				sortAxis.setLabelFunction(_plotter.sortAxisLabelFunction, _plotter.sortColumn);
				heightAxis.setLabelFunction(heightAxisLabelFunction, heightColumns[0]);
				
				// height axis uses automatic min,max based on data
				heightAxis.tickMinValue.value = NaN;
				heightAxis.tickMaxValue.value = NaN;
				heightAxis.forceTickCount.value = false;
				if( sizeAxisTickChange )
					heightAxis.tickCountRequested.value = sizeAxisTickCountRequested.value;
				else
					sizeAxisTickCountRequested.value = heightAxis.tickCountRequested.value;
				heightAxis.showLabels.value = true;
				
				sizeAxisTickChange = false;
				
				// sort axis automatic min,max would be -0.5, numBars-0.5.  we don't want that.
				sortAxis.tickMinValue.value = 0;
				sortAxis.tickMaxValue.value = _plotter.maxTickMarks - 1;
				sortAxis.forceTickCount.value = showAllLabels.value;
				if (showAllLabels.value)
					sortAxis.tickCountRequested.value = _plotter.maxTickMarks;
				else
					sortAxis.tickCountRequested.value = Math.min(_plotter.maxTickMarks, 11);
				sortAxis.showLabels.value = !_plotter.showLabels.value || showAllLabels.value;
				
				xAxisPlotter.setSideAxisName(xAxisTitle, 0, 0, visualization.plotManager.marginBottomNumber.value - 3, BitmapText.VERTICAL_ALIGN_BOTTOM);
				yAxisPlotter.setSideAxisName(yAxisTitle, -90, -visualization.plotManager.marginLeftNumber.value, 0, BitmapText.VERTICAL_ALIGN_TOP);
			}
			
			private function heightAxisLabelFunction(value:Number):String
			{
				//Define function.
				return null;
			}
			
			private var sizeAxisTickChange:Boolean = false;
			
			private function sizeAxisTickCountRequestedChanged():void
			{
				sizeAxisTickChange = true;
				updateAxes();
			}
			
			private function handleSubsetChange():void
			{
				if( (_selection.keys.length == 1 || _probe.keys.length == 1 || _recordKeySubset.keys.length == 1) && !_locked.value)
				{
					handlePictureChange();
					columnLine1Update();
					columnLine2Update();
					columnLine3Update();
					columnLine4Update();
					columnLine5Update();
				}
			}
			
			override public function getSelectableAttributeNames():Array
			{
				//Enter attribute names here once determined.
				return [];
			}
			override public function getSelectableAttributes():Array
			{
				//Attribute variables go here once determined.
				return [];
			}
			
			override public function get defaultPanelTitle():String
			{
				return lang("Individual Record Tool");
			}
			
			private function handlePictureChange():void
			{
				if( _recordKeySubset.keys.length == 1 && (profilePicturesColumn.getValueFromKey(_recordKeySubset.keys[0]) as BitmapData) != null)
					BitmapUtils.drawCenteredIcon(profileImage.graphics, profileImage.width/2, profileImage.height/2, profilePicturesColumn.getValueFromKey(_recordKeySubset.keys[0]) as BitmapData);
				else if( _probe.keys.length == 1 && (profilePicturesColumn.getValueFromKey(_probe.keys[0]) as BitmapData) != null)
					BitmapUtils.drawCenteredIcon(profileImage.graphics, profileImage.width/2, profileImage.height/2, profilePicturesColumn.getValueFromKey(_probe.keys[0]) as BitmapData);
				else if( _selection.keys.length == 1 && (profilePicturesColumn.getValueFromKey(_selection.keys[0]) as BitmapData) != null)
					BitmapUtils.drawCenteredIcon(profileImage.graphics, profileImage.width/2, profileImage.height/2, profilePicturesColumn.getValueFromKey(_selection.keys[0]) as BitmapData);
			}
			
			private function columnLine1Update():void
			{
				if( _recordKeySubset.keys.length == 1 && firstProfileColumn.getValueFromKey(_recordKeySubset.keys[0]) != null)
				{
					infoLine1.text = line1LeadingText.value + (firstProfileColumn.getValueFromKey(_recordKeySubset.keys[0]) as Object).toString();
					previousText1 = line1LeadingText.value;
				}
				else if( _probe.keys.length == 1 && firstProfileColumn.getValueFromKey(_probe.keys[0]) != null)
				{
					infoLine1.text = line1LeadingText.value + (firstProfileColumn.getValueFromKey(_probe.keys[0]) as Object).toString();
					previousText1 = line1LeadingText.value;
				}
				else if( _selection.keys.length == 1 && firstProfileColumn.getValueFromKey(_selection.keys[0]) != null)
				{
					infoLine1.text = line1LeadingText.value + (firstProfileColumn.getValueFromKey(_selection.keys[0]) as Object).toString();
					previousText1 = line1LeadingText.value;
				}
			}
			private function columnLine2Update():void
			{
				if( _recordKeySubset.keys.length == 1 && secondProfileColumn.getValueFromKey(_recordKeySubset.keys[0]) != null)
				{
					infoLine2.text = line2LeadingText.value + (secondProfileColumn.getValueFromKey(_recordKeySubset.keys[0]) as Object).toString();
					previousText2 = line2LeadingText.value;
				}
				else if( _probe.keys.length == 1 && secondProfileColumn.getValueFromKey(_probe.keys[0]) != null)
				{
					infoLine2.text = line2LeadingText.value + (secondProfileColumn.getValueFromKey(_probe.keys[0]) as Object).toString();
					previousText2 = line2LeadingText.value;
				}
				else if( _selection.keys.length == 1 && secondProfileColumn.getValueFromKey(_selection.keys[0]) != null)
				{
					infoLine2.text = line2LeadingText.value + (secondProfileColumn.getValueFromKey(_selection.keys[0]) as Object).toString();
					previousText2 = line2LeadingText.value;
				}
			}
			private function columnLine3Update():void
			{
				if( _recordKeySubset.keys.length == 1 && thirdProfileColumn.getValueFromKey(_recordKeySubset.keys[0]) != null)
				{
					infoLine3.text = line3LeadingText.value + (thirdProfileColumn.getValueFromKey(_recordKeySubset.keys[0]) as Object).toString();
					previousText3 = line3LeadingText.value;
				}
				else if( _probe.keys.length == 1 && thirdProfileColumn.getValueFromKey(_probe.keys[0]) != null)
				{
					infoLine3.text = line3LeadingText.value + (thirdProfileColumn.getValueFromKey(_probe.keys[0]) as Object).toString();
					previousText3 = line3LeadingText.value;
				}
				else if( _selection.keys.length == 1 && thirdProfileColumn.getValueFromKey(_selection.keys[0]) != null)
				{
					infoLine3.text = line3LeadingText.value + (thirdProfileColumn.getValueFromKey(_selection.keys[0]) as Object).toString();
					previousText3 = line3LeadingText.value;
				}
			}
			private function columnLine4Update():void
			{
				if( _recordKeySubset.keys.length == 1 && fourthProfileColumn.getValueFromKey(_recordKeySubset.keys[0]) != null)
				{
					infoLine4.text = line4LeadingText.value + (fourthProfileColumn.getValueFromKey(_recordKeySubset.keys[0]) as Object).toString();
					previousText4 = line4LeadingText.value;
				}
				else if( _probe.keys.length == 1 && fourthProfileColumn.getValueFromKey(_probe.keys[0]) != null)
				{
					infoLine4.text = line4LeadingText.value + (fourthProfileColumn.getValueFromKey(_probe.keys[0]) as Object).toString();
					previousText4 = line4LeadingText.value;
				}
				else if( _selection.keys.length == 1 && fourthProfileColumn.getValueFromKey(_selection.keys[0]) != null)
				{
					infoLine4.text = line4LeadingText.value + (fourthProfileColumn.getValueFromKey(_selection.keys[0]) as Object).toString();
					previousText4 = line4LeadingText.value;
				}
			}
			private function columnLine5Update():void
			{
				if( _recordKeySubset.keys.length == 1 && fifthProfileColumn.getValueFromKey(_recordKeySubset.keys[0]) != null)
				{
					infoLine5.text = line5LeadingText.value + (fifthProfileColumn.getValueFromKey(_recordKeySubset.keys[0]) as Object).toString();
					previousText5 = line5LeadingText.value;
				}
				else if( _probe.keys.length == 1 && fifthProfileColumn.getValueFromKey(_probe.keys[0]) != null)
				{
					infoLine5.text = line5LeadingText.value + (fifthProfileColumn.getValueFromKey(_probe.keys[0]) as Object).toString();
					previousText5 = line5LeadingText.value;
				}
				else if( _selection.keys.length == 1 && fifthProfileColumn.getValueFromKey(_selection.keys[0]) != null)
				{
					infoLine5.text = line5LeadingText.value + (fifthProfileColumn.getValueFromKey(_selection.keys[0]) as Object).toString();
					previousText5 = line5LeadingText.value;
				}
			}
			
			
			private function updateLine1():void
			{
				infoLine1.text = line1LeadingText.value + infoLine1.text.replace(previousText1,"");
				previousText1 = line1LeadingText.value;
			}
			private function updateLine2():void
			{
				infoLine2.text = line2LeadingText.value + infoLine2.text.replace(previousText2,"");
				previousText2 = line2LeadingText.value;
			}
			private function updateLine3():void
			{
				infoLine3.text = line3LeadingText.value + infoLine3.text.replace(previousText3,"");
				previousText3 = line3LeadingText.value;
			}
			private function updateLine4():void
			{
				infoLine4.text = line4LeadingText.value + infoLine4.text.replace(previousText4,"");
				previousText4 = line4LeadingText.value;
			}
			private function updateLine5():void
			{
				infoLine5.text = line5LeadingText.value + infoLine5.text.replace(previousText5,"");
				previousText5 = line5LeadingText.value;
			}
			
			protected function lockRecordClick(event:MouseEvent):void
			{
				_locked.value = ( lockButton.label == lang("Lock Record") ) ? true : false;
				if( _locked.value )
					lockButton.label = lang("Unlock Record");
				else
					lockButton.label = lang("Lock Record");
			}
			
			private function updateLockLabel():void
			{
				if( _locked.value )
					lockButton.label = lang("Unlock Record");
				else
					lockButton.label = lang("Lock Record");
			}
			
		]]>
	</mx:Script>
	<ui:ControlPanel>
		<mx:VBox id="toolOptions" label="{lang('Visualization Controls')}">
			<ui:DynamicColumnComponent id="imageCol" label="{lang('Profile image')}"/>
			<ui:DynamicColumnComponent id="profileFirstCol" label="{lang('First line')}"/>
			<ui:DynamicColumnComponent id="profileSecondCol" label="{lang('Second line')}"/>
			<ui:DynamicColumnComponent id="profileThirdCol" label="{lang('Third line')}"/>
			<ui:DynamicColumnComponent id="profileFourthCol" label="{lang('Fourth line')}"/>
			<ui:DynamicColumnComponent id="profileFifthCol" label="{lang('Fifth line')}"/>
			<mx:HBox>
				<mx:Label text="Line 1 leading text:"/>
				<mx:TextInput id="infoLine1FrontText1"/>
			</mx:HBox>
			<mx:HBox>
				<mx:Label text="Line 2 leading text:"/>
				<mx:TextInput id="infoLine1FrontText2"/>
			</mx:HBox>
			<mx:HBox>
				<mx:Label text="Line 3 leading text:"/>
				<mx:TextInput id="infoLine1FrontText3"/>
			</mx:HBox>
			<mx:HBox>
				<mx:Label text="Line 4 leading text:"/>
				<mx:TextInput id="infoLine1FrontText4"/>
			</mx:HBox>
			<mx:HBox>
				<mx:Label text="Line 5 leading text:"/>
				<mx:TextInput id="infoLine1FrontText5"/>
			</mx:HBox>
		</mx:VBox>
		<mx:VBox id="axisSettings" label="{lang('Plotter Axis Settings')}">
			<mx:CheckBox label="{lang('Show all axis labels')}"
						 creationComplete="linkBindableProperty(showAllLabels, event.target, 'selected');"/>
			<mx:HBox >
				<ui:DynamicColumnComponent label="{lang('Sort')}" creationComplete="(event.target as DynamicColumnComponent).dynamicObject = _plotter.sortColumn"/>
				<ui:HelpComponent >
					This column should span the entire time series of the data.
				</ui:HelpComponent>
			</mx:HBox>
			<ui:ColumnListComponent label="{lang('Attributes')}" creationComplete="(event.target as ColumnListComponent).hashMap = _plotter.heightColumns"/>
		</mx:VBox>
	</ui:ControlPanel>
</tools:SimpleVisTool>
