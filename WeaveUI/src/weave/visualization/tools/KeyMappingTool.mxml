<ui:DraggablePanel xmlns="weave.visualization.tools.*"
                   xmlns:mx="http://www.adobe.com/2006/mxml"
                   xmlns:ui="weave.ui.*" 
                   xmlns:CustomDataGrid="weave.ui.CustomDataGrid.*"
                   layout="absolute" implements="weave.api.ui.IVisToolWithSelectableAttributes"
                   title="{lang('Key Mapping Tool')}" xmlns:editors="weave.editors.*">
                   <mx:Script>
<![CDATA[

import weave.Weave;
import weave.api.WeaveAPI;
import weave.api.data.IKeySet;
import weave.api.ui.IVisTool;
import weave.api.newLinkableChild;
import weave.api.linkBindableProperty;
import weave.data.AttributeColumns.DynamicColumn;
import weave.data.KeySets.KeySet;
import weave.data.KeySets.KeySetUnion;
import weave.core.LinkableBoolean;
import weave.core.LinkableString;
import weave.utils.ColumnUtils;
import weave.utils.DebugUtils;
import weave.api.data.IQualifiedKey;
import flash.utils.Dictionary;

public const sourceKeyType:LinkableString = newLinkableChild(this, LinkableString, handleColumnsChange, true);
public const sourceLocalNameColumn:DynamicColumn = newLinkableChild(this, DynamicColumn, handleColumnsChange, true);
public const targetKeyType:LinkableString = newLinkableChild(this, LinkableString, handleColumnsChange, true);
public const targetLocalNameColumn:DynamicColumn = newLinkableChild(this, DynamicColumn, handleColumnsChange, true);
public const isBidirectional:LinkableBoolean = newLinkableChild(this, LinkableBoolean, handleColumnsChange, true);
public const limitRecursion:LinkableBoolean = newLinkableChild(this, LinkableBoolean, handleColumnsChange, true);

private const _probe:KeySet = Weave.defaultProbeKeySet;
private const _selection:KeySet = Weave.defaultSelectionKeySet;
private var keyMapping:Dictionary = new Dictionary();
private var reverseKeyMapping:Dictionary = new Dictionary();

private var currentlyMappedKeys:KeySet = new KeySet(); /* To ensure we only do one step */
private var previouslyMappedKeys:KeySet = new KeySet();

WeaveAPI.registerImplementation(IVisTool, KeyMappingTool, "Foreign Key Mapping Tool");

override protected function constructor():void
{
    super.constructor();
}
private function mapKeys(inputKeys:KeySet, mapping:Dictionary, noRecursion:Boolean):KeySet
{
    
    var outputKeys:KeySet = new KeySet();
    var inputKeyArray:Array = inputKeys.keys;
    for (var i = inputKeyArray.length; i >= 0; i--)
    {
        var inKey:IQualifiedKey = inputKeyArray[i] as IQualifiedKey;
        
        if (noRecursion && previouslyMappedKeys.containsKey(inKey)) continue;

        var replacements:Array = mapping[inKey] as Array;
        
        if (replacements)
        {
            outputKeys.addKeys(replacements);
        }
    }

    currentlyMappedKeys.addKeys(outputKeys.keys);

    return outputKeys;
}

private function performMapping(inputSet:KeySet):void
{
    
    previouslyMappedKeys.replaceKeys(currentlyMappedKeys.keys);
    currentlyMappedKeys.clearKeys();

    inputSet.addKeys(mapKeys(inputSet, keyMapping, limitRecursion.value).keys);

    if (isBidirectional.value)
    {
        inputSet.addKeys(mapKeys(inputSet, reverseKeyMapping, limitRecursion.value).keys);
    }

}
private function probeChanged():void
{
    performMapping(_probe);
}
private function selectionChanged():void
{
    performMapping(_selection);
}
private function handleColumnsChange():void
{

    keyMapping = new Dictionary();
    reverseKeyMapping = new Dictionary();

    if (!sourceLocalNameColumn.getInternalColumn() ||
        !targetLocalNameColumn.getInternalColumn())
    {
        /* We can't do anything useful if we don't have these columns. */
        return;
    }

    var columns:Array = ColumnUtils.joinColumns([sourceLocalNameColumn, targetLocalNameColumn], String);
    
    for (var i = columns[0].length; i >= 0; i--)
    {
        var sourceKeyLocalName:String = columns[1][i];
        var targetKeyLocalName:String = columns[2][i];

        var sourceKey:IQualifiedKey = WeaveAPI.QKeyManager.getQKey(sourceKeyType.value, sourceKeyLocalName);
        var targetKey:IQualifiedKey = WeaveAPI.QKeyManager.getQKey(targetKeyType.value, targetKeyLocalName);

        if (keyMapping[sourceKey] === undefined)
        {
            keyMapping[sourceKey] = new Array();
        }

        if (reverseKeyMapping[targetKey] === undefined)
        {
            reverseKeyMapping[targetKey] = new Array();
        }

        keyMapping[sourceKey].push(targetKey);
        reverseKeyMapping[targetKey].push(sourceKey);
    }

    probeChanged();
    selectionChanged();

    return;
}
override protected function childrenCreated():void
{
    super.childrenCreated();

    _probe.addGroupedCallback(this, probeChanged);
    _selection.addGroupedCallback(this, selectionChanged);

    sourceLocalNameColumnComponent.dynamicObject = sourceLocalNameColumn;
    targetLocalNameColumnComponent.dynamicObject = targetLocalNameColumn;

    return;
}

public function getSelectableAttributes():Array
{
    return [sourceLocalNameColumn, targetLocalNameColumn];
}

public function getSelectableAttributeNames():Array
{
    return [sourceLocalNameColumnComponent.label, targetLocalNameColumnComponent.label];
}

]]>
</mx:Script>
<ui:ControlPanel>
        <mx:VBox label="{lang('Attributes')}">
            <mx:HBox>
                <mx:ComboBox id="sourceKeyTypeDropdown" editable="true" creationComplete="linkBindableProperty(sourceKeyType, event.target, 'selectedItem')"/>
                <ui:DynamicColumnComponent id="sourceLocalNameColumnComponent" label="{lang('Source LocalName')}"/>
            </mx:HBox>
            <mx:HBox>
                <mx:ComboBox id="targetKeyTypeDropdown" editable="true" creationComplete="linkBindableProperty(targetKeyType, event.target, 'selectedItem')"/>
                <ui:DynamicColumnComponent id="targetLocalNameColumnComponent" label="{lang('Target LocalName')}"/>
            </mx:HBox>
            <mx:CheckBox id="isBidirectionalCheckBox" 
                label="{lang('Perform Bidirectional Mapping')}" 
                creationComplete="linkBindableProperty(isBidirectional, event.target, 'selected')"
            />
            <mx:CheckBox id="limitRecursionCheckBox"
                label="{lang('Limit to one step')}"
                creationComplete="linkBindableProperty(limitRecursion, event.target, 'selected')"
            />
        </mx:VBox>
        <!-- mx:VBox label="{lang('Advanced')}">
            <mx:CheckBox id="enableProbingCheckBox" label="{lang('Enable mouseover linking')}"/>
            <ui:Indent>
                <mx:CheckBox id="probeIncludesChildrenCheckBox" enabled="{enableProbingCheckBox.selected}" label="{lang('Linking includes all children.')}"/>
            </ui:Indent>
            <mx:CheckBox id="selectIncludesChildrenCheckBox" label="{lang('Include children in selections.')}"/>
            <mx:CheckBox id="expandToShowSelectedCheckBox" label="{lang('Expand to show selected children.')}" visible="false"/>
        </mx:VBox -->
        <editors:WindowSettingsEditor target="{this}"/>
    </ui:ControlPanel>
</ui:DraggablePanel>