<?xml version="1.0" encoding="utf-8"?>
<!--
/*
Weave (Web-based Analysis and Visualization Environment)
Copyright (C) 2008-2011 University of Massachusetts Lowell

This file is a part of Weave.

Weave is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License, Version 3,
as published by the Free Software Foundation.

Weave is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with Weave.  If not, see <http://www.gnu.org/licenses/>.
*/
-->

<!---
@author skolman
@author kmonico
@author sanbalag
-->
<ui:DraggablePanel xmlns="weave.visualization.tools.*"
				   xmlns:mx="http://www.adobe.com/2006/mxml"
				   xmlns:ui="weave.ui.*" 
				   xmlns:CustomDataGrid="weave.ui.CustomDataGrid.*"
				   layout="absolute"
				   title="Data Table" xmlns:editors="weave.editors.*"
				   >
	<mx:VBox width="100%" height="100%" id="tableArea" verticalGap="0">
		<mx:HBox id="topControls" horizontalAlign="left" width="100%">
			<mx:Label text="Key type:"/>
			<ui:CustomComboBox id="keyTypeCombo" change="keyTypeChangeEventHandler()" toolTip="Only columns of the selected key type will be shown."/>
			<mx:Button label="Edit columns..." click="AttributeSelectorPanel.openDefaultSelector(columns)"/>
		</mx:HBox>
		<mx:HBox minWidth="0" borderStyle="solid"  horizontalGap="0"  id="filterControls" width="100%" height="10%" verticalAlign="middle" horizontalScrollPolicy="off"/>
		<CustomDataGrid:CustomDataGrid id="dataGrid"
									   scroll="handleDataGridScroll()"
									   horizontalScrollPolicy="auto"
									   verticalScrollPolicy="auto"
									   dataProvider="{dataRowKeys}" 
									   width="100%" height="100%"
									   allowMultipleSelection="true"
									   minWidth="0"
									   copy="handleDataCopy(event)" 
									   change="handleItemSelection(event)"
									   doubleClick="handleDoubleClick(event)" doubleClickEnabled="true"
									   headerShift="handleColumnReorder(event)"
									   headerRelease="handleHeaderRelease(event)"
									   paddingBottom="0" paddingTop="0" paddingLeft="0" paddingRight="0"
									   
									   fontWeight="normal"
									   alternatingItemColors="{[0xffffff, 0xEEF6FF]}"
									   rollOverColor="0xDADAFF"
									   selectionColor="0xFFAAAA"
									   />
		
		<mx:HBox id="bottomControls" width="100%" paddingTop="3" paddingLeft="3" paddingBottom="3" paddingRight="3">
			<mx:Button label="Export Data..." click="exportCSV()" />
			<mx:Button click="moveSelectedToTop()" label="Move Selected Items to top"/>
		</mx:HBox>
	</mx:VBox>
	
	<mx:Number id="columnWidthScale">1</mx:Number>
	
	<mx:Script>
		<![CDATA[
			import flash.desktop.Clipboard;
			import flash.desktop.ClipboardFormats;
			
			import mx.collections.ArrayCollection;
			import mx.controls.dataGridClasses.DataGridColumn;
			import mx.core.Application;
			import mx.core.mx_internal;
			import mx.events.CollectionEvent;
			import mx.events.DataGridEvent;
			import mx.events.ResizeEvent;
			
			import weave.Weave;
			import weave.api.WeaveAPI;
			import weave.api.copySessionState;
			import weave.api.core.ILinkableObject;
			import weave.api.data.DataTypes;
			import weave.api.data.IAttributeColumn;
			import weave.api.data.IColumnWrapper;
			import weave.api.data.IPrimitiveColumn;
			import weave.api.data.IQualifiedKey;
			import weave.api.getCallbackCollection;
			import weave.api.linkBindableProperty;
			import weave.api.newLinkableChild;
			import weave.api.registerLinkableChild;
			import weave.api.reportError;
			import weave.core.LinkableBoolean;
			import weave.core.LinkableHashMap;
			import weave.core.LinkableNumber;
			import weave.core.LinkableString;
			import weave.core.StageUtils;
			import weave.core.UIUtils;
			import weave.data.AttributeColumns.DynamicColumn;
			import weave.data.AttributeColumns.ImageColumn;
			import weave.data.AttributeColumns.KeyColumn;
			import weave.data.AttributeColumns.SecondaryKeyNumColumn;
			import weave.data.KeySets.KeyFilter;
			import weave.data.KeySets.KeySet;
			import weave.ui.AttributeSelectorPanel;
			import weave.ui.CustomContextMenuManager;
			import weave.ui.CustomDataGrid.SearchFilterComponent;
			import weave.ui.CustomDataGrid.SliderFilterComponent;
			import weave.ui.CustomDataGrid.WeaveCustomDataGridColumn;
			import weave.ui.DraggablePanel;
			import weave.utils.ColumnUtils;
			import weave.utils.LinkableTextFormat;
			import weave.utils.NumberUtils;
			import weave.utils.ProbeTextUtils;
			use namespace mx_internal;
			
			override protected function constructor():void
			{
				super.constructor();
				
				_columnCheckList = new Dictionary();
				getCallbackCollection(keySet).addGroupedCallback(this, handleKeySetChange);
				//getCallbackCollection(dataGrid.filteredKeySet).addGroupedCallback(this, handleKeySetChange);
				getCallbackCollection(_selection).addGroupedCallback(this, handleGlobalSelectionChange);
				getCallbackCollection(_subset).addGroupedCallback(this, handleSubsetChange);
				getCallbackCollection(LinkableTextFormat.defaultTextFormat).addGroupedCallback(this, handleFontChange, true);
				
				
				registerLinkableChild(this, columns);
				
				var probeHeaderColumns:Array = ProbeTextUtils.probeHeaderColumns.getObjects(IAttributeColumn);
				var probedColumns:Array = ProbeTextUtils.probedColumns.getObjects(IAttributeColumn);
				var allColumns:Array = (probeHeaderColumns.concat as Function).apply(null, probedColumns);
				for (var i:int = 0; i < allColumns.length; i++)
				{
					var dynamicColumn:DynamicColumn = columns.requestObject(null, DynamicColumn, false);
					var probedColumn:ILinkableObject = allColumns[i] as ILinkableObject;
					if (probedColumn is DynamicColumn)
						copySessionState(probedColumn, dynamicColumn);
					else
						dynamicColumn.requestLocalObjectCopy(probedColumn);
				}
			}
			
			public const filterByKeyType:LinkableString = newLinkableChild(this,LinkableString,updateKeyTypeComboBox,true);
			override protected function childrenCreated():void
			{
				super.childrenCreated();
				
				linkBindableProperty(showControls, showControlsCheckBox, "selected");
				linkBindableProperty(showFilters, showFiltersCheckBox, "selected");
				
				columns.addGroupedCallback(this, handleColumnsChange, true);
				columns.childListCallbacks.addGroupedCallback(this, handleColumnListChange, true);
				
				dataRowKeys.filterFunction = filterKeys;
				dataRowKeys.refresh();
				handleGlobalSelectionChange();
				dimensionsList.hashMap = columns;
				
				sortFieldIndex.addGroupedCallback(this,sortCallback);
				sortInDescendingOrder.addGroupedCallback(this,sortCallback);
				columns.addGroupedCallback(this, function():void{ sortCallback(true); });
				
				dataGrid.addEventListener(DataGridEvent.COLUMN_STRETCH, handleStretch);
				addEventListener(ResizeEvent.RESIZE, handleResize);
				getCallbackCollection(filterComponents).addImmediateCallback(this, dataGrid.invalidateFilters);
				dataRowKeys.addEventListener(CollectionEvent.COLLECTION_CHANGE, handleGlobalSelectionChange);
				
				UIUtils.linkDisplayObjects(filterControls,filterComponents);
			}
			
			
			private function handleResize(event:ResizeEvent):void
			{
				callLater(handleSessionedWidthChange);
			}
			private function handleStretch(event:Event):void
			{
				callLater(handleNewWidth, [NaN, false]);
			}
			override protected function handlePanelTitleChange():void
			{
				super.handlePanelTitleChange();
				if (!panelTitle.value)
					title = "Data Table";
			}
			
			private function handleFontChange():void
			{
				if (!dataGrid)
					return callLater(handleFontChange);
				
				LinkableTextFormat.defaultTextFormat.copyToStyle(dataGrid);
			}
			
			private var attColumns:Array;
			
			public const exportKeys:LinkableBoolean = registerLinkableChild(this, new LinkableBoolean(true));
			public const showControls:LinkableBoolean = registerLinkableChild(this, new LinkableBoolean(false), updateControls);
			private function updateControls():void
			{
				if (!parent)
					return callLater(updateControls);
				try
				{
					if (showControls.value)
					{
						if (!topControls.parent)
							tableArea.addChildAt(topControls, 0);
						if (!bottomControls.parent)
							tableArea.addChild(bottomControls);
					}
					else
					{
						if (topControls.parent)
							tableArea.removeChild(topControls);
						if (bottomControls.parent)
							tableArea.removeChild(bottomControls);
					}
				}
				catch (e:Error) 
				{
				}
			}
			
			
			public const showFilters:LinkableBoolean = registerLinkableChild(this, new LinkableBoolean(false), updateFilters);
			private function updateFilters():void
			{
				if (!parent)
					return callLater(updateFilters);
				try
				{
					if (showFilters.value)
					{
						if (!filterControls.parent){							
							// if there are controls above where the filters should be.. add the filters at index 1, otherwise use index 0
							tableArea.addChildAt(filterControls, topControls.parent ? 1 : 0);
							createFilterComponents();
						}
					}
					else
					{
						if (filterControls.parent){
							filterComponents.removeAllObjects();
							tableArea.removeChild(filterControls);
						}							
						var currentSelection:KeySet = Weave.root.getObject(Weave.DEFAULT_SELECTION_KEYSET) as KeySet;
						currentSelection.replaceKeys([]);
					}
				}
				catch (e:Error) 
				{
				}
			}
			//based column datatype, filter components are decided 
			//column names are passed to get linkableHashMap.requestObjects , it will retain the same object, if created early.
			private function createFilterComponents():void{				
				var classDef:Class = null;
				var colNames:Array = columns.getNames();
				//better to use seesioned Object to run a loop instead of UI objects
				for(var i:int = 0; i<colNames.length;i++){
					var attrColum:IAttributeColumn = columns.getObject(colNames[i]) as IAttributeColumn;
					var filterableColumn:WeaveCustomDataGridColumn = _currentDataGridColumns[i] as WeaveCustomDataGridColumn;					
					var dataType:String = ColumnUtils.getDataType(attrColum);
					
					if (attrColum is KeyColumn)
						classDef = SearchFilterComponent;										
					if (dataType == DataTypes.STRING)
						classDef = SearchFilterComponent;
					else if(dataType == DataTypes.NUMBER)
						classDef = SliderFilterComponent;
					
					filterableColumn.filterComponent = filterComponents.requestObject(colNames[i], classDef, false);
				}								
			}
			
			
			private const dataRowKeys:ArrayCollection = new ArrayCollection([]);
			
			public const columns:LinkableHashMap = new LinkableHashMap(IAttributeColumn);
			public const columnWidths:LinkableHashMap = registerLinkableChild(this, new LinkableHashMap(LinkableString), handleSessionedWidthChange, false);
			public const filterComponents:LinkableHashMap = registerLinkableChild(this,new LinkableHashMap());
			
			private function addImageColumn():void
			{
				var imageColumnName:String = dimensionsList.hashMap.generateUniqueName("ImageColumn");
				var imageCol:ImageColumn = dimensionsList.hashMap.requestObject(imageColumnName,ImageColumn, false);				
				AttributeSelectorPanel.openDefaultSelector(imageCol);
			}
			
			private var fr:FileReference = new FileReference();	// CSV download file reference
			private function exportCSV():void
			{
				try
				{
					fr.save(generateCSV(), "Weave Data Export.csv");
				}
				catch (e:Error)
				{
					reportError(e);
				}
			}
			
			private function handleDoubleClick(event:Event):void
			{
				handleItemSelection(event);
			}
			
			public const sortFieldIndex:LinkableNumber = newLinkableChild(this,LinkableNumber);
			public const sortInDescendingOrder:LinkableBoolean = newLinkableChild(this,LinkableBoolean);
			private var headerClicked:Boolean = false;
			private function handleHeaderRelease(event:DataGridEvent=null):void
			{
				if (event!=null)
				{
					var c:DataGridColumn = dataGrid.columns[event.columnIndex];
					// we do a callLater to get the correct sorting order. 
					// There is a bug in flex because of which the c.sortDescending will always return false
					callLater(getOrder,[c,event.columnIndex]);
				}
			}
			
			private function getOrder(column:DataGridColumn,index:int):void
			{
				sortInDescendingOrder.value = column.sortDescending;
				sortFieldIndex.value = index;
			}
			
			
			private function sortCallback(forced:Boolean = false):void
			{
				if(isNaN(sortFieldIndex.value))
					return;
				
				var c:DataGridColumn = dataGrid.columns[sortFieldIndex.value];
				if(c == null)
					return;
				
				// sort by the column specified in the session state
				if (forced || dataGrid.sortIndex != sortFieldIndex.value)
				{
					dataGrid.dispatchEvent(new DataGridEvent(DataGridEvent.HEADER_RELEASE, false, true, sortFieldIndex.value, null, 0, null, null, 0));
				}
				// flip the sorting order if it is wrong
				if (c.sortDescending != sortInDescendingOrder.value)
				{
					dataGrid.dispatchEvent(new DataGridEvent(DataGridEvent.HEADER_RELEASE, false, true, sortFieldIndex.value, null, 0, null, null, 0));	
				}
			}
			
			//we need to do this to set the arrow to the correct column
			override protected function updateDisplayList(unscaledWidth:Number, unscaledHeight:Number):void
			{
				//				sortCallback();
				super.updateDisplayList(unscaledWidth,unscaledHeight);
			}
			
			
			private var _selection:KeySet = Weave.root.getObject(Weave.DEFAULT_SELECTION_KEYSET) as KeySet;
			private function handleItemSelection(event:Event=null):void
			{
				dataGrid.validateNow();
				
				var selectedKeys:Array = new Array();
				
				for (var i:int = 0; i < dataGrid.selectedIndices.length; i++)
				{
					selectedKeys[i] = (dataGrid.dataProvider as ArrayCollection).getItemAt( dataGrid.selectedIndices[i] ) as IQualifiedKey;
				}
				
				_selection.replaceKeys(selectedKeys);
			}
			
			private function handleColumnReorder(event:Event):void
			{
				var newColumnOrder:Array = [];
				
				for(var i:int = 0; i<dataGrid.columns.length; i++)
				{
					var currAttrColumn:WeaveCustomDataGridColumn = dataGrid.columns[i] as WeaveCustomDataGridColumn;
					var columnName:String = columns.getName(currAttrColumn.attrColumn as ILinkableObject);
					newColumnOrder.push(columnName);
				}
				
				columns.setNameOrder(newColumnOrder);	
			}
			
			private function handleGlobalSelectionChange(e:Event = null):void
			{
				if (!parent)
					return callLater(handleGlobalSelectionChange);
				
				//dataGrid.selectedItems = [];
				var selectedItems:Array = [];
				for each (var item:Object in dataGrid.dataProvider)
				{
					if (_selection.containsKey(item as IQualifiedKey))
						selectedItems.push(item);
				}
				dataGrid.selectedItems = selectedItems;
			}
			
			private var _subset:KeyFilter = Weave.root.getObject(Weave.DEFAULT_SUBSET_KEYFILTER) as KeyFilter;
			private function handleSubsetChange():void
			{
				dataRowKeys.refresh();
			}
			
			private function filterKeys(item:Object):Boolean
			{
				if(_subset.containsKey(item as IQualifiedKey))
					return true;
				else 
					return false;
			}
			
			private function moveSelectedToTop():void
			{
				//push selected Objects into an Array
				var selectedItems:Array = dataGrid.selectedItems;
				
				//datagrid.selectedItems returns null. So have to loop through indices to get the items
				(dataGrid.dataProvider as ArrayCollection).sort = null;
				
				
				for each(var item:Object in selectedItems)
				{
					var index:int = dataRowKeys.getItemIndex(item);
					dataRowKeys.removeItemAt(index);
					dataRowKeys.source.unshift(item);
				}
				
				dataRowKeys.refresh();
				//dataGrid.lockedRowCount = selectedItems.length;
				dataGrid.validateNow();
				handleGlobalSelectionChange();
				dataGrid.scrollToIndex(0);
			}
			
			private var keySet:KeySet = new KeySet();
			private function handleKeySetChange():void
			{
				updateDataRowKeys();
			}
			private function handleKeyTypeChange():void
			{
				for each (var col:WeaveCustomDataGridColumn in dataGrid.columns)
				{
					if(keyTypeCombo.selectedItem == "Show All" || (col.attrColumn is KeyColumn) || (ColumnUtils.getKeyType(col.attrColumn) == keyTypeCombo.selectedItem))
						col.visible = true;
					else 
						col.visible = false;
				}
				
				updateKeys();
				updateDataRowKeys();
				
			}
			
			private function keyTypeChangeEventHandler():void
			{
				filterByKeyType.value = keyTypeCombo.selectedItem as String;
				handleKeyTypeChange();
			}
			
			private function updateKeyTypeComboBox():void
			{
				if (keyTypeCombo == null)
					return callLater(updateKeyTypeComboBox);
				
				var prevIndex:int = keyTypeCombo.selectedIndex;
				var keyTypeList:Array = new Array();
				keyTypeList.push("Show All");
				for each (var attrCol:IAttributeColumn in columns.getObjects())
				{
					if(attrCol is KeyColumn)
						continue;
					
					var keyType:String = ColumnUtils.getKeyType(attrCol);
					
					if(keyType == null)
						keyType = "null"
					if(keyTypeList.indexOf(keyType) == -1)
						keyTypeList.push(keyType);
				}
				keyTypeCombo.dataProvider = keyTypeList;
				
				keyTypeCombo.selectedItem = filterByKeyType.value || 'Show All';
				
				//keyTypeCombo.selectedIndex = selectedIndex;
			}
			
			public function getExportDataProvider():*
			{
				for each (var column:IAttributeColumn in columns.getObjects())
				{
					while (!(column is IPrimitiveColumn) && column is IColumnWrapper)
						column = (column as IColumnWrapper).internalColumn;
					
					if (column is SecondaryKeyNumColumn)
					{
						// dimension slider hack -- relies on previously set SecondaryKeyNumColumn.allKeysHack = true;
						var key:IQualifiedKey;
						var keyLookup:Dictionary = new Dictionary(true);
						for each (column in columns.getObjects())
							for each (key in column.keys)
								keyLookup[key] = true;
						var keys:Array = [];
						for (var keyObj:* in keyLookup)
							keys.push(keyObj);
						return keys;
					}
				}
				return dataGrid.dataProvider;
			}
			private function generateCSV():String{
				var keys:* = getExportDataProvider();
				// each record has a property named after the column title equal to the value in that column for the current key
				var dataType:Class = (keys === dataGrid.dataProvider) ? null : String; // dimension slider hack
				var dataTableColumns:Array = columns.getObjects();
				var generatedCSVstring:String = ColumnUtils.generateTableCSV(dataTableColumns,keys,dataType);
				return generatedCSVstring;
			}
			
			private function handleDataCopy(event:Event):void
			{											
				Clipboard.generalClipboard.setData(ClipboardFormats.TEXT_FORMAT,generateCSV() );
			}
			
			private var attColCodes:Array = [];
			
			private var _minSuggestedColumnSize:int = 100;
			
			private var _visibleColumns:Array = new Array();;
			private var _columnCheckList:Dictionary = null;
			
			private function updateDataRowKeys():void
			{
				dataRowKeys.source = keySet.keys;
			}			
			
			private function handleColumnsChange():void
			{
				updateKeys();
				updateKeyTypeComboBox();
				handleDataSourceChange();
				handleKeyTypeChange();
				handleGlobalSelectionChange();
				
				//we need to do this to set the arrow to the correct column
				this.invalidateDisplayList();
				updateBorders();
			}
			
			private function handleDataSourceChange():void
			{
				if (!parent)
					return callLater(handleDataSourceChange);
				try {
					dataGrid.columns = [];
					if(filterControls){
						filterControls.removeAllChildren();
					}
					_currentDataGridColumns = [];
					
					// add the items to the data grid
					var attrColumns:Array = columns.getObjects();
					for each (var attrColumn:IAttributeColumn in attrColumns)
					{
						addItem(attrColumn);
					}
					if(filterControls && showFilters.value){
						createFilterComponents();
					}
					
					
					// remove values which lack associated columns
					var _sessionedWidthNames:Array = columnWidths.getNames();
					for each (var name:String in _sessionedWidthNames)
					{
						if (!columns.getObject(name))
							columnWidths.removeObject(name);
					}
					handleSessionedWidthChange(); // run the callback for the sessionedWidths
				}
				catch (error:Error)
				{
					reportError(error);
				}
			}
			
			private function handleColumnListChange():void
			{
				showKeyColumnCheckBox.selected = columns.getNames(KeyColumn).length > 0;
			}
			
			private function updateKeys():void
			{
				keySet.clearKeys();
				for each (var column:IAttributeColumn in columns.getObjects())
				{	
					if(keyTypeCombo.enabled)
					{
						if(keyTypeCombo.selectedItem == "Show All" || ColumnUtils.getKeyType(column) == keyTypeCombo.selectedItem)
							keySet.addKeys(column.keys);
					}
					else
						keySet.addKeys(column.keys);
				}
			}
			[Bindable]
			private var _currentDataGridColumns:Array = [];
			
			
			private function handleNewWidth(newWidth:Number, allowCallLater:Boolean = true):void
			{
				// delay this function to let the flex component update correctly.
				if (allowCallLater)
				{
					StageUtils.callLater(this, handleNewWidth, [newWidth, false], false);
					return;
				}
				
				// go through each column and set the sessioned widths
				var i:int;
				var totalWidth:Number = dataGrid.width;
				for (i = 0; i < _currentDataGridColumns.length; ++i)
				{
					var dgc:WeaveCustomDataGridColumn = _currentDataGridColumns[i];
					var column:IAttributeColumn = dgc.attrColumn;
					var columnName:String = columns.getName(column);
					var sessionedWidth:LinkableString = columnWidths.getObject(columnName) as LinkableString;
					var width:Number = (_currentDataGridColumns[i] as WeaveCustomDataGridColumn).width;
					if (isNaN(width) || width <= 5) // this happens when a column is stretched all the way to the right
						width = _minSuggestedColumnSize;
					_guiWidthChanged = true; // don't let the next line run callbacks
					sessionedWidth.value = Math.floor(100 * width / totalWidth) + "%";
					if(dgc.filterComponent){
						dgc.filterComponent.width =dgc.width;
					}
					
					_guiWidthChanged = false; 
				}
			}
			private function handleSessionedWidthChange():void
			{
				// return if this function was called from the above function
				if (_guiWidthChanged)
					return;
				
				// if there isn't a parent or the grid isn't fully instantiated, return
				if (!parent || dataGrid.width == 0)
				{
					callLater(handleSessionedWidthChange);
					return;
				}
				
				// loop through the data and put them into the data grid
				var totalWidth:Number = dataGrid.width - dataGrid.getScrollWidth(CustomDataGrid.VERTICAL_SCROLL);
				var n:int = _currentDataGridColumns.length;
				for (var j:int = 0; j < n; ++j)
				{
					var dgc:WeaveCustomDataGridColumn = _currentDataGridColumns[j] as WeaveCustomDataGridColumn;
					var columnName:String = columns.getName(dgc.attrColumn);
					if (columnName == null)
						continue;
					var sessionedWidth:LinkableString = columnWidths.getObject(columnName) as LinkableString;
					// we don't want to create a sessionedWidth because one will be created later if the column wasn't disposed
					if (sessionedWidth == null)
						continue; 
					var temp:Number;
					if (sessionedWidth.value)
						temp = NumberUtils.getNumberFromNumberOrPercent(sessionedWidth.value, totalWidth);
					else
						temp = totalWidth / _currentDataGridColumns.length - 1;
					
					if (temp <= 5 || isNaN(temp)) 
						temp = _minSuggestedColumnSize;
					
					// always force the width to be the new value
					var newWidth:int = Math.floor(Math.min(temp, totalWidth - 1));
					
					// don't set width of last data grid column
					if (j < n - 1)
					{
						dgc.setWidth(newWidth);
						dgc.width = newWidth;
						dgc.width = dgc.width;
					}
					
					if (dgc.filterComponent)
					{
						if (j == n - 1)
							dgc.filterComponent.percentWidth = 100;
						else
							dgc.filterComponent.width = newWidth;
					}
				}
				//				dataGrid.invalidateDisplayList();
				dataGrid.validateSize(true);
			}
			private function handleDataGridScroll():void
			{
				var hsp:int = 0;
				for (var i:int = 0; i < dataGrid.horizontalScrollPosition && i < _currentDataGridColumns.length; i++)
					hsp += (_currentDataGridColumns[i] as WeaveCustomDataGridColumn).width;
				filterControls.horizontalScrollPosition = hsp;
				
			}
			private var _guiWidthChanged:Boolean = false; 
			
			public function addItem(attrColumn:IAttributeColumn):void
			{				
				var dgc:WeaveCustomDataGridColumn = new WeaveCustomDataGridColumn(attrColumn);	
				
				_currentDataGridColumns.push(dgc);
				var columnName:String = columns.getName(attrColumn);
				var sessionedWidth:LinkableString = columnWidths.requestObject(columnName, LinkableString, true);
				
				validateHScrollBar();
				
				dataGrid.columns = _currentDataGridColumns;
				dataGrid.invalidateDisplayList();
			}
			
			private function validateHScrollBar():void
			{
				// NEED TO DETERMINE WHETHER OR NOT TO SHOW A SCROLL BAR -- if not, it will resize each column automatically
				var totalColumnWidths:Number = 0;
				for each (var obj:WeaveCustomDataGridColumn in _currentDataGridColumns)
				{
					totalColumnWidths += obj.width;
				}
				if (totalColumnWidths < dataGrid.width)
					dataGrid.horizontalScrollPolicy = "off";
				else
					dataGrid.horizontalScrollPolicy = "auto";
			}
			
			private function handleKeyColumnCheckBox():void
			{
				if(showKeyColumnCheckBox.selected)
				{
					var kc:Array= columns.getObjects(KeyColumn);
					if(kc.length == 0)
					{
						var nameOrder:Array = columns.getNames();
						columns.requestObject("KeyColumn",KeyColumn, false);
						columns.setNameOrder(nameOrder);
					}					
					updateKeyTypeComboBox();
					
				}
				else
				{
					var keyCols:Array = columns.getNames(KeyColumn);
					for each(var keyCol:String in keyCols)
					{
						columns.removeObject(keyCol);
					}
				}
				
			}
			
			public const lockedColumns:LinkableNumber = registerLinkableChild(this, new LinkableNumber(0), handleLockedColumnChange, true);
			private function handleLockedColumnChange():void
			{
				if (!parent)
				{
					callLater(handleLockedColumnChange);
					return;
				}
				if (lockedColumns.value < 0 || lockedColumns.value > dataGrid.columns.length)
					lockedColumns.value = 0;
				dataGrid.lockedColumnCount = lockedColumns.value;
			}
			
			
		]]>
	</mx:Script>
	<ui:ControlPanel>
		<mx:VBox id="attributesPanel" label="Attributes for Data Table">
			<ui:ColumnListComponent id="dimensionsList"  backgroundAlpha="0.7" height="100%" width="100%" label="Columns"/>
			<mx:Button label="Add Image Column" click="addImageColumn()" />
			<mx:CheckBox id="showControlsCheckBox" label="Show controls on panel"/>
			<mx:CheckBox id="showFiltersCheckBox" label="Show Filters on panel"/>
			<mx:CheckBox change="handleKeyColumnCheckBox()" id="showKeyColumnCheckBox" label="Show Key Column"/>
			<mx:CheckBox label="Export keys with data" creationComplete="linkBindableProperty(exportKeys, event.target, 'selected');"/>
			<mx:Button label="Export Data..." click="exportCSV()" />
			<mx:HBox>
				<mx:Label text="Number of Locked Columns"/>
				<mx:NumericStepper id="numLockedColumns" minimum="0" maximum="{dataGrid.columns.length}" 
								   creationComplete="linkBindableProperty(lockedColumns, event.target, 'value');"/>	
			</mx:HBox>			
		</mx:VBox>
		<editors:WindowSettingsEditor target="{this}"/>
	</ui:ControlPanel>
</ui:DraggablePanel>
