<?xml version="1.0" encoding="utf-8"?>
<!--
/*
Weave (Web-based Analysis and Visualization Environment)
Copyright (C) 2008-2011 University of Massachusetts Lowell

This file is a part of Weave.

Weave is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License, Version 3,
as published by the Free Software Foundation.

Weave is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with Weave.  If not, see <http://www.gnu.org/licenses/>.
*/
-->

<!---
@author skolman
@author kmonico
@author sanbalag
-->
<ui:DraggablePanel xmlns="weave.visualization.tools.*"
				   xmlns:mx="http://www.adobe.com/2006/mxml"
				   xmlns:ui="weave.ui.*" 
				   xmlns:CustomDataGrid="weave.ui.CustomDataGrid.*"
				   layout="absolute" implements="weave.api.ui.IVisTool"
				   title="Data Table" xmlns:editors="weave.editors.*"
				   >
	<mx:VBox width="100%" height="100%" id="tableArea" verticalGap="0" horizontalScrollPolicy="off">
		<mx:HBox id="topControls" horizontalAlign="left" width="100%">
			<mx:Label text="Key type:"/>
			<ui:CustomComboBox id="keyTypeCombo" change="filterByKeyType.value = keyTypeCombo.selectedItem as String;" toolTip="Only columns of the selected key type will be shown."/>
			<mx:Button label="Edit columns..." click="AttributeSelectorPanel.openDefaultSelector(columns)"/>
		</mx:HBox>
		<mx:HBox minWidth="0" horizontalGap="0" borderStyle="solid"  id="filterControls" width="100%"  verticalAlign="middle" horizontalScrollPolicy="off">
			<mx:Spacer width="{dataGrid.width}"/>
		</mx:HBox>
		<CustomDataGrid:CustomDataGrid id="dataGrid" updateComplete="dataGrid_updateCompleteHandler(event)"
									   horizontalScrollPolicy="auto"
									   verticalScrollPolicy="auto"
									   dataProvider="{dataRowKeys}" 
									   width="100%" height="100%"
									   allowMultipleSelection="true"
									   minWidth="0"
									   copy="handleDataCopy(event)" 
									   change="handleItemSelection(event)"
									   doubleClick="handleItemSelection(event)" doubleClickEnabled="true" 
									   headerShift="handleColumnReorder(event)"
									   headerRelease="handleHeaderRelease(event)"
									   paddingBottom="0" paddingTop="0" paddingLeft="0" paddingRight="0"									   
									   fontWeight="normal"
									   alternatingItemColors="{[0xffffff, 0xEEF6FF]}"
									   rollOverColor="0xDADAFF"
									   selectionColor="0xFFAAAA"
									   />
		
		<mx:HBox id="bottomControls" width="100%" paddingTop="3" paddingLeft="3" paddingBottom="3" paddingRight="3">
			<mx:Button label="Export Data..." click="exportCSV()" />
			<mx:Button click="moveSelectedToTop()" label="Move Selected Items to top"/>
		</mx:HBox>
	</mx:VBox>
	
	<mx:Number id="columnWidthScale">1</mx:Number>
	
	<mx:Script>
		<![CDATA[
			import flash.desktop.Clipboard;
			import flash.desktop.ClipboardFormats;
			
			import mx.collections.ArrayCollection;
			import mx.collections.ICollectionView;
			import mx.controls.dataGridClasses.DataGridColumn;
			import mx.core.mx_internal;
			import mx.events.DataGridEvent;
			import mx.events.FlexEvent;
			import mx.events.IndexChangedEvent;
			import mx.events.ResizeEvent;
			
			import weave.Weave;
			import weave.api.WeaveAPI;
			import weave.api.copySessionState;
			import weave.api.core.ILinkableObject;
			import weave.api.data.DataTypes;
			import weave.api.data.IAttributeColumn;
			import weave.api.data.IColumnWrapper;
			import weave.api.data.IPrimitiveColumn;
			import weave.api.data.IQualifiedKey;
			import weave.api.detectLinkableObjectChange;
			import weave.api.getCallbackCollection;
			import weave.api.linkBindableProperty;
			import weave.api.newLinkableChild;
			import weave.api.registerLinkableChild;
			import weave.api.reportError;
			import weave.api.ui.IVisTool;
			import weave.core.LinkableBoolean;
			import weave.core.LinkableHashMap;
			import weave.core.LinkableNumber;
			import weave.core.LinkableString;
			import weave.core.UIUtils;
			import weave.data.AttributeColumns.ColorColumn;
			import weave.data.AttributeColumns.DynamicColumn;
			import weave.data.AttributeColumns.ImageColumn;
			import weave.data.AttributeColumns.KeyColumn;
			import weave.data.AttributeColumns.SecondaryKeyNumColumn;
			import weave.data.KeySets.KeyFilter;
			import weave.data.KeySets.KeySet;
			import weave.ui.AttributeSelectorPanel;
			import weave.ui.CustomDataGrid.DataGridCellRenderer;
			import weave.ui.CustomDataGrid.IFilterComponent;
			import weave.ui.CustomDataGrid.SearchFilterComponent;
			import weave.ui.CustomDataGrid.SliderFilterComponent;
			import weave.ui.CustomDataGrid.WeaveCustomDataGridColumn;
			import weave.ui.DraggablePanel;
			import weave.utils.ColumnUtils;
			import weave.utils.EventUtils;
			import weave.utils.LinkableTextFormat;
			import weave.utils.NumberUtils;
			import weave.utils.ProbeTextUtils;
			use namespace mx_internal;
			
			WeaveAPI.registerImplementation(IVisTool, DataTableTool, "Data Table");
			
			public const columns:LinkableHashMap = registerLinkableChild(this, new LinkableHashMap(IAttributeColumn));
			public const columnWidths:LinkableHashMap = registerLinkableChild(this, new LinkableHashMap(LinkableString));
			public const filterComponents:LinkableHashMap = registerLinkableChild(this,new LinkableHashMap(IFilterComponent));	
			private const dataGridColumns:Dictionary = new Dictionary();
			private var _currentDataGridColumns:Array = [];
			
			public const dataGridHorizontalScrollPosition:LinkableNumber = newLinkableChild(this,LinkableNumber);
			public const dataGridVerticalScrollPosition:LinkableNumber = newLinkableChild(this,LinkableNumber);
			
			private var _subset:KeyFilter = Weave.root.getObject(Weave.DEFAULT_SUBSET_KEYFILTER) as KeyFilter;
			private var _selection:KeySet = Weave.root.getObject(Weave.DEFAULT_SELECTION_KEYSET) as KeySet;
			private var colorColumn:ColorColumn = Weave.root.getObject(Weave.DEFAULT_COLOR_COLUMN) as ColorColumn;
			
			public const sortFieldIndex:LinkableNumber = registerLinkableChild(this, new LinkableNumber(0));
			public const sortInDescendingOrder:LinkableBoolean = registerLinkableChild(this, new LinkableBoolean(false));
			
			private const dataRowKeys:ArrayCollection = new ArrayCollection([]);	
			public const exportKeys:LinkableBoolean = registerLinkableChild(this, new LinkableBoolean(true));
			
			override protected function constructor():void
			{
				super.constructor();
				
				var probeHeaderColumns:Array = ProbeTextUtils.probeHeaderColumns.getObjects(IAttributeColumn);
				var probedColumns:Array = ProbeTextUtils.probedColumns.getObjects(IAttributeColumn);
				var allColumns:Array = (probeHeaderColumns.concat as Function).apply(null, probedColumns);
				for (var i:int = 0; i < allColumns.length; i++)
				{
					var dynamicColumn:DynamicColumn = columns.requestObject(null, DynamicColumn, false);
					var probedColumn:ILinkableObject = allColumns[i] as ILinkableObject;
					if (probedColumn is DynamicColumn)
						copySessionState(probedColumn, dynamicColumn);
					else
						dynamicColumn.requestLocalObjectCopy(probedColumn);
				}
				getCallbackCollection(this).addImmediateCallback(this, invalidateDisplayList);
				_selection.addImmediateCallback(this,invalidateDisplayList);
				colorColumn.addImmediateCallback(this,invalidateDisplayList);
				getCallbackCollection(LinkableTextFormat.defaultTextFormat).addImmediateCallback(this,invalidateDisplayList);				
			}
			
			
			override protected function childrenCreated():void
			{
				super.childrenCreated();
				
				linkBindableProperty(showControls, showControlsCheckBox, "selected");
				linkBindableProperty(showFilters, showFiltersCheckBox, "selected");
				linkBindableProperty(showColors,showColorsCheckBox,"selected");
				
				columns.childListCallbacks.addImmediateCallback(this, handleColumnListChange,true);
				
				dataRowKeys.filterFunction = filterKeys;
				dataRowKeys.refresh();
				updateGlobalSelectionChange();
				dimensionsList.hashMap = columns;
				
				EventUtils.addEventCallback(dataGrid,DataGridEvent.COLUMN_STRETCH,handleColumnStretch);
				EventUtils.addEventCallback(dataGrid,ResizeEvent.RESIZE,handleToolResize);
				
				linkBindableProperty(dataGridHorizontalScrollPosition, dataGrid, 'horizontalScrollPosition', 0, true);
				linkBindableProperty(dataGridVerticalScrollPosition, dataGrid, 'verticalScrollPosition', 0, true);
				
				UIUtils.linkDisplayObjects(filterControls,filterComponents);
			}
			/**
			 * This function(event Listener) gets called during dataGrid Resize event
			 * handleDataGridHorizontalScroll calls updateColumnWidths, when the dataGridHorizontalScrollPosition.value is Maximum
			 * handleDataGridHorizontalScroll is called to update FilterComponents Position
			 */			
			private function handleToolResize():void{
				if(dataGridHorizontalScrollPosition.value != dataGrid.maxHorizontalScrollPosition){
					updateColumnWidths();
				}
				if(dataGridHorizontalScrollPosition.value > 0 && showFilters.value){
					handleDataGridHorizontalScroll();
				}
			}
			
			override protected function updateDisplayList(unscaledWidth:Number, unscaledHeight:Number):void{
				
				super.updateDisplayList(unscaledWidth, unscaledHeight);
				if(!parent) 
					return;
				
				var columnsChanged:Boolean = detectLinkableObjectChange(updateDisplayList, columns);
				if (columnsChanged)
				{
					sortCallback(true); 
					updateKeyTypeComboBox();
					updateDataGridColumns();
				}
				if (columnsChanged || detectLinkableObjectChange(updateDisplayList, filterByKeyType))
				{
					updateKeysAndVisibleColumns();
				}
				if (columnsChanged)
				{
					updateGlobalSelectionChange();
					//DraggablePanel method
					updateBorders();				
					updateColumnCellDisplay();									
				} 
				if(detectLinkableObjectChange(updateDisplayList,columnWidths)){
					updateColumnWidths();
				}
				
				if (detectLinkableObjectChange(updateDisplayList, filterComponents)){					
					dataGrid.invalidateFilters();
				}
				if (columnsChanged || detectLinkableObjectChange(updateDisplayList, dataGridHorizontalScrollPosition)){					
					handleDataGridHorizontalScroll();
				}
				if (columnsChanged || detectLinkableObjectChange(updateDisplayList, dataGridVerticalScrollPosition)){					
					dataGrid.verticalScrollPosition = dataGridVerticalScrollPosition.value;
				}
				if (detectLinkableObjectChange(updateDisplayList, _subset)){
					showFilters.value = false;
					dataRowKeys.refresh();		
				}
				if (detectLinkableObjectChange(updateDisplayList, _selection)){
					updateGlobalSelectionChange();
				}
				if (detectLinkableObjectChange(updateDisplayList, colorColumn)){
					(dataGrid.dataProvider as ICollectionView).refresh();
				}
				if (detectLinkableObjectChange(updateDisplayList, LinkableTextFormat.defaultTextFormat)){
					LinkableTextFormat.defaultTextFormat.copyToStyle(dataGrid);
				}
				if (detectLinkableObjectChange(updateDisplayList, sortFieldIndex) ||
					detectLinkableObjectChange(updateDisplayList, sortInDescendingOrder))
				{
					sortCallback();
				}	
			}
			
			
			override protected function handlePanelTitleChange():void
			{
				super.handlePanelTitleChange();
				if (!panelTitle.value)
					title = "Data Table";
			}
			
			
			/**
			 * This function(event Listener) gets called during 
			 * Click event of Button  in control Panel			 * 
			 */	
			private function addImageColumn():void
			{
				var imageColumnName:String = dimensionsList.hashMap.generateUniqueName("ImageColumn");
				var imageCol:ImageColumn = dimensionsList.hashMap.requestObject(imageColumnName,ImageColumn, false);				
				AttributeSelectorPanel.openDefaultSelector(imageCol);
			}
			
			private var fr:FileReference = new FileReference();	// CSV download file reference
			private function exportCSV():void
			{
				try
				{
					fr.save(generateCSV(), "Weave Data Export.csv");
				}
				catch (e:Error)
				{
					reportError(e);
				}
			}
			
			/**
			 * This function(event Listener) gets called during 
			 * HeaderRelease event in Datagrid 
			 */				
			private function handleHeaderRelease(event:DataGridEvent=null):void
			{
				if (event!=null)
				{
					var c:DataGridColumn = dataGrid.columns[event.columnIndex];
					// we do a callLater to get the correct sorting order. 
					// There is a bug in flex because of which the c.sortDescending will always return false
					callLater(getOrder,[c,event.columnIndex]);
				}
			}
			
			
			/**
			 * called from callLater of handleHeaderRelease listener ,to get the correct sorting order. 
			 * There is a bug in flex because of which the c.sortDescending will always return false
			 */
			private function getOrder(column:DataGridColumn,index:int):void
			{
				sortInDescendingOrder.value = column.sortDescending;
				sortFieldIndex.value = index;
			}
			
			/**
			 * This function gets called in ValidateProperties, 
			 * when there is change in sortFieldIndex or sortInDescending 	
			 * called with parameter if called from change in column 
			 */							
			private function sortCallback(forced:Boolean = false):void
			{
				if(isNaN(sortFieldIndex.value))
					return;
				
				var c:DataGridColumn = dataGrid.columns[sortFieldIndex.value];
				if(c == null)
					return;
				
				// sort by the column specified in the session state , flip the sorting order if it is wrong
				if (forced || dataGrid.sortIndex != sortFieldIndex.value || c.sortDescending != sortInDescendingOrder.value)
				{
					dataGrid.dispatchEvent(new DataGridEvent(DataGridEvent.HEADER_RELEASE, false, true, sortFieldIndex.value, null, 0, null, null, 0));
				}				
			}
			
			/**
			 * This function(event Listener) gets called during 
			 * Change event in DataGrid
			 * DoubleClick event in DataGrid
			 */	
			private function handleItemSelection(event:Event=null):void
			{
				dataGrid.validateNow();				
				var selectedKeys:Array = new Array();
				for (var i:int = 0; i < dataGrid.selectedIndices.length; i++)
				{
					selectedKeys[i] = (dataGrid.dataProvider as ArrayCollection).getItemAt( dataGrid.selectedIndices[i] ) as IQualifiedKey;
				}
				_selection.replaceKeys(selectedKeys);
			}
			
			private function updateGlobalSelectionChange():void
			{
				if (!parent)
					return callLater(updateGlobalSelectionChange);
				//flex will crash if we try to select items immediately
				if(dataGrid.visibleLockedColumns && lockedColumns.value == 0 && dataGrid.visibleLockedColumns.length != 0)
					validateNow();
				
				var selectedItems:Array = [];
				for each (var item:Object in dataGrid.dataProvider)
				{
					if (_selection.containsKey(item as IQualifiedKey))
						selectedItems.push(item);
				}	
				dataGrid.selectedItems = selectedItems;				
			}
			
			
			/**
			 * Default Filter function set for Datgrid by setting its filter properties
			 */				
			private function filterKeys(item:Object):Boolean
			{
				if(_subset.containsKey(item as IQualifiedKey))
					return true;
				else 
					return false;
			}
			
			private function moveSelectedToTop():void
			{
				//push selected Objects into an Array
				var selectedItems:Array = dataGrid.selectedItems;
				
				//datagrid.selectedItems returns null. So have to loop through indices to get the items
				(dataGrid.dataProvider as ArrayCollection).sort = null;				
				
				for each(var item:Object in selectedItems)
				{
					var index:int = dataRowKeys.getItemIndex(item);
					dataRowKeys.removeItemAt(index);
					dataRowKeys.source.unshift(item);
				}
				
				dataRowKeys.refresh();
				dataGrid.validateNow();
				updateGlobalSelectionChange();
				dataGrid.scrollToIndex(0);
			}
			
			private function updateKeysAndVisibleColumns():void
			{
				var includedColumns:Array = [];
				for each (var col:WeaveCustomDataGridColumn in dataGrid.columns)
				{
					if (keyTypeCombo.selectedItem == "Show All" ||
						(col.attrColumn is KeyColumn) ||
						(ColumnUtils.getKeyType(col.attrColumn) == filterByKeyType.value))
					{
						col.visible = true;
						includedColumns.push(col.attrColumn);
					}
					else
					{
						col.visible = false;
					}
				}
				dataRowKeys.source = ColumnUtils.getAllKeys(includedColumns);
			}
			
			public const filterByKeyType:LinkableString = newLinkableChild(this,LinkableString,updateKeyTypeComboBox,true);
			private function updateKeyTypeComboBox():void
			{
				if (keyTypeCombo == null)
					return callLater(updateKeyTypeComboBox);
				
				var prevIndex:int = keyTypeCombo.selectedIndex;
				var keyTypeList:Array = new Array();
				keyTypeList.push("Show All");
				for each (var attrCol:IAttributeColumn in columns.getObjects())
				{
					if(attrCol is KeyColumn)
						continue;
					
					var keyType:String = ColumnUtils.getKeyType(attrCol);
					
					if(keyType == null)
						keyType = "null"
					if(keyTypeList.indexOf(keyType) == -1)
						keyTypeList.push(keyType);
				}
				keyTypeCombo.dataProvider = keyTypeList;				
				keyTypeCombo.selectedItem = filterByKeyType.value || 'Show All';
			}
			
			public function getExportDataProvider():*
			{
				for each (var column:IAttributeColumn in columns.getObjects())
				{
					while (!(column is IPrimitiveColumn) && column is IColumnWrapper)
						column = (column as IColumnWrapper).internalColumn;
					
					if (column is SecondaryKeyNumColumn)
					{
						// dimension slider hack -- relies on previously set SecondaryKeyNumColumn.allKeysHack = true;
						var key:IQualifiedKey;
						var keyLookup:Dictionary = new Dictionary(true);
						for each (column in columns.getObjects())
						for each (key in column.keys)
						keyLookup[key] = true;
						var keys:Array = [];
						for (var keyObj:* in keyLookup)
							keys.push(keyObj);
						return keys;
					}
				}
				return dataGrid.dataProvider;
			}
			private function generateCSV():String{
				var keys:* = getExportDataProvider();
				// each record has a property named after the column title equal to the value in that column for the current key
				var dataType:Class = (keys === dataGrid.dataProvider) ? null : String; // dimension slider hack
				var dataTableColumns:Array = columns.getObjects();
				var generatedCSVstring:String = ColumnUtils.generateTableCSV(dataTableColumns,keys,dataType);
				return generatedCSVstring;
			}
			
			private function handleDataCopy(event:Event):void
			{											
				Clipboard.generalClipboard.setData(ClipboardFormats.TEXT_FORMAT,generateCSV() );
			}
			
			
			private var _minSuggestedColumnSize:int = 100;
			
			private function updateDataGridColumns():void
			{
				// if there isn't a parent or the grid isn't fully instantiated, return
				if (!parent || dataGrid.width == 0)
					return callLater(updateDataGridColumns);
				try {
					var attrColumns:Array = columns.getObjects();
					_currentDataGridColumns = [];
					for each (var attrColumn:IAttributeColumn in attrColumns)
					{
						var columnName:String = columns.getName(attrColumn);						
						var dataType:String = ColumnUtils.getDataType(attrColumn);
						
						//column Section
						var dgc:WeaveCustomDataGridColumn;
						if(dataGridColumns[columnName]){
							dgc = dataGridColumns[columnName];
						}
						else{
							dgc = new WeaveCustomDataGridColumn(attrColumn);	
							//EventUtils.addBindCallback(dgc,"width",function():void{trace()},null);
							dataGridColumns[columnName] = dgc;
						}
						
						_currentDataGridColumns.push(dgc);
						
						//filterComponent Section
						var classDef:Class = null;
						if (attrColumn is KeyColumn){
							classDef = SearchFilterComponent;										
						}
						if (dataType == DataTypes.STRING){
							classDef = SearchFilterComponent;
						}
						else if(dataType == DataTypes.NUMBER){
							classDef = SliderFilterComponent;
						}						
						dgc.filterComponent = filterComponents.requestObject(columnName, classDef, false);
						
						//columnWidth section
						columnWidths.requestObject(columnName, LinkableString,false);
						
					}  
					dataGrid.columns = _currentDataGridColumns;
				}
				catch (error:Error)	{
					reportError(error);
				}
			}
			
			private function handleColumnReorder(event:IndexChangedEvent):void
			{
				var newColumnOrder:Array = [];				
				for(var i:int = 0; i< dataGrid.columns.length; i++)
				{
					var currDGcolumn:WeaveCustomDataGridColumn = dataGrid.columns[i] as WeaveCustomDataGridColumn;
					var columnName:String = columns.getName(currDGcolumn.attrColumn as ILinkableObject);
					newColumnOrder.push(columnName);
				}			
				columns.setNameOrder(newColumnOrder);				
			}
			
			private function handleColumnListChange():void
			{			
				showKeyColumnCheckBox.selected = columns.getNames(KeyColumn).length > 0;				
				
				//if column is added , we need to add respective sessioned FilterComponent and ColumnWidth
				if (columns.childListCallbacks.lastObjectAdded){
					
				}  			
					//if column is removed , we need to remove respective sessioned FilterComponent and ColumnWidth
				else if (columns.childListCallbacks.lastObjectRemoved){						
					filterComponents.removeObject(columns.childListCallbacks.lastNameRemoved);					
					delete dataGridColumns[columns.childListCallbacks.lastNameRemoved]
					columnWidths.removeObject(columns.childListCallbacks.lastNameRemoved);
				}
				else{
					filterComponents.setNameOrder(columns.getNames());
					columnWidths.setNameOrder(columns.getNames());
				}
			}
			
			private function handleColumnStretch():void
			{
				var dataGridColumnsWidth:Number = dataGrid.getColumnDisplayWidth();
				for (var i:int = 0; i < _currentDataGridColumns.length; ++i)
				{
					var dgc:WeaveCustomDataGridColumn = _currentDataGridColumns[i];
					var width:Number = dgc.width;					
					
					var column:IAttributeColumn = dgc.attrColumn;
					var columnName:String = columns.getName(column);
					var sessionedWidth:LinkableString = columnWidths.getObject(columnName) as LinkableString;
					
					if (isNaN(width) || width <= 5) // this happens when a column is stretched all the way to the right
						width = _minSuggestedColumnSize;	
					
					sessionedWidth.value = (100 * width / dataGridColumnsWidth) + "%";
					if(dgc.filterComponent){
						dgc.filterComponent.width = dgc.width;
					}	
				}
			}
			
			private  function updateColumnWidths():void
			{				
				// if there isn't a parent or the grid isn't fully instantiated, return
				if (!parent || dataGrid.width == 0  )
				{
					callLater(updateColumnWidths);
					return;
				}
				var allotedDisplayWidth:Number = dataGrid.getColumnDisplayWidth();
				
				var defaultValue:Number = allotedDisplayWidth/_currentDataGridColumns.length;
				var displayedColumnsTotalWidth:Number = 0;
				for (var j:int = 0  ; j < _currentDataGridColumns.length; j++)
				{
					var dgc:WeaveCustomDataGridColumn = _currentDataGridColumns[j] as WeaveCustomDataGridColumn;
					var columnName:String = columns.getName(dgc.attrColumn);
					if (columnName == null)
						continue;
					var sessionedWidth:LinkableString = columnWidths.getObject(columnName) as LinkableString;
					// we don't want to create a sessionedWidth because one will be created later if the column wasn't disposed
					if (sessionedWidth == null)
						continue; 
					var tempWidth:Number;
					if(sessionedWidth.value ){	
						var sessionedValue:Number = NumberUtils.getNumberFromNumberOrPercent(sessionedWidth.value, allotedDisplayWidth);
						tempWidth = sessionedValue;
					}
					else{
						tempWidth = defaultValue;					
						sessionedWidth.value = (100 * tempWidth/allotedDisplayWidth) + "%";
					}
					//last column gets width to adjust in datgrid, so its necessay to get that width.					
					if(j == _currentDataGridColumns.length -1) {
						tempWidth = allotedDisplayWidth - displayedColumnsTotalWidth ;
						sessionedWidth.value = "";
					}
					if (tempWidth <= 5 || isNaN(tempWidth)) {
						tempWidth = _minSuggestedColumnSize;	
					}	
					//floor required as rendering works fast with whole number than with an integer
					var newWidth:Number = Math.floor(Math.min(tempWidth, allotedDisplayWidth));
					
					dgc.setWidth(newWidth);
					dgc.width = newWidth;
					
					if (dgc.filterComponent){
						dgc.filterComponent.width = dgc.width;
					}
					//add those columns which are dispalyed on datagrid
					if(j >= dataGridHorizontalScrollPosition.value){
						displayedColumnsTotalWidth = displayedColumnsTotalWidth + dgc.width;
					}					
				}
				displayedColumnsTotalWidth = 0;
			}
			
			private function handleDataGridHorizontalScroll():void
			{
				var maximumValue:int = dataGrid.maxHorizontalScrollPosition;				
				var hsp:int = 0;
				for (var i:int = 0; i < dataGridHorizontalScrollPosition.value && i < _currentDataGridColumns.length; i++){
					hsp += (_currentDataGridColumns[i] as WeaveCustomDataGridColumn).width;
				}					
				filterControls.horizontalScrollPosition = hsp;
				dataGrid.horizontalScrollPosition = dataGridHorizontalScrollPosition.value;
				
				if(maximumValue > 0 && dataGridHorizontalScrollPosition.value == maximumValue){
					updateColumnWidths();
				}
			}
			
			
			private function handleKeyColumnCheckBox():void
			{
				if(showKeyColumnCheckBox.selected)
				{
					var kc:Array= columns.getObjects(KeyColumn);
					if(kc.length == 0)
					{
						var nameOrder:Array = columns.getNames();
						columns.requestObject("KeyColumn",KeyColumn, false);
						columns.setNameOrder(nameOrder);
					}					
					updateKeyTypeComboBox();
					
				}
				else
				{
					var keyCols:Array = columns.getNames(KeyColumn);
					for each(var keyCol:String in keyCols)
					{
						columns.removeObject(keyCol);
					}
				}
				
			}
			public const showControls:LinkableBoolean = registerLinkableChild(this, new LinkableBoolean(false), updateControls);
			private function updateControls():void
			{
				if (!parent)
					return callLater(updateControls);
				try
				{
					if (showControls.value)
					{
						if (!topControls.parent)
							tableArea.addChildAt(topControls, 0);
						if (!bottomControls.parent)
							tableArea.addChild(bottomControls);
					}
					else
					{
						if (topControls.parent)
							tableArea.removeChild(topControls);
						if (bottomControls.parent)
							tableArea.removeChild(bottomControls);
					}
				}
				catch (e:Error) 
				{
				}
			}
			
			public const showFilters:LinkableBoolean = registerLinkableChild(this, new LinkableBoolean(false),updateFilters);
			private function updateFilters():void
			{
				if (!parent)
					return callLater(updateFilters);
				try
				{
					if (showFilters.value){
						if (!filterControls.parent){
							lockedColumns.value = 0;
							
							// if there are controls above where the filters should be.. add the filters at index 1, otherwise use index 0
							tableArea.addChildAt(filterControls, topControls.parent ? 1 : 0);							
							dataGrid.enableFilters = true;
						}
					}
					else{						
						if (filterControls.parent){							
							tableArea.removeChild(filterControls);
							dataGrid.enableFilters = false;
						}
					}
				}
				catch (e:Error) 
				{
				}
			}
			
			public const showColors:LinkableBoolean = registerLinkableChild(this, new LinkableBoolean(false), updateColumnCellDisplay);
			private function updateColumnCellDisplay():void
			{
				var colNames:Array = columns.getNames();
				var i:int;
				var filterableColumn:WeaveCustomDataGridColumn;
				if (showColors.value)
				{
					for (i = 0; i < colNames.length; i++)
					{
						filterableColumn = _currentDataGridColumns[i] as WeaveCustomDataGridColumn;
						//while loading initially - WeaveCustomDataGridColumn wont get created
						if (!filterableColumn)
							continue;
						var cf:ClassFactory = new ClassFactory(DataGridCellRenderer);
						cf.properties = {
							colorColumn: Weave.root.getObject(Weave.DEFAULT_COLOR_COLUMN),
								keySet: Weave.root.getObject(Weave.DEFAULT_SELECTION_KEYSET) as KeySet
						};
						filterableColumn.itemRenderer = cf;
					}
				}
				else
				{
					for (i = 0; i < colNames.length; i++)
					{
						filterableColumn = _currentDataGridColumns[i] as WeaveCustomDataGridColumn;	
						//while loading initially - WeaveCustomDataGridColumn wont get created
						if (filterableColumn)
							filterableColumn.itemRenderer =  new ClassFactory(Label);	
					}
				}
			}
			
			
			public const lockedColumns:LinkableNumber = registerLinkableChild(this, new LinkableNumber(0),handleLockedColumnChange);
			private function handleLockedColumnChange():void
			{
				if (!parent)
				{
					callLater(handleLockedColumnChange);
					return;
				}
				if (lockedColumns.value < 0 || lockedColumns.value > dataGrid.columns.length){
					lockedColumns.value = 0;
					
				}
				if(lockedColumns.value > 0){
					showFilters.value = false;
				} 
				dataGrid.lockedColumnCount = lockedColumns.value;
				
			}
			
			
			protected function dataGrid_updateCompleteHandler(event:FlexEvent):void
			{
				filterControls.setStyle("paddingLeft", dataGrid.viewMetrics.left);
				filterControls.setStyle("paddingRight", dataGrid.viewMetrics.right);
			}
			
		]]>
	</mx:Script>
	<ui:ControlPanel>
		<mx:VBox id="attributesPanel" label="Attributes for Data Table">
			<ui:ColumnListComponent id="dimensionsList"  backgroundAlpha="0.7" height="100%" width="100%" label="Columns"/>
			<mx:Button label="Add Image Column" click="addImageColumn()" />
			<mx:CheckBox id="showControlsCheckBox" label="Show controls on panel"/>
			<mx:CheckBox id="showFiltersCheckBox" label="Show Filters on panel"/>
			<mx:CheckBox id="showColorsCheckBox" label="Show Colors"/>
			<mx:CheckBox change="handleKeyColumnCheckBox()" id="showKeyColumnCheckBox" label="Show Key Column"/>
			<mx:CheckBox label="Export keys with data" creationComplete="linkBindableProperty(exportKeys, event.target, 'selected');"/>
			<mx:Button label="Export Data..." click="exportCSV()" />
			<mx:HBox>
				<mx:Label text="Number of Locked Columns"/>
				<mx:NumericStepper id="numLockedColumns" minimum="0" maximum="{dataGrid.columns.length}" 
								   creationComplete="linkBindableProperty(lockedColumns, event.target, 'value');"/>	
			</mx:HBox>			
		</mx:VBox>
		<editors:WindowSettingsEditor target="{this}"/>
	</ui:ControlPanel>
</ui:DraggablePanel>
