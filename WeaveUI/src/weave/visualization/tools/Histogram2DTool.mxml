<?xml version="1.0" encoding="utf-8"?>
<!--
/*
	Weave (Web-based Analysis and Visualization Environment)
	Copyright (C) 2008-2011 University of Massachusetts Lowell
	
	This file is a part of Weave.
	
	Weave is free software: you can redistribute it and/or modify
	it under the terms of the GNU General Public License, Version 3,
	as published by the Free Software Foundation.
	
	Weave is distributed in the hope that it will be useful,
	but WITHOUT ANY WARRANTY; without even the implied warranty of
	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
	GNU General Public License for more details.
	
	You should have received a copy of the GNU General Public License
	along with Weave.  If not, see <http://www.gnu.org/licenses/>.
*/
-->
<SimpleVisTool xmlns="weave.visualization.tools.*" 
			   xmlns:mx="http://www.adobe.com/2006/mxml"
			   xmlns:ui="weave.ui.*" 
			   xmlns:userControls="weave.ui.userControls.*"
			   xmlns:settings="weave.ui.settings.*"
			   layout="absolute">
	<mx:Script>
		<![CDATA[
			import weave.Weave;
			import weave.api.WeaveAPI;
			import weave.api.getCallbackCollection;
			import weave.api.linkBindableProperty;
			import weave.api.registerLinkableChild;
			import weave.api.ui.IVisTool;
			import weave.core.LinkableVariable;
			import weave.data.AttributeColumns.BinnedColumn;
			import weave.ui.AttributeSelectorPanel;
			import weave.ui.ColorController;
			import weave.ui.DraggablePanel;
			import weave.utils.BitmapText;
			import weave.utils.ColumnUtils;
			import weave.visualization.plotters.Histogram2DPlotter;
			
			WeaveAPI.registerImplementation(IVisTool, Histogram2DTool, "Histogram 2D");
			
			private function get plotter():Histogram2DPlotter
			{
				return mainPlotter as Histogram2DPlotter;
			}
			override protected function constructor():void
			{
				super.constructor();
				
				// lock dynamic objects into place
				initializePlotters(Histogram2DPlotter, true);
				visualization.enableProbeLine(false, true);
				
				xAxisPlotter.forceTickCount.value = true;
				visualization.enableZoomAndPan.value = false;
				
				visualization.enableProbeLine(true, true);
				
				visualization.plotManager.marginBottom.value = "80";
				visualization.plotManager.marginTop.value    = "10";
				visualization.plotManager.marginLeft.value   = "80";
				visualization.plotManager.marginRight.value  = "10";
				
				visualization.plotManager.marginLeftNumber.addGroupedCallback(this, updateAxisLabels);
				visualization.plotManager.marginBottomNumber.addGroupedCallback(this, updateAxisLabels);
				getCallbackCollection(visualization.plotManager.zoomBounds).addGroupedCallback(this, updateAxisLabels);
				getCallbackCollection(mainPlotter).addGroupedCallback(this, updateAxisLabels, true);
				
				visualization.bottomMarginClickCallbacks.addImmediateCallback(this, function():void { AttributeSelectorPanel.open(plotter.xColumn); })
				visualization.leftMarginClickCallbacks.addImmediateCallback(this, function():void { AttributeSelectorPanel.open(plotter.yColumn); })
						
				visualization.enableAutoZoomXToNiceNumbers.value = false;
				visualization.enableAutoZoomYToNiceNumbers.value = false;
				
				initColumnDefaults(plotter.xColumn, plotter.yColumn);
				
			}
			
			override protected function childrenCreated():void
			{
				super.childrenCreated();
				
				cRampEditor.colorRamp = plotter.binColors;
				handleBinColRadioButtonChange();
				xColumnComponent.dynamicObject = plotter.xColumn;
				yColumnComponent.dynamicObject = plotter.yColumn;
				colorColumnComponent.dynamicObject = Weave.defaultColorDataColumn.internalDynamicColumn;
				
				linkBindableProperty(attributesToIncludeInProbe,probeChecklist,"selection");
			}
			
			override public function getSelectableAttributeNames():Array
			{
				return ["X","Y"];
			}
			override public function getSelectableAttributes():Array
			{
				return [plotter.xColumn,plotter.yColumn];
			}
			
			public const attributesToIncludeInProbe:LinkableVariable = registerLinkableChild(this,new LinkableVariable(Array),updateProbeColumns,true);
			[Deprecated] public function set includeToolAttributesInProbe(value:Boolean):void
			{
				handleSelectAllAttrInProbe(value);
			}
			private function handleSelectAllAttrInProbe(setAll:Boolean):void
			{
				var attributes:Array = getSelectableAttributeNames();
				var valuesToSet:Array = [];
				if(setAll)
				{
					for each (var name:String in attributes)
					{
						valuesToSet.push(true);
					}
				}
				else
				{
					for each (var name2:String in attributes)
					{
						valuesToSet.push(false);
					}
				}
				attributesToIncludeInProbe.setSessionState(valuesToSet);
			}
			
			private function updateProbeColumns():void
			{
				/* first check to see if select all should be disabled or not */
				var attrToIncludeCheckList:Array = attributesToIncludeInProbe.getSessionState() as Array;
				
				if (attrToIncludeCheckList && attrToIncludeCheckList.indexOf(true) >= 0)
					probeColumnsCheckBox.selected = true;
				
				var attributes:Array = getSelectableAttributes();
				visualization.additionalProbeColumns = [];
				
				var xBinColIndex:int = attributes.indexOf(plotter.xColumn);
				if (plotter.xBinnedColumn.getInternalColumn() && attrToIncludeCheckList[xBinColIndex])
				{
					visualization.additionalProbeColumns.push(plotter.xBinnedColumn.getInternalColumn());
				}
				
				var yBinColIndex:int = attributes.indexOf(plotter.yColumn);
				if (plotter.yBinnedColumn.getInternalColumn() && attrToIncludeCheckList[yBinColIndex])
				{
					visualization.additionalProbeColumns.push(plotter.yBinnedColumn.getInternalColumn());
				}
			}
			
			private function handleBinColRadioButtonChange():void
			{
				var selectedCol:String = binColGroup.selectedValue as String;
				
				//it is null when the tool loads for the first time and so it defaults to the x column
				if (selectedCol == "xBinCol" || selectedCol == null)
				{
					xBinColRadioButton.setStyle('fontWeight','bold');
					yBinColRadioButton.setStyle('fontWeight','normal');
					
					binEditor.setTarget(plotter.xBinnedColumn);
				}
				else if (selectedCol == "yBinCol")
				{
					yBinColRadioButton.setStyle('fontWeight','bold');
					xBinColRadioButton.setStyle('fontWeight','normal');
					
					binEditor.setTarget(plotter.yBinnedColumn);
				}
			}
			
			override protected function get defaultPanelTitle():String
			{
				return lang("2D Histogram of {0} vs {1}", ColumnUtils.getTitle(plotter.xColumn), ColumnUtils.getTitle(plotter.yColumn));
			}
			
			private function updateAxisLabels():void
			{
				handlePanelTitleChange();
				visualization.bottomMarginColumn = plotter.xColumn;
				visualization.leftMarginColumn = plotter.yColumn;
				
				var xBinCol:BinnedColumn = plotter.xBinnedColumn;
				
				xAxisPlotter.tickCountRequested.value = xBinCol.numberOfBins;
				xAxisPlotter.tickMinValue.value = 0;
				xAxisPlotter.tickMaxValue.value = xBinCol.numberOfBins - 1;	
				xAxisPlotter.setLabelFunction(xBinCol.deriveStringFromNumber);
				
				var yBinCol:BinnedColumn = plotter.yBinnedColumn;
				
				yAxisPlotter.tickCountRequested.value = yBinCol.numberOfBins;
				yAxisPlotter.tickMinValue.value = 0;
				yAxisPlotter.tickMaxValue.value = yBinCol.numberOfBins - 1;	
				yAxisPlotter.setLabelFunction(yBinCol.deriveStringFromNumber);
				
				
				xAxisPlotter.setSideAxisName(ColumnUtils.getTitle(plotter.xColumn), 0, 0, visualization.plotManager.marginBottomNumber.value - 3, BitmapText.VERTICAL_ALIGN_BOTTOM);
				yAxisPlotter.setSideAxisName(ColumnUtils.getTitle(plotter.yColumn), -90, -visualization.plotManager.marginLeftNumber.value, 0, BitmapText.VERTICAL_ALIGN_TOP);
			}
		]]>
	</mx:Script>
	
	<ui:ControlPanel>
		<mx:VBox label="{lang('Visualization Controls')}">
			<ui:DynamicColumnComponent id="xColumnComponent" label="{lang('X Column')}"/>
			<ui:DynamicColumnComponent id="yColumnComponent" label="{lang('Y Column')}"/>
			<ui:CheckBoxWithNestedOptions id="probeColumnsCheckBox" label="{lang('Include tool attributes in mouseover info')}"
						 change="handleSelectAllAttrInProbe(probeColumnsCheckBox.selected)">
				<ui:CheckBoxList id="probeChecklist" dataProvider="{getSelectableAttributeNames()}" />
			</ui:CheckBoxWithNestedOptions>
		</mx:VBox>
		<mx:VBox label="{lang('Binning Controls')}">
				<mx:HBox>
					<mx:Label text="{lang('Select Column:')}"/>
					<mx:RadioButtonGroup id="binColGroup" change="handleBinColRadioButtonChange()"/>
					<mx:RadioButton groupName="binColGroup" label="{lang('X Column')}" value="xBinCol" id="xBinColRadioButton" selected="true"/>
					<mx:RadioButton groupName="binColGroup" label="{lang('Y Column')}" value="yBinCol" id="yBinColRadioButton"/>
				</mx:HBox>
			<ui:BinningDefinitionEditor id="binEditor"/>
		</mx:VBox>
		<mx:VBox label="{lang('Advanced')}">
			<mx:CheckBox id="showAverageColorData" label="{lang('Color by average data value instead of record count')}"
						 creationComplete="linkBindableProperty(plotter.showAverageColorData, event.currentTarget, 'selected');"/>
			<mx:HBox width="100%" verticalAlign="middle" enabled="{showAverageColorData.selected}">
				<ui:DynamicColumnComponent id="colorColumnComponent" label="{lang('Color data')}"/>
				<mx:Button label="{lang('Edit colors...')}" click="DraggablePanel.openStaticInstance(ColorController);"/>
			</mx:HBox>
			<ui:ColorRampEditor id="cRampEditor" enabled="{!showAverageColorData.selected}"/>
		</mx:VBox>
	</ui:ControlPanel>
</SimpleVisTool>
