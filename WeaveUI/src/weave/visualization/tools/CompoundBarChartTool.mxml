<?xml version="1.0" encoding="utf-8"?>
<!--
/*
    Weave (Web-based Analysis and Visualization Environment)
    Copyright (C) 2008-2011 University of Massachusetts Lowell

    This file is a part of Weave.

    Weave is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License, Version 3,
    as published by the Free Software Foundation.

    Weave is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with Weave.  If not, see <http://www.gnu.org/licenses/>.
*/
-->
<SimpleVisTool xmlns="weave.visualization.tools.*" 
	     xmlns:mx="http://www.adobe.com/2006/mxml"
	     xmlns:ui="weave.ui.*"
		 xmlns:userControls="weave.ui.userControls.*"
	     layout="absolute" xmlns:settings="weave.ui.settings.*">
	<mx:Script>
		<![CDATA[
			import weave.Weave;
			import weave.api.WeaveAPI;
			import weave.api.core.ILinkableObject;
			import weave.api.data.IAttributeColumn;
			import weave.api.getCallbackCollection;
			import weave.api.linkBindableProperty;
			import weave.api.newLinkableChild;
			import weave.api.registerLinkableChild;
			import weave.api.setSessionState;
			import weave.core.LinkableBoolean;
			import weave.core.LinkableNumber;
			import weave.core.weave_internal;
			import weave.data.AttributeColumns.DynamicColumn;
			import weave.data.AttributeColumns.FilteredColumn;
			import weave.data.AttributeColumns.ReferencedColumn;
			import weave.ui.AttributeSelectorPanel;
			import weave.ui.DynamicColumnComponent;
			import weave.utils.BitmapText;
			import weave.utils.ColumnUtils;
			import weave.visualization.layers.AxisLayer;
			import weave.visualization.plotters.CompoundBarChartPlotter;

			use namespace weave_internal;

			public var _plotter:CompoundBarChartPlotter = null;

			override protected function constructor():void
			{
				super.constructor();

				// lock dynamic objects into place
				_plotter = initDefaultPlotter(CompoundBarChartPlotter) as CompoundBarChartPlotter;
				visualization.enableProbeLine(false, true);
				_plotter.groupingMode.addGroupedCallback(this, updateProbeLines);
				_plotter.horizontalMode.addGroupedCallback(this, updateProbeLines);
				_plotter.horizontalMode.addImmediateCallback(this, updateAxisLabels);
				
				yAxisEnabled = true;
				xAxisEnabled = true;
				
				var objects:Array = [
						xAxisLayer.axisPlotter,
						yAxisLayer.axisPlotter,
						visualization.marginLeft,
						visualization.marginBottom,
						visualization.marginTop,
						visualization.marginRight,
						_plotter
					];
				for each (var object:ILinkableObject in objects)
					getCallbackCollection(object).addGroupedCallback(this, updateAxisLabels, true);
				
				for each (var override:ILinkableObject in [
						visualization.overrideXMin,
						visualization.overrideYMin,
						visualization.overrideXMax,
						visualization.overrideYMax])
				{
					for each (var axis:AxisLayer in [xAxisLayer, yAxisLayer])
						getCallbackCollection(override).addImmediateCallback(this, axis.axisPlotter.spatialCallbacks.triggerCallbacks);
				}

				showAllLabels.value = false;

				visualization.marginBottom.value = 80;
				visualization.marginLeft.value = 80;
				visualization.marginTop.value = 30;
				visualization.marginRight.value = 30;
				
				visualization.enableZoomAndPan.value = false;

				visualization.enableXAxisProbing = true;
				visualization.enableYAxisProbing = true;
				
				visualization.bottomMarginClickCallbacks.addImmediateCallback(this, handleAxisClick, [true]);
				visualization.leftMarginClickCallbacks.addImmediateCallback(this, handleAxisClick, [false]);
				
				var count:int = getDefaultColumnsOfMostCommonKeyType().length;
				var columnsToInit:Array = [_plotter.sortColumn];
				for (var i:int = 0; i < count; i++)
				{
					columnsToInit.push(_plotter.heightColumns.requestObject(null, DynamicColumn, false));
				}
				if(columnsToInit.length > 0)
					(initColumnDefaults as Function).apply(null, columnsToInit);
				_plotter.heightColumns.addGroupedCallback(this,updateProbeColumns);
			}
			
			override protected function childrenCreated():void
			{
				super.childrenCreated();
				cRampEditor.colorRamp = _plotter.chartColors;
				linkBindableProperty(_plotter.horizontalMode, horizontalCheckBox, "selected");
				linkBindableProperty(_plotter.barSpacing, barSpacingSlider, "value");
				linkBindableProperty(showAllLabels, showAllLabelsCheckBox, "selected");
				linkBindableProperty(_plotter.showValueLabels, showValueLabelsCheckBox, "selected");
				linkBindableProperty(_plotter.groupingMode, groupMode, 'selectedValue');
				_plotter.groupingMode.addGroupedCallback(this, updateInteractivity, true);
				_plotter.groupBySortColumn.addGroupedCallback(this, updateInteractivity, true);
				getCallbackCollection(_plotter.heightColumns).addGroupedCallback(this, updateInteractivity, true);
			}
			
			override public function getSelectableAttributeNames():Array
			{
				return [
					"Color",
					"Label",
					"Sort",
					"Height",
					"Positive Error",
					"Negative Error"
				];
			}
			override public function getSelectableAttributes():Array
			{
				return [
					colorColumn,
					_plotter.labelColumn,
					_plotter.sortColumn,
					_plotter.heightColumns,
					_plotter.positiveError,
					_plotter.negativeError
				];
			}
			
			public const includeToolAttributesInProbe:LinkableBoolean = registerLinkableChild(this, new LinkableBoolean(true), updateProbeColumns);
			
			private function updateProbeLines():void
			{
				if (_plotter.groupingMode.value == CompoundBarChartPlotter.GROUP) 
					visualization.disableProbelines();
				else if( _plotter.horizontalMode.value) 
					visualization.enableProbeLine(true, false);
				else
					visualization.enableProbeLine(false, true ) ;
			}
			
			private function updateProbeColumns():void
			{
				if (includeToolAttributesInProbe.value)
				{
					var col:IAttributeColumn;
					var columns:Array = _plotter.heightColumns.getObjects(IAttributeColumn);
					if (columns.length <= 1)
					{
						// get all ReferencedColumn objects
						var refCols:Array = WeaveAPI.SessionManager.getLinkableDescendants(_plotter.colorColumn, ReferencedColumn);
						for each (col in refCols)
							columns.unshift(col);
					}
					columns.unshift(_plotter.labelColumn, _plotter.sortColumn);
					columns.push(_plotter.positiveError, _plotter.negativeError);
//					columns.concat(_plotter.positiveErrorColumns.getObjects());
//					columns.concat(_plotter.negativeErrorColumns.getObjects());
					visualization.additionalProbeColumns = columns;
				}
				else
					visualization.additionalProbeColumns = null;
			}
			
			private function numberToString(value:Number):String
			{
				return value.toString();
			}
			
			private function handleAxisClick(isXAxis:Boolean):void
			{
				if (isXAxis != _plotter.horizontalMode.value)
					AttributeSelectorPanel.openToolSelector(this,_plotter.sortColumn);
				else
					AttributeSelectorPanel.openToolSelector(this,_plotter.heightColumns);
			}
			
			/**
			 * When this is set to true, labels for all bars will be shown.
			 */
			public const showAllLabels:LinkableBoolean = newLinkableChild(this, LinkableBoolean, updateAxisLabels, true);
			
			override protected function handlePanelTitleChange():void
			{
				super.handlePanelTitleChange();
				if (!panelTitle.value)
				{
					var columns:Array = _plotter.heightColumns.getObjects(IAttributeColumn);
					for (var i:int = 0; i < columns.length; i++)
						columns[i] = ColumnUtils.getTitle(columns[i] as IAttributeColumn);
					title = "Bar Chart of " + columns.join(', ');
				}
			}
			
			public function get colorColumn():DynamicColumn
			{
				var fc:FilteredColumn = Weave.root.getObject(Weave.DEFAULT_COLOR_DATA_COLUMN) as FilteredColumn;
				return fc.internalDynamicColumn;
			}
			
			
			public const sizeAxisTickCountRequested:LinkableNumber = registerLinkableChild(this, new LinkableNumber(5), updateAxisLabels, true);

			private function updateAxisLabels():void
			{
				handlePanelTitleChange();
				
				var heightColumns:Array = _plotter.heightColumns.getObjects();
				
				var sortAxisTitle:String = "Sorted by " + ColumnUtils.getTitle(_plotter.sortColumn);
				var heightAxisTitle:String = '';
				for (var i:int = heightColumns.length - 1; i >= 0; i--) // reverse order
				{
					heightAxisTitle += ColumnUtils.getTitle(heightColumns[i] as IAttributeColumn);
					if (i > 0)
						heightAxisTitle += ', ';
				}
				if (heightAxisTitle == '')
					heightAxisTitle = "Click to select...";

				var sortAxisToolTipColumn:IAttributeColumn = _plotter.sortColumn;
				var heightAxisToolTipColumn:IAttributeColumn = heightColumns.length > 0 ? heightColumns[0] : null;
				
				var sortAxisLayer:AxisLayer;
				var heightAxisLayer:AxisLayer;
				
				var xAxisTitle:String; // title for x axis, whether or not horizontal mode is on
				var yAxisTitle:String; // title for y axis, whether or not horizontal mode is on

				// BEGIN handling of horizontal/vertical mode ----------------------
				
				if (_plotter.horizontalMode.value)
				{
					yAxisTitle = sortAxisTitle;
					sortAxisLayer = yAxisLayer;
					visualization.setYAxisColumn(sortAxisToolTipColumn);
					
					heightAxisLayer = xAxisLayer;
					xAxisTitle = heightAxisTitle;
					visualization.setXAxisColumn(heightAxisToolTipColumn);
				}
				else
				{
					xAxisTitle = sortAxisTitle;
					sortAxisLayer = xAxisLayer;
					visualization.setXAxisColumn(sortAxisToolTipColumn);
					
					yAxisTitle = heightAxisTitle;
					heightAxisLayer = yAxisLayer;
					visualization.setYAxisColumn(heightAxisToolTipColumn);
				}

				sortAxisLayer.axisPlotter.setLabelFunction(_plotter.sortAxisLabelFunction);
				heightAxisLayer.axisPlotter.setLabelFunction(heightAxisLabelFunction);
				
				
				// height axis uses automatic min,max based on data
				heightAxisLayer.axisPlotter.tickMinValue.value = NaN;
				heightAxisLayer.axisPlotter.tickMaxValue.value = NaN;
				heightAxisLayer.axisPlotter.forceTickCount.value = false;
				heightAxisLayer.axisPlotter.tickCountRequested.value = sizeAxisTickCountRequested.value;

				// sort axis automatic min,max would be -0.5, numBars-0.5.  we don't want that.
				sortAxisLayer.axisPlotter.tickMinValue.value = 0;
				sortAxisLayer.axisPlotter.tickMaxValue.value = _plotter.maxTickMarks - 1;
				sortAxisLayer.axisPlotter.forceTickCount.value = showAllLabels.value;
				if (showAllLabels.value)
					sortAxisLayer.axisPlotter.tickCountRequested.value = _plotter.maxTickMarks;
				else
					sortAxisLayer.axisPlotter.tickCountRequested.value = Math.min(_plotter.maxTickMarks, 11);
				
				// END handling of horizontal/vertical mode --------------------------------
				
				xAxisLayer.axisPlotter.setSideAxisName(xAxisTitle, 0, 0, visualization.marginBottom.value - 3, BitmapText.VERTICAL_ALIGN_BOTTOM);
				yAxisLayer.axisPlotter.setSideAxisName(yAxisTitle, -90, -visualization.marginLeft.value, 0, BitmapText.VERTICAL_ALIGN_TOP);
			}
			
			private function heightAxisLabelFunction(value:Number):String
			{
				var _heightColumns:Array = _plotter.heightColumns.getObjects();
				if (_plotter.getActualGroupingMode() == CompoundBarChartPlotter.PERCENT_STACK && _heightColumns.length > 1)
					return value + '%';
				else if (_heightColumns.length == 1)
					return ColumnUtils.deriveStringFromNumber(_heightColumns[0], value);
				return null;
			}
			
			
			private function alphaSliderFormatFunction(item:Number):String {
				//return int(100 - (item * 100)) + "% Transparent";
				return int((item * 100)) + "% Opaque" + "\n" + int(100 - (item * 100)) + "% Transparent";
			}
			
			private function updateInteractivity():void
			{
				if (!parent)
					return callLater(updateInteractivity);
				var _heightColumns:Array = _plotter.heightColumns.getObjects();
				
				if (_heightColumns.length > 1)
				{
					cRampEditor.enabled = true;
					groupMode.enabled = true;
					showValueLabelsCheckBox.enabled = groupedRadioButton.selected;
					colorColumnInput.enabled = false;
				}
				else
				{
					cRampEditor.enabled = false;
					groupMode.enabled = false;
					showValueLabelsCheckBox.enabled = true;
					colorColumnInput.enabled = true;
				}
				labelColumnInput.enabled = !_plotter.groupBySortColumn.value;
			}
			
			private const groupCheckDisabledToolTip:String = 'There is only one attribute chosen for this bar chart, therefore it is a standard (not grouped or stacked) and this feature is disabled.';
			private const groupCheckEnabledToolTip:String = 'Check this box to group rather than stack the bars.  \n\nIn stacked mode each segment representing a single record at a given attribute are placed together along a single bar, each segment representing a proportion of the entire bar length.  \n\nIn grouped mode, each bar representing a single record at a given attribute are placed side-by-side.';
			
			protected function Legend_clickHandler(event:MouseEvent):void
			{
				var barChartLegendTool:BarChartLegendTool = Weave.root.requestObject(null, BarChartLegendTool, false);
				barChartLegendTool.dynamicBarChartTool.globalName = Weave.root.getName(this);
			}
			
			[Deprecated] public function set labelColumn(value:Object):void
			{
				setSessionState(_plotter.labelColumn, value);
			}
		]]>
	</mx:Script>
	<ui:ControlPanel>
		<mx:VBox id="attributesPanel" label="Attributes">
			<ui:DynamicColumnComponent visTool="{this}" id="colorColumnInput" label="Color" creationComplete="(event.target as DynamicColumnComponent).dynamicObject = colorColumn"
									   toolTip="Color column selection is enabled when only a single column is in the list below."/>
			<ui:DynamicColumnComponent visTool="{this}" id="labelColumnInput" label="Label" creationComplete="(event.target as DynamicColumnComponent).dynamicObject = _plotter.labelColumn"/>
			<ui:DynamicColumnComponent visTool="{this}" label="Sort" creationComplete="(event.target as DynamicColumnComponent).dynamicObject = _plotter.sortColumn"/>
			<mx:CheckBox id="groupBySortColumnCheckBox" label="Group bars by the sort column" creationComplete="linkBindableProperty(_plotter.groupBySortColumn, event.target, 'selected');"/>
			<!-- <mx:TabNavigator> -->
				<ui:ColumnListComponent visTool="{this}" label="Height attributes" minimumNumObjectsInList="1" creationComplete="(event.target as ColumnListComponent).hashMap = _plotter.heightColumns"/>
<!--
				<ui:ColumnListComponent visTool="{this}" label="Positive error" minimumNumObjectsInList="1" creationComplete="(event.target as ColumnListComponent).hashMap = _plotter.positiveErrorColumns"/>
				<ui:ColumnListComponent visTool="{this}" label="Negative error" minimumNumObjectsInList="1" creationComplete="(event.target as ColumnListComponent).hashMap = _plotter.negativeErrorColumns"/>
			</mx:TabNavigator> -->
		</mx:VBox>
		
		<mx:VBox label="Bar Properties">
			<mx:Button label="Show legend" click="Legend_clickHandler(event)"/>
			<mx:CheckBox id="horizontalCheckBox" label="Horizontal bars"
						 toolTip="Check this box to display the bars horizontally, with values setting the length of the bar (from left to right) rather than the height (from bottom to top)."/>
			<mx:HBox>
				<mx:RadioButtonGroup id="groupMode"/>
				<mx:RadioButton id="stackedRadioButton" groupName="groupMode" label="Stacked bars" value="{CompoundBarChartPlotter.STACK}"/>
				<mx:RadioButton id="percentStackedRadioButton" groupName="groupMode" label="100% Stacked bars" value="{CompoundBarChartPlotter.PERCENT_STACK}"/>
				<mx:RadioButton id="groupedRadioButton" groupName="groupMode" label="Grouped bars" value="{CompoundBarChartPlotter.GROUP}"/>
			</mx:HBox>
			
			<userControls:ControlsSubsetBox>
				<mx:Label text="Bar spacing:"/>
				<mx:HSlider id="barSpacingSlider" value="0" minimum="0" maximum="1" labels="['No gap', '1:4', '1:1']" tickInterval="0.25"
							toolTip="Move this slider to change the gap between bars.  All the way to the left means no gap.  The highest value is a 1:1 ratio, meaning equal bar width to gap width." showDataTip="false"
							liveDragging="true"/>
			</userControls:ControlsSubsetBox>
			<mx:CheckBox id="showAllLabelsCheckBox" label="Show all bar labels"
						 toolTip="This option will always show a label for each bar."/>
			<mx:HBox>				
				<mx:CheckBox id="showValueLabelsCheckBox" label="Show value labels"
							 toolTip="This option will show a value label for each bar."/>
				<mx:ColorPicker id="valueLabelColorPicker" creationComplete="linkBindableProperty(_plotter.valueLabelColor, event.target, 'selectedColor');"/>
				<mx:Label text="Value label position"/>
				<mx:TextInput id="valueDataCoordTxtInput" 
							  creationComplete="linkBindableProperty(_plotter.labelBarHeightPercentage, event.target, 'text')"/>
			</mx:HBox>
			<mx:CheckBox id="zoomToSubsetCheckBox" label="Zoom to subset" 
						 toolTip="Enables automatic zooming to the subset of data currently displayed"
						 creationComplete="linkBindableProperty(_plotter.zoomToSubset, event.target, 'selected')"/>
			<mx:CheckBox id="probeColumnsCheckBox" label="Include tool attributes in probe tooltip"
						 toolTip="Checking this box makes all of the following attributes visible in this tool's probe tooltip"
						 creationComplete="linkBindableProperty(includeToolAttributesInProbe,event.target,'selected')"/>
		</mx:VBox>
		<mx:VBox id="advControlsPanel" label="Advanced">
			<ui:ColorRampEditor id="cRampEditor" toolTip="The color ramp can only be set when more than one height column is specified."/>
			<ui:DynamicColumnComponent visTool="{this}" label="Positive error" creationComplete="(event.target as DynamicColumnComponent).dynamicObject = _plotter.positiveError"/>
			<ui:DynamicColumnComponent visTool="{this}" label="Negative error" creationComplete="(event.target as DynamicColumnComponent).dynamicObject = _plotter.negativeError"/>
		</mx:VBox>
	</ui:ControlPanel>
</SimpleVisTool>
