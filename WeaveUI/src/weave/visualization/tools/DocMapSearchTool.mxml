<?xml version="1.0" encoding="utf-8"?>
<!--
/* ***** BEGIN LICENSE BLOCK *****
 *
 * This file is part of Weave.
 *
 * The Initial Developer of Weave is the Institute for Visualization
 * and Perception Research at the University of Massachusetts Lowell.
 * Portions created by the Initial Developer are Copyright (C) 2008-2015
 * the Initial Developer. All Rights Reserved.
 *
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this file,
 * You can obtain one at http://mozilla.org/MPL/2.0/.
 * 
 * ***** END LICENSE BLOCK ***** */
-->
<ui:DraggablePanel xmlns="weave.visualization.tools.*"
                   xmlns:mx="http://www.adobe.com/2006/mxml"
                   xmlns:ui="weave.ui.*" 
                   xmlns:CustomDataGrid="weave.ui.CustomDataGrid.*"
                   implements="weave.api.ui.IVisTool, weave.api.ui.ISelectableAttributes"
                   title="{lang('Document Collection Search')}" xmlns:editors="weave.editors.*">

                   <mx:Script>
<![CDATA[

import mx.binding.utils.BindingUtils;
import mx.collections.ArrayCollection;
import mx.rpc.events.FaultEvent;
import mx.rpc.events.ResultEvent;

import weave.Weave;
import weave.api.data.IQualifiedKey;
import weave.api.detectLinkableObjectChange;
import weave.api.disposeObject;
import weave.api.linkBindableProperty;
import weave.api.newLinkableChild;
import weave.api.objectWasDisposed;
import weave.api.registerLinkableChild;
import weave.api.reportError;
import weave.api.ui.IVisTool;
import weave.core.LinkableNumber;
import weave.core.LinkableString;
import weave.core.LinkableVariable;
import weave.core.LinkableBoolean;
import weave.data.AttributeColumns.DynamicColumn;
import weave.data.DataSources.DocumentMapDataSource;
import weave.data.KeySets.KeySet;
import weave.data.KeySets.KeyFilter;
import weave.services.AMF3Servlet;
import weave.services.ProxyAsyncToken;
import weave.services.addAsyncResponder;
import weave.utils.ColumnUtils;
import weave.utils.VectorUtils;

private const _probe:KeySet = Weave.defaultProbeKeySet;
private const _selection:KeySet = Weave.defaultSelectionKeySet;
private const _subset:KeyFilter = Weave.defaultSubsetKeyFilter;

WeaveAPI.ClassRegistry.registerImplementation(IVisTool, DocMapSearchTool, "Document Collection Search");

public const searchQuery:LinkableString = newLinkableChild(this, LinkableString, queryChanged, true);
public const collectionName:LinkableString = newLinkableChild(this, LinkableString, queryChanged, true);
public const savedQueries:LinkableVariable = newLinkableChild(this, LinkableVariable, savedQueriesChanged, true);
public const useSubsetting:LinkableBoolean = newLinkableChild(this, LinkableBoolean);

private var _service:AMF3Servlet = null;
private var _source:DocumentMapDataSource = null;

override protected function inConstructor():void
{
    super.inConstructor();
}

private function updateService():void
{
	var dataSources:Array = WeaveAPI.globalHashMap.getObjects(DocumentMapDataSource);
    if (dataSources.length == 0) return;

    _source = dataSources[0] as DocumentMapDataSource;

    if (detectLinkableObjectChange(this, _source))
    {
    	disposeObject(_service);
    	_service = registerLinkableChild(this, new AMF3Servlet(_source.url.value));
    }
}

private function queryChanged():void
{
	if (!collectionName.value) return;

	if (!searchQuery.value)
	{
        if (useSubsetting.value)
        {
	       _subset.replaceKeys(true, true, null, null);
        }
        else
        {
          _selection.clearKeys();
        }
		return;
	}

	var query:String = searchQuery.value;
	var collection:String = collectionName.value;

	updateService();

    savedQueriesList.selectedItem = query;

    _source.searchRecords(collection, query).then(
        function(result:Array):void
        {
            if (useSubsetting.value)
            {
                _subset.replaceKeys(false, true, result, null);
            }
            else
            {
                _selection.replaceKeys(result);
            }
        });
}

private function savedQueriesChanged():void
{
    savedQueriesList.dataProvider = savedQueries.getSessionState() as Array || [];
    savedQueriesList.selectedItem = searchQuery.value;
}

private function saveQuery():void
{
    if (searchBox.text)
    {
        var queries:Array = savedQueries.getSessionState() as Array || [];
        queries.push(searchBox.text);
        savedQueries.setSessionState(queries);
    }
}

private function removeQuery():void
{
    var queries:Array = savedQueries.getSessionState() as Array || [];
    var idx:int = queries.indexOf(savedQueriesList.selectedItem);
    if (idx != -1)
    {
        queries.splice(idx, 1);
        savedQueries.setSessionState(queries);
    }
}

private function savedQuerySelected(object:Object):void
{
    var savedQuery:String = savedQueriesList.selectedItem as String;
    if (savedQuery)
    {
        searchQuery.value = savedQuery;
    }
}

override protected function childrenCreated():void
{
    super.childrenCreated();

    linkBindableProperty(searchQuery, searchBox, 'text', 100, false);
    BindingUtils.bindSetter(savedQuerySelected, savedQueriesList, "selectedItem", true);

    return;
}

public function getSelectableAttributes():Array
{
    return [];
}

public function getSelectableAttributeNames():Array
{
    return [];
}

]]>
</mx:Script>
<mx:VBox>
    <mx:HBox>
        <ui:TextInputWithPrompt id="searchBox" prompt="{lang('Search')}"/>
        <mx:Button label="{lang('+')}" click="saveQuery()"/>
        <mx:Button label="{lang('-')}" click="removeQuery()" enabled="{savedQueriesList.selectedItem}"/>
    </mx:HBox>
    <mx:List width="100%" id="savedQueriesList"/>
</mx:VBox>
	<ui:editorFactory>
		<mx:Component>
			<ui:ControlPanel>
				<mx:Script>
					<![CDATA[
						import weave.api.linkBindableProperty;
					]]>
				</mx:Script>
		        <mx:VBox label="{lang('Visualization Controls')}">
		            <mx:CheckBox id="enableSubsettingCheckbox" label="{lang('Use search results as subset instead of selection.')}"
								 creationComplete="linkBindableProperty(outerDocument.useSubsetting, enableSubsettingCheckbox, 'selected');"/>
		            <mx:HBox width="100%">
		                <mx:Label text="{lang('Collection name:')}"/>
		                <mx:TextInput id="collectionNameInput"
		                          width="100%"
		                          toolTip="{lang('The name of the document collection to search.')}"
		                          creationComplete="linkBindableProperty(outerDocument.collectionName, collectionNameInput, 'text', 300, false);"/>
		            </mx:HBox>
		        </mx:VBox>
		        <editors:WindowSettingsEditor target="{this}"/>
			</ui:ControlPanel>
		</mx:Component>
	</ui:editorFactory>
</ui:DraggablePanel>