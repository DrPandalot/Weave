<ui:DraggablePanel xmlns="weave.visualization.tools.*"
                   xmlns:mx="http://www.adobe.com/2006/mxml"
                   xmlns:ui="weave.ui.*" 
                   xmlns:CustomDataGrid="weave.ui.CustomDataGrid.*"
                   implements="weave.api.ui.IVisTool, weave.api.ui.ISelectableAttributes"
                   title="{lang('Document Collection Search')}" xmlns:editors="weave.editors.*">

                   <mx:Script>
<![CDATA[

import weave.Weave;

import weave.api.data.IQualifiedKey;
import weave.api.linkBindableProperty;
import weave.api.newLinkableChild;
import weave.api.registerLinkableChild;
import weave.api.detectLinkableObjectChange;
import weave.api.ui.IVisTool;
import weave.core.LinkableVariable;
import weave.core.LinkableString;
import weave.core.LinkableNumber;
import weave.data.AttributeColumns.DynamicColumn;
import weave.data.KeySets.KeySet;
import weave.data.DataSources.DocumentMapDataSource;
import weave.utils.ColumnUtils;
import weave.utils.VectorUtils;
import weave.api.disposeObject;
import weave.api.objectWasDisposed;
import weave.api.reportError;

import mx.binding.utils.BindingUtils;
import mx.rpc.events.FaultEvent;
import mx.rpc.events.ResultEvent;
import mx.collections.ArrayCollection;

import weave.services.AMF3Servlet;
import weave.services.ProxyAsyncToken;
import weave.services.addAsyncResponder;

private const _probe:KeySet = Weave.defaultProbeKeySet;
private const _selection:KeySet = Weave.defaultSelectionKeySet;

WeaveAPI.ClassRegistry.registerImplementation(IVisTool, DocMapSearchTool, "Document Collection Search");

public const searchQuery:LinkableString = newLinkableChild(this, LinkableString, queryChanged, true);
public const collectionName:LinkableString = newLinkableChild(this, LinkableString, queryChanged, true);
public const savedQueries:LinkableVariable = newLinkableChild(this, LinkableVariable, savedQueriesChanged, true);

private var _service:AMF3Servlet = null;
private var _source:DocumentMapDataSource = null;

override protected function inConstructor():void
{
    super.inConstructor();
}

private function updateService():void
{
	var dataSources:Array = WeaveAPI.globalHashMap.getObjects(DocumentMapDataSource);
    if (dataSources.length == 0) return;

    _source = dataSources[0] as DocumentMapDataSource;

    if (detectLinkableObjectChange(this, _source))
    {
    	disposeObject(_service);
    	_service = registerLinkableChild(this, new AMF3Servlet(_source.url.value));
    }
}

private function handleQueryResults(event:ResultEvent, token:Object):void
{
	if (token.service != _service)
		return;

	var ac:ArrayCollection = event.result as ArrayCollection;
	var results:Array = ac.source;
	
	var params:Array = token.params as Array;

	var keyType:String = _source.getKeyType(params[0]);

	_selection.replaceKeys(WeaveAPI.QKeyManager.getQKeys(keyType, results));

	return;
}

private function handleFault(event:FaultEvent, token:Object = null):void
{
	if (objectWasDisposed(_service))
		return;
	reportError(event);
}

private function queryChanged():void
{
	if (!collectionName.value) return;

	if (!searchQuery.value)
	{
		_selection.clearKeys();
		return;
	}

	var query:String = searchQuery.value;
	var collection:String = collectionName.value;

	updateService();

    savedQueriesList.selectedItem = query;

    _source.searchRecords(collection, query).then(
        function(result:ArrayCollection):void
        {
            var keyType:String = _source.getKeyType(collection);
            _selection.replaceKeys(WeaveAPI.QKeyManager.getQKeys(keyType, result.source));
			searchPanel.resultList.dataProvider = result;
        });
}

private function savedQueriesChanged():void
{
    savedQueriesList.dataProvider = savedQueries.getSessionState() as Array || [];
    savedQueriesList.selectedItem = searchQuery.value;
}

private function saveQuery():void
{
    if (searchBox.text)
    {
        var queries:Array = savedQueries.getSessionState() as Array || [];
        queries.push(searchBox.text);
        savedQueries.setSessionState(queries);
    }
}

private function removeQuery():void
{
    var queries:Array = savedQueries.getSessionState() as Array || [];
    var idx:int = queries.indexOf(savedQueriesList.selectedItem);
    if (idx != -1)
    {
        queries.splice(idx, 1);
        savedQueries.setSessionState(queries);
    }
}

private function savedQuerySelected(object:Object):void
{
    var savedQuery:String = savedQueriesList.selectedItem as String;
    if (savedQuery)
    {
        searchQuery.value = savedQuery;
    }
}

override protected function childrenCreated():void
{
    super.childrenCreated();

    linkBindableProperty(searchQuery, searchPanel.searchBox, 'text', 100, false);
    BindingUtils.bindSetter(savedQuerySelected, savedQueriesList, "selectedItem", true);

    return;
}

public function getSelectableAttributes():Array
{
    return [];
}

public function getSelectableAttributeNames():Array
{
    return [];
}

]]>
</mx:Script>
<mx:VBox>
    <mx:HBox includeInLayout="false" visible="false">
        <ui:TextInputWithPrompt id="searchBox" prompt="{lang('Search')}"/>
        <mx:Button label="{lang('+')}" click="saveQuery()"/>
        <mx:Button label="{lang('-')}" click="removeQuery()" enabled="{savedQueriesList.selectedItem}"/>
    </mx:HBox>
    <mx:List width="100%" id="savedQueriesList" includeInLayout="false" visible="false"/>
    <ui:DocMapSearchComponent id="searchPanel">
		
	</ui:DocMapSearchComponent>
</mx:VBox>
<ui:ControlPanel>
        <mx:VBox label="{lang('Attributes')}">
        

        </mx:VBox>
        <!-- mx:VBox label="{lang('Advanced')}">
            <mx:CheckBox id="enableProbingCheckBox" label="{lang('Enable mouseover linking')}"/>
            <ui:Indent>
                <mx:CheckBox id="probeIncludesChildrenCheckBox" enabled="{enableProbingCheckBox.selected}" label="{lang('Linking includes all children.')}"/>
            </ui:Indent>
            <mx:CheckBox id="selectIncludesChildrenCheckBox" label="{lang('Include children in selections.')}"/>
            <mx:CheckBox id="expandToShowSelectedCheckBox" label="{lang('Expand to show selected children.')}" visible="false"/>
        </mx:VBox -->
        <editors:WindowSettingsEditor target="{this}"/>
    </ui:ControlPanel>
</ui:DraggablePanel>