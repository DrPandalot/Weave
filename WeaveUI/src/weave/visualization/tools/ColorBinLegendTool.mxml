<?xml version="1.0" encoding="utf-8"?>
<!--
/*
    Weave (Web-based Analysis and Visualization Environment)
    Copyright (C) 2008-2011 University of Massachusetts Lowell

    This file is a part of Weave.

    Weave is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License, Version 3,
    as published by the Free Software Foundation.

    Weave is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with Weave.  If not, see <http://www.gnu.org/licenses/>.
*/
-->
<SimpleVisTool xmlns="weave.visualization.tools.*" 
	     xmlns:mx="http://www.adobe.com/2006/mxml"
	     xmlns:ui="weave.ui.*"
	     layout="absolute" xmlns:userControls="weave.ui.userControls.*">
	<mx:Script>
		<![CDATA[
			import mx.events.FlexEvent;
			import mx.managers.CursorManager;
			
			import weave.Weave;
			import weave.api.WeaveAPI;
			import weave.api.linkBindableProperty;
			import weave.api.linkSessionState;
			import weave.api.unlinkSessionState;
			import weave.core.ErrorManager;
			import weave.core.SessionManager;
			import weave.data.AttributeColumns.BinnedColumn;
			import weave.data.AttributeColumns.ColorColumn;
			import weave.data.AttributeColumns.DynamicColumn;
			import weave.data.AttributeColumns.FilteredColumn;
			import weave.data.AttributeColumns.ReferencedColumn;
			import weave.ui.AttributeSelectorPanel;
			import weave.utils.ColumnUtils;
			import weave.utils.CustomCursorManager;
			import weave.visualization.plotters.ColorBinLegendPlotter;

			private var _plotter:ColorBinLegendPlotter = null;
			override protected function constructor():void
			{
				super.constructor();
				// lock dynamic objects into place
				_plotter = initDefaultPlotter(ColorBinLegendPlotter) as ColorBinLegendPlotter;

				plotLayer.useTextBitmapFilters.value = true;
				
				visualization.enableAutoZoomToExtent.value = true;
				visualization.enableZoomAndPan.value = false;
				
				visualization.topMarginClickCallbacks.addGroupedCallback(this, handleMarginLabelClick);
				
				Weave.properties.axisFontFamily.addGroupedCallback(this,updateMarginLabel);
				Weave.properties.axisFontColor.addGroupedCallback(this,updateMarginLabel);
				Weave.properties.axisFontSize.addGroupedCallback(this,updateMarginLabel);
				Weave.properties.axisFontUnderline.addGroupedCallback(this, updateMarginLabel);
				Weave.properties.axisFontBold.addGroupedCallback(this, updateMarginLabel);
				_plotter.dynamicColorColumn.addGroupedCallback(this, updateMarginLabel, true);

				panelWidth.value = "20%";
				panelHeight.value = "50%";
				
				visualization.marginBottom.value = "5";
				visualization.marginTop.value    = DEFAULT_MARGIN_TOP.toString();
				visualization.marginLeft.value   = "5";
				visualization.marginRight.value  = "5";
			}
			
			override protected function childrenCreated():void
			{
				super.childrenCreated();
				dataColumnComponent.dynamicObject = _plotter.dynamicColorColumn;
				_plotter.dynamicColorColumn.addImmediateCallback(this, colorColumnCallback, null, true);
				visualization.marginTopNumber.addImmediateCallback(this, handleMarginChange);
				linkBindableProperty(visualization.marginTopNumber, marginLabel, "height");
				
				linkBindableProperty(_plotter.maxColumns, legendControls.numColumns, 'value');
				linkBindableProperty(_plotter.ascendingOrder, legendControls.ascendingOrderCheck, 'selected');
				linkBindableProperty(_plotter.itemLabelFunction, legendControls.txtLegendValuesFunction, 'text', 500);
				linkBindableProperty(_plotter.legendTitleFunction, legendControls.txtLegendAttrNameFunc, 'text', 500);
				
				_plotter.legendTitleFunction.addGroupedCallback(this, updateMarginLabel, true);
			}
			
			private var _prevBinnedColumn:BinnedColumn;
			private function colorColumnCallback():void
			{
				if (!parent)
					callLater(colorColumnCallback);
				
				if (_prevBinnedColumn != internalBinnedColumn)
				{
					if (_prevBinnedColumn)
						unlinkSessionState(_prevBinnedColumn, binEditor.binnedColumn);

					_prevBinnedColumn = internalBinnedColumn;

					if (_prevBinnedColumn)
						linkSessionState(_prevBinnedColumn, binEditor.binnedColumn);
				}
				
				if (_plotter.getInternalColorColumn() == null)
				{
					cRampEditor.colorRamp = null;
					trace(this, "WARNING: ColorBinLegendPlotter.internalColorColumn is null");
				}
				else
				{
					cRampEditor.colorRamp = _plotter.getInternalColorColumn().ramp;
				}
			}
			
			private function get internalBinnedColumn():BinnedColumn
			{
				var cc:ColorColumn = _plotter.getInternalColorColumn();
				if (cc)
					return cc.internalColumn as BinnedColumn
				return null;
			}

			private function get internalDataColumn():DynamicColumn
			{
				try
				{
					return (internalBinnedColumn.internalColumn as FilteredColumn).internalDynamicColumn;
				}
				catch (e:Error) { } // do nothing if there is no data column
				return null;
			}

			override public function getSelectableAttributeNames():Array
			{
				return ["Color data"];
			}
			override public function getSelectableAttributes():Array
			{
				return [_plotter.dynamicColorColumn];
			}
			
			private function handleMarginLabelClick():void
			{
				AttributeSelectorPanel.openToolSelector(this,_plotter.dynamicColorColumn);
			}
			
			private function updateMarginLabel():void
			{
				if (!parent)
					return callLater(updateMarginLabel);
				
				visualization.additionalProbeColumns = WeaveAPI.SessionManager.getLinkableDescendants(_plotter.dynamicColorColumn, ReferencedColumn);
				
				visualization.topMarginColumn = _plotter.dynamicColorColumn;
				var colTitle:String = ColumnUtils.getTitle(_plotter.dynamicColorColumn);
				try
				{
					marginLabel.text = _plotter.legendTitleFunction.apply(null, [colTitle]);   
				}
				catch (e:Error)
				{
					marginLabel.text = colTitle;
				}
				marginLabel.setStyle("fontFamily", Weave.properties.axisFontFamily.value);
				marginLabel.setStyle("color", Weave.properties.axisFontColor.value);
				marginLabel.setStyle("fontSize", Weave.properties.axisFontSize.value);
				
				if(Weave.properties.axisFontBold.value)
					marginLabel.setStyle("fontWeight","bold");
				else
					marginLabel.setStyle("fontWeight","normal");
				
				if (Weave.properties.axisFontUnderline.value)
					marginLabel.setStyle("textDecoration", "underline");
				else
					marginLabel.setStyle("textDecoration", "none");
			}
			
			override protected function handlePanelTitleChange():void
			{
				super.handlePanelTitleChange();
				if (!panelTitle.value)
					title = "Color Legend";
			}
			
			private static const DEFAULT_MARGIN_TOP:int = 25;
			private var _prevMarginTop:String = String(DEFAULT_MARGIN_TOP); // this stores the previous nonzero top margin setting
			private function handleMarginChange():void
			{
				if (visualization.marginTopNumber.value != 0)
				{
					_prevMarginTop = visualization.marginTop.value;
					legendControls.chkShowLegendAttrName.selected = true;
				}
				else
					legendControls.chkShowLegendAttrName.selected = false;
			}
			private function toggleShowAttributeName():void
			{
				visualization.marginTop.value = legendControls.chkShowLegendAttrName.selected ? _prevMarginTop : '0';
			}
		]]>
	</mx:Script>
	
	<mx:TextArea id="marginLabel"
				 mouseChildren="false" mouseEnabled="false"
				 x="0" y="0" paddingLeft="5" paddingTop="5" paddingRight="5" width="100%"
				 horizontalScrollPolicy="off" verticalScrollPolicy="off"
				 wordWrap="true" selectable="false" editable="false"
				 borderThickness="0" backgroundAlpha="0"/>
	<ui:ControlPanel>
		<mx:VBox label="Binning">
			<ui:DynamicColumnComponent visTool="{this}" id="dataColumnComponent" label="Color data"/>
			<ui:BinningDefinitionEditor id="binEditor" width="100%"/>
		</mx:VBox>
		<mx:VBox label="Appearance">
			<ui:LegendControls id="legendControls"/>
			<ui:ColorRampEditor id="cRampEditor"/>
		</mx:VBox>
			
		<!--
		<mx:VBox label="Advanced">
			<mx:CheckBox id="showAttributeNameCheck" label="Show legend attribute name" change="toggleShowAttributeName()" toolTip="Click to hide the title of the Legend."/>
			<mx:HBox>
				<mx:Label text="Max bubble size"/>
				<mx:HSlider liveDragging="true" minimum="10" maximum="60" tickInterval="10" snapInterval="5" creationComplete="linkBindableProperty(_plotter.shapeSize, event.target, 'value')"/>
			</mx:HBox>
			<mx:Spacer/>
			<ui:ColorRampEditor id="cRampEditor"/>
			<mx:HBox>
				<mx:Label text="Number of columns"/>
				<mx:NumericStepper id="maxCols" minimum="1"
								   toolTip="This specifies the maximum number of columns to show in a row in the legend."/>
			</mx:HBox>
			<mx:CheckBox label="Reverse item order" id="chkReverseOrder"
						 toolTip="Check this box to reverse the ordering of the items in this legend."/>
		</mx:VBox>
		-->
	</ui:ControlPanel>

</SimpleVisTool>
