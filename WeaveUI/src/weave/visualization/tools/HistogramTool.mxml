<?xml version="1.0" encoding="utf-8"?>
<!--
/*
    Weave (Web-based Analysis and Visualization Environment)
    Copyright (C) 2008-2011 University of Massachusetts Lowell

    This file is a part of Weave.

    Weave is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License, Version 3,
    as published by the Free Software Foundation.

    Weave is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with Weave.  If not, see <http://www.gnu.org/licenses/>.
*/
-->
<SimpleVisTool xmlns="weave.visualization.tools.*" 
	     xmlns:mx="http://www.adobe.com/2006/mxml"
	     xmlns:ui="weave.ui.*" 
		 xmlns:userControls="weave.ui.userControls.*"
		 xmlns:settings="weave.ui.settings.*"
		 layout="absolute">
	<mx:Script>
		<![CDATA[
			import weave.api.WeaveAPI;
			import weave.api.getCallbackCollection;
			import weave.api.linkBindableProperty;
			import weave.api.linkSessionState;
			import weave.api.registerLinkableChild;
			import weave.api.ui.IVisTool;
			import weave.api.unlinkSessionState;
			import weave.core.LinkableBoolean;
			import weave.data.AttributeColumns.BinnedColumn;
			import weave.ui.AttributeSelectorPanel;
			import weave.utils.BitmapText;
			import weave.utils.ColumnUtils;
			import weave.visualization.plotters.HistogramPlotter;
		
			WeaveAPI.registerImplementation(IVisTool, HistogramTool, "Histogram");
			
			internal function get plotter():HistogramPlotter { return mainPlotter as HistogramPlotter; }
			
			override protected function constructor():void
			{
				super.constructor();
				
				// lock dynamic objects into place
				initializePlotters(HistogramPlotter, true);
				visualization.enableProbeLine(false, true);
				
				xAxisPlotter.forceTickCount.value = true;
				visualization.enableZoomAndPan.value = false;

				visualization.plotManager.marginBottom.value = "80";
				visualization.plotManager.marginTop.value    = "10";
				visualization.plotManager.marginLeft.value   = "80";
				visualization.plotManager.marginRight.value  = "10";
				
				plotter.fillStyle.color.internalDynamicColumn.addGroupedCallback(this, handleDynamicColorColumnChange, true);

				visualization.plotManager.marginLeftNumber.addGroupedCallback(this, updateAxisLabels);
				visualization.plotManager.marginBottomNumber.addGroupedCallback(this, updateAxisLabels);
				getCallbackCollection(visualization.plotManager.zoomBounds).addGroupedCallback(this, updateAxisLabels);
				getCallbackCollection(plotter).addGroupedCallback(this, updateAxisLabels, true);
				
				visualization.leftMarginClickCallbacks.addGroupedCallback(this, function():void { AttributeSelectorPanel.open(plotter.sumColumn); });
				visualization.bottomMarginClickCallbacks.addGroupedCallback(this, function():void { AttributeSelectorPanel.open(plotter.fillStyle.color); });
				
				initColumnDefaults(ColumnUtils.hack_findInternalDynamicColumn(plotter.fillStyle.color));
			}
			
			override protected function childrenCreated():void
			{
				super.childrenCreated();
				sumColumnComponent.dynamicObject = plotter.sumColumn;
			}
			
			override public function getSelectableAttributeNames():Array
			{
				return [lang("Grouping values"), lang("Height values (Optional)")];
			}
			override public function getSelectableAttributes():Array
			{
				return [plotter.fillStyle.color, plotter.sumColumn];
			}
			
			public const includeToolAttributesInProbe:LinkableBoolean = registerLinkableChild(this, new LinkableBoolean(true), updateProbeColumns);

			private function updateProbeColumns():void
			{
				visualization.additionalProbeColumns = [];
				if (includeToolAttributesInProbe.value)
				{
					if (plotter.internalBinnedColumn && plotter.internalBinnedColumn.getInternalColumn())
						visualization.additionalProbeColumns.push(plotter.internalBinnedColumn.getInternalColumn());
				}
			}
			
			override protected function get defaultPanelTitle():String
			{
				return lang("Histogram of {0}", ColumnUtils.getTitle(plotter.fillStyle.color));
			}

			private var _prevBinnedColumn:BinnedColumn = null;
			private function handleDynamicColorColumnChange():void
			{
				updateProbeColumns();
				if (!parent)
					return callLater(handleDynamicColorColumnChange);
				
				if (plotter.internalColorColumn)
					cRampEditor.colorRamp = plotter.internalColorColumn.ramp;
				else
					cRampEditor.colorRamp = null;
				
				if (_prevBinnedColumn)
					unlinkSessionState(_prevBinnedColumn, binEditor.binnedColumn);
				
				if (plotter.internalBinnedColumn)
					linkSessionState(plotter.internalBinnedColumn, binEditor.binnedColumn);
				
				
				_prevBinnedColumn = plotter.internalBinnedColumn;
				dataColumnComponent.columnWrapper = plotter.fillStyle.color;
			}
			
			private function getYAxisLabel(number:Number):String
			{
				return ColumnUtils.deriveStringFromNumber(plotter.sumColumn, number);
			}
			private function updateAxisLabels():void
			{
				handlePanelTitleChange();
				
				visualization.bottomMarginColumn = plotter.fillStyle.color;
				visualization.leftMarginColumn = plotter.sumColumn;
				
				var binnedColumn:BinnedColumn = plotter.internalBinnedColumn;
				if (binnedColumn)
				{
					xAxisPlotter.tickCountRequested.value = binnedColumn.numberOfBins;
					xAxisPlotter.tickMinValue.value = 0;
					xAxisPlotter.tickMaxValue.value = binnedColumn.numberOfBins - 1;	
					xAxisPlotter.setLabelFunction(binnedColumn.deriveStringFromNumber);
				}
				else
				{
					xAxisPlotter.setLabelFunction(null);
				}
				
				xAxisPlotter.setSideAxisName(ColumnUtils.getTitle(plotter.fillStyle.color), 0, 0, visualization.plotManager.marginBottomNumber.value - 3, BitmapText.VERTICAL_ALIGN_BOTTOM);
				
				var yColName:String = lang("Number of Records");
				if (plotter.sumColumn.getInternalColumn())
				{
					yColName = ColumnUtils.getTitle(plotter.sumColumn);
					yAxisPlotter.setLabelFunction(getYAxisLabel);
				}
				else
				{
					yAxisPlotter.setLabelFunction(null);
				}
				yAxisPlotter.setSideAxisName(yColName, -90, -visualization.plotManager.marginLeftNumber.value, 0, BitmapText.VERTICAL_ALIGN_TOP);
			}
		]]>
	</mx:Script>

	<ui:ControlPanel>
		<mx:VBox label="{lang('Basic')}">
			<mx:CheckBox id="probeColumnsCheckBox" label="{lang('Include tool attributes in probe tooltip')}"
						 toolTip="{lang('Checking this box makes the tool\'s binned attribute visible in this tool\'s probe tooltip')}"
						 creationComplete="linkBindableProperty(includeToolAttributesInProbe,event.target,'selected')"/>
			<ui:DynamicColumnComponent id="dataColumnComponent"/>
			<ui:BinningDefinitionEditor id="binEditor"/>
		</mx:VBox>
		<mx:VBox label="{lang('Advanced')}">
			<ui:DynamicColumnComponent id="sumColumnComponent"/>
			<mx:CheckBox id="drawPartialCheckBox"
						 label="{lang('Draw partial histogram bars for selection and probe')}"
						 creationComplete="linkBindableProperty(plotter.drawPartialBins, event.target, 'selected');"/>
			<ui:ColorRampEditor id="cRampEditor"/>
		</mx:VBox>
	</ui:ControlPanel>
</SimpleVisTool>
