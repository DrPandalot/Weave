<?xml version="1.0" encoding="utf-8"?>
<!--
/*
    Weave (Web-based Analysis and Visualization Environment)
    Copyright (C) 2008-2011 University of Massachusetts Lowell

    This file is a part of Weave.

    Weave is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License, Version 3,
    as published by the Free Software Foundation.

    Weave is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with Weave.  If not, see <http://www.gnu.org/licenses/>.
*/
-->
<SimpleVisTool xmlns="weave.visualization.tools.*" 
	     xmlns:mx="http://www.adobe.com/2006/mxml"
	     xmlns:ui="weave.ui.*" 
		 xmlns:userControls="weave.ui.userControls.*"
		 xmlns:settings="weave.ui.settings.*"
		 layout="absolute">
	<mx:Script>
		<![CDATA[
			import weave.api.WeaveAPI;
			import weave.api.getCallbackCollection;
			import weave.api.linkBindableProperty;
			import weave.api.linkSessionState;
			import weave.api.registerLinkableChild;
			import weave.api.ui.IVisTool;
			import weave.api.unlinkSessionState;
			import weave.core.LinkableBoolean;
			import weave.core.LinkableVariable;
			import weave.data.AttributeColumns.BinnedColumn;
			import weave.data.AttributeColumns.DynamicColumn;
			import weave.data.AttributeColumns.FilteredColumn;
			import weave.ui.AttributeSelectorPanel;
			import weave.utils.BitmapText;
			import weave.utils.ColumnUtils;
			import weave.visualization.plotters.HistogramPlotter;
		
			WeaveAPI.registerImplementation(IVisTool, HistogramTool, "Histogram");
			
			internal function get plotter():HistogramPlotter { return mainPlotter as HistogramPlotter; }
			
			override protected function constructor():void
			{
				super.constructor();
				
				// lock dynamic objects into place
				initializePlotters(HistogramPlotter, true);
				visualization.enableProbeLine(false, true);
				
				xAxisPlotter.forceTickCount.value = true;
				visualization.enableZoomAndPan.value = false;

				visualization.plotManager.marginBottom.value = "80";
				visualization.plotManager.marginTop.value    = "10";
				visualization.plotManager.marginLeft.value   = "80";
				visualization.plotManager.marginRight.value  = "10";
				
				plotter.dynamicColorColumn.addGroupedCallback(this, handleDynamicColorColumnChange, true);

				visualization.plotManager.marginLeftNumber.addGroupedCallback(this, updateAxisLabels);
				visualization.plotManager.marginBottomNumber.addGroupedCallback(this, updateAxisLabels);
				getCallbackCollection(visualization.plotManager.zoomBounds).addGroupedCallback(this, updateAxisLabels);
				getCallbackCollection(plotter).addGroupedCallback(this, updateAxisLabels, true);
				
				visualization.bottomMarginClickCallbacks.addGroupedCallback(this, openAttributeSelector);
				
				var fc:FilteredColumn = plotter.internalBinnedColumn.getInternalColumn() as FilteredColumn;
				initColumnDefaults(fc.internalDynamicColumn);
				
				plotter.dynamicColorColumn.addGroupedCallback(this, updateProbeColumns);
				handleSelectAllAttrInProbe(true);//default to include all selectable attributes in tool
			}
			
			override protected function childrenCreated():void
			{
				super.childrenCreated();
			}
			
			override public function getSelectableAttributeNames():Array
			{
				return ["bin data"];
			}
			override public function getSelectableAttributes():Array
			{
				return [internalDataColumn];
			}
			
			public const attributesToIncludeInProbe:LinkableVariable = registerLinkableChild(this,new LinkableVariable(Array),updateProbeColumns,true);
			[Deprecated] public function set includeToolAttributesInProbe(value:Boolean):void
			{
				handleSelectAllAttrInProbe(value);
			}
			private function handleSelectAllAttrInProbe(setAll:Boolean):void
			{
				var attributes:Array = getSelectableAttributeNames();
				var valuesToSet:Array = [];
				if(setAll)
				{
					for each (var name:String in attributes)
					{
						valuesToSet.push(true);
					}
				}
				else
				{
					for each (var name2:String in attributes)
					{
						valuesToSet.push(false);
					}
				}
				attributesToIncludeInProbe.setSessionState(valuesToSet);
			}
			private function openAttributeSelector():void
			{
				AttributeSelectorPanel.openToolSelector(this,internalDataColumn);
			}
						
			private function updateProbeColumns():void
			{
				/* first check to see if select all should be disabled or not */
				var attrToIncludeCheckList:Array = attributesToIncludeInProbe.getSessionState() as Array;
				
				if(attrToIncludeCheckList.indexOf(false) > -1)
				{
					probeColumnsCheckBox.selected = false;
				}
				else
				{
					probeColumnsCheckBox.selected = true;
				}
				
				var attributes:Array = getSelectableAttributes();
				visualization.additionalProbeColumns = [];
				
				var colIndex:int = attributes.indexOf(internalDataColumn);
				if (plotter.internalBinnedColumn && plotter.internalBinnedColumn.getInternalColumn() && attrToIncludeCheckList[colIndex])
					visualization.additionalProbeColumns.push(plotter.internalBinnedColumn.getInternalColumn());
				
				updateAttributesChecklist();
			}
			
			private function updateAttributesChecklist():void
			{
				var attributes:Array = getSelectableAttributeNames();
				var attrCheckList:Array = attributesToIncludeInProbe.getSessionState() as Array;
				var temp:Array = [];
				for (var i:int = 0; i < attributes.length; i++)
				{
					var obj:Object = new Object();
					obj.label = attributes[i];
					obj.selected = attrCheckList[i];
					temp.push(obj);
				}
				attributesChecklist.dataProvider = temp;
			}
			
			
			override protected function get defaultPanelTitle():String
			{
				return lang("Histogram of {0}", ColumnUtils.getTitle(plotter.dynamicColorColumn));
			}

			private var _prevBinnedColumn:BinnedColumn = null;
			private function handleDynamicColorColumnChange():void
			{
				if (!parent)
					return callLater(handleDynamicColorColumnChange);
				
				if (plotter.internalColorColumn)
					cRampEditor.colorRamp = plotter.internalColorColumn.ramp;
				else
					cRampEditor.colorRamp = null;
				
				if (_prevBinnedColumn)
					unlinkSessionState(_prevBinnedColumn, binEditor.binnedColumn);
				
				if (plotter.internalBinnedColumn)
					linkSessionState(plotter.internalBinnedColumn, binEditor.binnedColumn);
				
				
				_prevBinnedColumn = plotter.internalBinnedColumn;
				dataColumnComponent.dynamicObject = internalDataColumn;
			}
			
			public function get internalDataColumn():DynamicColumn
			{
				try
				{
					return (plotter.internalBinnedColumn.getInternalColumn() as FilteredColumn).internalDynamicColumn;
				}
				catch (e:Error) { } // do nothing if there is no data column
				return null;
			}
			
			private function updateAxisLabels():void
			{
				handlePanelTitleChange();
				
				visualization.bottomMarginColumn = plotter.dynamicColorColumn;
				
				var binnedColumn:BinnedColumn = plotter.internalBinnedColumn;
				if (binnedColumn)
				{
					xAxisPlotter.tickCountRequested.value = binnedColumn.numberOfBins;
					xAxisPlotter.tickMinValue.value = 0;
					xAxisPlotter.tickMaxValue.value = binnedColumn.numberOfBins - 1;	
					xAxisPlotter.setLabelFunction(binnedColumn.deriveStringFromNumber);
				}
				else
				{
					xAxisPlotter.setLabelFunction(null);
				}
				
				xAxisPlotter.setSideAxisName(ColumnUtils.getTitle(plotter.dynamicColorColumn), 0, 0, visualization.plotManager.marginBottomNumber.value - 3, BitmapText.VERTICAL_ALIGN_BOTTOM);
				yAxisPlotter.setSideAxisName(lang("Number of Records"), -90, -visualization.plotManager.marginLeftNumber.value, 0, BitmapText.VERTICAL_ALIGN_TOP);
			}
		]]>
	</mx:Script>

	<ui:ControlPanel>
		<mx:VBox label="{lang('Visualization Controls')}">
			<mx:CheckBox id="probeColumnsCheckBox" label="{lang('Include tool attributes in probe tooltip')}"
						 toolTip="{lang('Checking this box makes the tool\'s binned attribute visible in this tool\'s probe tooltip')}"
						 change="handleSelectAllAttrInProbe(probeColumnsCheckBox.selected)"/>
			<mx:List width="100%" borderThickness="0" id="attributesChecklist" minHeight="20" height="100%">
				<mx:itemRenderer>
					<mx:Component>
						<mx:CheckBox change="handleSelectionChange()">
							
							<mx:Script>
								<![CDATA[
									override public function set data(d:Object):void
									{
										super.data = d;
										selected = d.selected;
										label = d ? d.label : '';
									}
									private function handleSelectionChange():void
									{
										data.selected = this.selected;
										var index:int = outerDocument.getSelectableAttributeNames().indexOf(data.label);
										var currentState:Array = outerDocument.attributesToIncludeInProbe.getSessionState() as Array;
										currentState[index]= this.selected;
										outerDocument.attributesToIncludeInProbe.setSessionState(currentState);
									}
								]]>
							</mx:Script>
						</mx:CheckBox>
					</mx:Component>
				</mx:itemRenderer>
			</mx:List>
			<ui:DynamicColumnComponent visTool="{this}" id="dataColumnComponent" label="{lang('bin data')}"/>
			<ui:BinningDefinitionEditor id="binEditor"/>
		</mx:VBox>
		<mx:VBox label="{lang('Advanced')}">
			<mx:CheckBox id="drawPartialCheckBox"
						 label="{lang('Draw partial histogram bars for selection and probe')}"
						 creationComplete="linkBindableProperty(plotter.drawPartialBins, event.target, 'selected');"/>
			<ui:ColorRampEditor id="cRampEditor"/>
		</mx:VBox>
	</ui:ControlPanel>
</SimpleVisTool>
