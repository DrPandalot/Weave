<?xml version="1.0" encoding="utf-8"?>
<!--
/*
    Weave (Web-based Analysis and Visualization Environment)
    Copyright (C) 2008-2011 University of Massachusetts Lowell

    This file is a part of Weave.

    Weave is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License, Version 3,
    as published by the Free Software Foundation.

    Weave is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with Weave.  If not, see <http://www.gnu.org/licenses/>.
*/
-->
<SimpleVisTool xmlns="weave.visualization.tools.*" 
	     xmlns:mx="http://www.adobe.com/2006/mxml"
	     xmlns:ui="weave.ui.*" 
		 xmlns:userControls="weave.ui.userControls.*"
		 xmlns:settings="weave.ui.settings.*"
		 layout="absolute">
	<mx:Script>
		<![CDATA[
			import weave.api.WeaveAPI;
			import weave.api.getCallbackCollection;
			import weave.api.linkBindableProperty;
			import weave.api.registerLinkableChild;
			import weave.api.ui.IVisTool;
			import weave.core.LinkableBoolean;
			import weave.data.AttributeColumns.BinnedColumn;
			import weave.ui.AttributeSelectorPanel;
			import weave.utils.BitmapText;
			import weave.utils.ColumnUtils;
			import weave.visualization.plotters.HistogramPlotter;
			import weave.visualization.plotters.SimpleAxisPlotter;
		
			WeaveAPI.registerImplementation(IVisTool, HistogramTool, "Histogram");
			
			internal function get plotter():HistogramPlotter { return mainPlotter as HistogramPlotter; }
			
			override protected function constructor():void
			{
				super.constructor();
				
				// lock dynamic objects into place
				initializePlotters(HistogramPlotter, true);
				
				visualization.enableZoomAndPan.value = false;

				visualization.plotManager.marginBottom.value = "80";
				visualization.plotManager.marginTop.value    = "10";
				visualization.plotManager.marginLeft.value   = "80";
				visualization.plotManager.marginRight.value  = "10";
				
				plotter.fillStyle.color.internalDynamicColumn.addGroupedCallback(this, handleDynamicColorColumnChange, true);

				visualization.plotManager.marginLeftNumber.addGroupedCallback(this, updateAxisLabels);
				visualization.plotManager.marginBottomNumber.addGroupedCallback(this, updateAxisLabels);
				getCallbackCollection(visualization.plotManager.zoomBounds).addGroupedCallback(this, updateAxisLabels);
				getCallbackCollection(plotter).addGroupedCallback(this, updateAxisLabels, true);
				
				visualization.leftMarginClickCallbacks.addGroupedCallback(this, function():void { AttributeSelectorPanel.open(visualization.leftMarginColumn); });
				visualization.bottomMarginClickCallbacks.addGroupedCallback(this, function():void { AttributeSelectorPanel.open(visualization.bottomMarginColumn); });
				
				initColumnDefaults(ColumnUtils.hack_findInternalDynamicColumn(plotter.fillStyle.color));
			}
			
			override protected function childrenCreated():void
			{
				super.childrenCreated();
				columnToAggregateComponent.dynamicObject = plotter.columnToAggregate;
				plotter.columnToAggregate.addGroupedCallback(this, function():void {
					agMethodCombo.enabled = plotter.columnToAggregate.getInternalColumn() != null;
				}, true);
			}
			
			override public function getSelectableAttributeNames():Array
			{
				return [lang("Grouping values"), lang("Height values (Optional)")];
			}
			override public function getSelectableAttributes():Array
			{
				return [plotter.fillStyle.color, plotter.columnToAggregate];
			}
			
			public const includeToolAttributesInProbe:LinkableBoolean = registerLinkableChild(this, new LinkableBoolean(true), updateProbeColumns);

			private function updateProbeColumns():void
			{
				visualization.additionalProbeColumns = [];
				if (includeToolAttributesInProbe.value)
				{
					if (plotter.internalBinnedColumn && plotter.internalBinnedColumn.getInternalColumn())
						visualization.additionalProbeColumns.push(plotter.internalBinnedColumn.getInternalColumn());
				}
			}
			
			override public function get defaultPanelTitle():String
			{
				return lang("Histogram of {0}", ColumnUtils.getTitle(plotter.fillStyle.color));
			}

			private function handleDynamicColorColumnChange():void
			{
				updateProbeColumns();
				if (!parent)
					return callLater(handleDynamicColorColumnChange);
				
				if (plotter.internalColorColumn)
					cRampEditor.colorRamp = plotter.internalColorColumn.ramp;
				else
					cRampEditor.colorRamp = null;
				
				binEditor.setTarget(plotter.internalBinnedColumn);
				dataColumnComponent.columnWrapper = plotter.fillStyle.color;
			}
			
			private function getHeightAxisLabel(number:Number):String
			{
				return ColumnUtils.deriveStringFromNumber(plotter.columnToAggregate, number);
			}
			private function updateAxisLabels():void
			{
				handlePanelTitleChange();
				
				var binAxisPlotter:SimpleAxisPlotter;
				var heightAxisPlotter:SimpleAxisPlotter;
				
				if (plotter.horizontalMode.value)
				{
					binAxisPlotter = yAxisPlotter;
					heightAxisPlotter = xAxisPlotter;
					visualization.bottomMarginColumn = plotter.columnToAggregate;
					visualization.leftMarginColumn = plotter.fillStyle.color;
					visualization.enableProbeLine(true, false);
					xAxisPlotter.forceTickCount.value = false;
					yAxisPlotter.forceTickCount.value = true;
					
				}
				else
				{
					binAxisPlotter = xAxisPlotter;
					heightAxisPlotter = yAxisPlotter;
					visualization.bottomMarginColumn = plotter.fillStyle.color;
					visualization.leftMarginColumn = plotter.columnToAggregate;
					visualization.enableProbeLine(false, true);
					xAxisPlotter.forceTickCount.value = true;
					yAxisPlotter.forceTickCount.value = false;
				}
				
				var binnedColumn:BinnedColumn = plotter.internalBinnedColumn;
				if (binnedColumn)
				{
					binAxisPlotter.tickCountRequested.value = binnedColumn.numberOfBins;
					binAxisPlotter.tickMinValue.value = 0;
					binAxisPlotter.tickMaxValue.value = binnedColumn.numberOfBins - 1;	
					binAxisPlotter.setLabelFunction(binnedColumn.deriveStringFromNumber, binnedColumn);
				}
				else
				{
					binAxisPlotter.tickMinValue.value = NaN;
					binAxisPlotter.tickMaxValue.value = NaN;	
					binAxisPlotter.setLabelFunction(null, null);
				}
				
				heightAxisPlotter.tickMinValue.value = NaN;
				heightAxisPlotter.tickMaxValue.value = NaN;
				
				var binAxisTitle:String = ColumnUtils.getTitle(plotter.fillStyle.color);
				var heightAxisTitle:String = lang("Number of records");
				if (plotter.columnToAggregate.getInternalColumn())
				{
					if (plotter.aggregationMethod.value != HistogramPlotter.AG_COUNT)
					{
						heightAxisPlotter.setLabelFunction(getHeightAxisLabel, plotter.columnToAggregate);
						var agColTitle:String = ColumnUtils.getTitle(plotter.columnToAggregate);
						var method:String = plotter.aggregationMethod.value;
						if (method == HistogramPlotter.AG_MEAN)
							heightAxisTitle = lang("Mean of {0}", agColTitle);
						if (method == HistogramPlotter.AG_SUM)
							heightAxisTitle = lang("Sum of {0}", agColTitle);
					}
					else
						heightAxisPlotter.setLabelFunction(null, plotter.columnToAggregate);
				}
				else
				{
					// fall back to using binnedColumn
					heightAxisPlotter.setLabelFunction(null, binnedColumn);
				}
				
				xAxisPlotter.setSideAxisName(plotter.horizontalMode.value ? heightAxisTitle : binAxisTitle, 0, 0, visualization.plotManager.marginBottomNumber.value - 3, BitmapText.VERTICAL_ALIGN_BOTTOM);
				yAxisPlotter.setSideAxisName(plotter.horizontalMode.value ? binAxisTitle : heightAxisTitle, -90, -visualization.plotManager.marginLeftNumber.value, 0, BitmapText.VERTICAL_ALIGN_TOP);
			}
		]]>
	</mx:Script>

	<ui:ControlPanel>
		<mx:VBox label="{lang('Basic')}">
			<ui:DynamicColumnComponent id="dataColumnComponent"/>
			<ui:BinningDefinitionEditor id="binEditor"/>
		</mx:VBox>
		<mx:VBox label="{lang('Advanced')}">
			<ui:DynamicColumnComponent id="columnToAggregateComponent"/>
			<ui:Indent label="{lang('Height aggregation method')}">
				<ui:CustomComboBox id="agMethodCombo" dataProvider="{HistogramPlotter.ENUM_AGGREGATION_METHODS}" labelFunction="lang"
								   creationComplete="linkBindableProperty(plotter.aggregationMethod, event.target, 'selectedItem');"/>
			</ui:Indent>
			<ui:CustomCheckBox label="{lang('Draw horizontal bars')}" creationComplete="linkBindableProperty(plotter.horizontalMode, event.target, 'selected');"/>
			<mx:CheckBox id="drawPartialCheckBox"
						 label="{lang('Draw partial histogram bars for selection and probe')}"
						 creationComplete="linkBindableProperty(plotter.drawPartialBins, event.target, 'selected');"/>
			<mx:CheckBox id="probeColumnsCheckBox" label="{lang('Include tool attributes in mouseover info')}"
						 creationComplete="linkBindableProperty(includeToolAttributesInProbe,event.target,'selected')"/>
			<ui:ColorRampEditor id="cRampEditor"/>
		</mx:VBox>
	</ui:ControlPanel>
</SimpleVisTool>
