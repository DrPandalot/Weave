<?xml version="1.0" encoding="utf-8"?>
<!--
/* ***** BEGIN LICENSE BLOCK *****
 *
 * This file is part of Weave.
 *
 * The Initial Developer of Weave is the Institute for Visualization
 * and Perception Research at the University of Massachusetts Lowell.
 * Portions created by the Initial Developer are Copyright (C) 2008-2015
 * the Initial Developer. All Rights Reserved.
 *
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this file,
 * You can obtain one at http://mozilla.org/MPL/2.0/.
 * 
 * ***** END LICENSE BLOCK ***** */
-->
<mx:HBox xmlns="weave.editors.*" 
		xmlns:mx="http://www.adobe.com/2006/mxml" xmlns:ui="weave.ui.*"
		implements="weave.api.ui.ILinkableObjectEditor,weave.api.core.ILinkableObject"
		creationPolicy="all"
		horizontalScrollPolicy="off" verticalScrollPolicy="off" width="100%" verticalAlign="middle">
	<ui:CustomCheckBox paddingLeft="4" id="filterEnable" label="{getEnableLabel(columnTitle)}" change="toggleFilter();"/>
<!--	<mx:Button enabled="{filterEnable.selected}"
			   width="24" icon="@Embed(source='/weave/resources/images/eject-inset.png')"
			   toolTip="{lang('Select a column to be used for filtering the data.')}"
			   click="AttributeSelectorPanel.open(numberFilter.column, lang('Filter'));"/>
-->
	<mx:HSlider id="filterSlider" enabled="{filterEnable.selected}"
				liveDragging="true"
				mouseDown="event.target.setFocus(); event.stopPropagation()"
				change="handleSliderChange(event);"
				width="100%" minWidth="22"/>
	<mx:Script>
		<![CDATA[
			import mx.events.SliderEvent;
			
			import weave.api.core.ILinkableObject;
			import weave.api.data.ColumnMetadata;
			import weave.api.data.DataType;
			import weave.api.data.IAttributeColumn;
			import weave.api.data.IColumnStatistics;
			import weave.api.data.IQualifiedKey;
			import weave.api.newLinkableChild;
			import weave.api.registerLinkableChild;
			import weave.compiler.StandardLib;
			import weave.core.LinkableBoolean;
			import weave.core.LinkableNumber;
			import weave.core.LinkableWatcher;
			import weave.core.UIUtils;
			import weave.data.AttributeColumns.DynamicColumn;
			import weave.data.KeySets.NumberDataFilter;
			import weave.utils.ColumnUtils;
			import weave.utils.VectorUtils;

			public const showToggle:LinkableBoolean = registerLinkableChild(this, new LinkableBoolean(true));
			public const showMinThumb:LinkableBoolean = registerLinkableChild(this, new LinkableBoolean(true), invalidateDisplayList);
			public const showMaxThumb:LinkableBoolean = registerLinkableChild(this, new LinkableBoolean(true), invalidateDisplayList);
			public const forceDiscreteValues:LinkableBoolean = registerLinkableChild(this, new LinkableBoolean(false), invalidateDisplayList);
			public const discreteValueLabelInterval:LinkableNumber = registerLinkableChild(this, new LinkableNumber(1, verifyUINT), invalidateDisplayList);
			private var discreteValues:Array;
			
			private function verifyUINT(value:Number):Boolean
			{
				return value == uint(value);
			}
			
			override protected function childrenCreated():void
			{
				trace('childrenCreated');
				super.childrenCreated();
				
				UIUtils.linkVisibility(this, showToggle, filterEnable);
			}
			
			[Bindable] private var columnTitle:String;
			private function getEnableLabel(columnTitle:String):String
			{
				return lang('Filter by {0}', columnTitle || '...');
			}
			
			private const filterWatcher:LinkableWatcher = newLinkableChild(this, LinkableWatcher, invalidateDisplayList);
			private const statsWatcher:LinkableWatcher = newLinkableChild(this, LinkableWatcher, invalidateDisplayList);
			
			public function get numberFilter():NumberDataFilter
			{
				return filterWatcher.target as NumberDataFilter;
			}
			
			public function setTarget(object:ILinkableObject):void
			{
				filterWatcher.target = object as NumberDataFilter;
				if (numberFilter)
					statsWatcher.target = WeaveAPI.StatisticsCache.getColumnStatistics(numberFilter.column);
			}
			public function hasPendingChanges():Boolean { return false; }
			public function applyChanges():void { }
			
			private function toggleFilter():void
			{
				if (numberFilter)
					numberFilter.enabled.value = filterEnable.selected;
			}
			
			private function handleSliderChange(event:SliderEvent):void
			{
				if (!numberFilter || !UIUtils.hasFocus(filterSlider))
					return;
				
				var values:Array = filterSlider.values.concat();
				var value:Number;
				if (showMinThumb.value)
				{
					value = values.shift();
					numberFilter.min.value = discreteValues ? discreteValues[value] : value;
				}
				if (showMaxThumb.value)
				{
					value = values.shift();
					numberFilter.max.value = discreteValues ? discreteValues[value] : value;
				}
			}
			
			private function getLabelFromNumber(column:IAttributeColumn, number:Number):String
			{
				return ColumnUtils.deriveStringFromNumber(column, number) || '';
			}

			override protected function updateDisplayList(unscaledWidth:Number, unscaledHeight:Number):void
			{
				var i:int;
				var stats:IColumnStatistics = statsWatcher.target as IColumnStatistics;
				var min:Number = stats ? stats.getMin() : NaN;
				var max:Number = stats ? stats.getMax() : NaN;
				var ready:Boolean = numberFilter && isFinite(min) && isFinite(max);
				if (ready && (showMinThumb.value || showMaxThumb.value))
				{
					var column:DynamicColumn = numberFilter.column;
					
					enabled = true;
					filterEnable.selected = numberFilter.enabled.value;
					columnTitle = ColumnUtils.getTitle(column);
					
					var sliderMinValue:Number = numberFilter.min.value;
					var sliderMaxValue:Number = numberFilter.max.value;
					
					var labels:Array = [];
					if (column.getMetadata(ColumnMetadata.DATA_TYPE) == DataType.STRING)
					{
						discreteValues = null;
						filterSlider.minimum = min;
						filterSlider.maximum = max;
						filterSlider.tickInterval = 1;
						filterSlider.snapInterval = 1;
						for (i = min; i <= max; i++)
							labels.push(getLabelFromNumber(column, i));
					}
					else if (forceDiscreteValues.value)
					{
						// get distinct numeric values and store as values in lookup
						var lookup:Object = {};
						for each (var key:IQualifiedKey in column.keys)
						{
							var number:Number = column.getValueFromKey(key, Number);
							lookup[number] = number;
						}
						
						// sort values from lookup and create labels for sorted values
						discreteValues = VectorUtils.getItems(lookup, null, []);
						StandardLib.sort(discreteValues);
						
						sliderMinValue = discreteValues.indexOf(sliderMinValue);
						sliderMaxValue = discreteValues.indexOf(sliderMaxValue);
						
						filterSlider.minimum = 0;
						filterSlider.maximum = discreteValues.length - 1;
						filterSlider.tickInterval = 1;
						filterSlider.snapInterval = 1;
						var labelInterval:int = discreteValueLabelInterval.value;
						if (labelInterval > 0)
						{
							for each (number in discreteValues)
							{
								if (labels.length % labelInterval == 0)
									labels.push(getLabelFromNumber(column, number));
								else
									labels.push('');
							}
						}
						else
						{
							labels.push(getLabelFromNumber(column, discreteValues[0]));
							labels.push(getLabelFromNumber(column, discreteValues[discreteValues.length - 1]));
						}
					}
					else
					{
						discreteValues = null;
						filterSlider.minimum = min;
						filterSlider.maximum = max;
						filterSlider.tickInterval = 0;
						filterSlider.snapInterval = 0;
						if (showMinThumb.value)
							labels.push(getLabelFromNumber(column, min));
						if (showMaxThumb.value)
							labels.push(getLabelFromNumber(column, max));
					}
					
					var values:Array = [];
					var thumbCount:int = 0;
					if (showMinThumb.value)
						values[thumbCount++] = sliderMinValue;
					if (showMaxThumb.value)
						values[thumbCount++] = sliderMaxValue;
					filterSlider.thumbCount = thumbCount;
					filterSlider.values = values;
					filterSlider.labels = labels;
					filterSlider.invalidateDisplayList();
					filterSlider.validateNow();
				}
				else
				{
					enabled = false;
					filterEnable.selected = false;
					filterSlider.labels = null;
					filterSlider.minimum = 0;
					filterSlider.maximum = 100;
					filterSlider.thumbCount = 1;
					filterSlider.value = 0;
					filterSlider.tickInterval = 0;
					filterSlider.snapInterval = 0;
					filterSlider.invalidateDisplayList();
					filterSlider.validateNow();
				}
				
				super.updateDisplayList.apply(this, arguments);
			}
		]]>
	</mx:Script>
</mx:HBox>
