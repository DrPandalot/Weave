<?xml version="1.0" encoding="utf-8"?>
<!--
/* ***** BEGIN LICENSE BLOCK *****
 *
 * This file is part of Weave.
 *
 * The Initial Developer of Weave is the Institute for Visualization
 * and Perception Research at the University of Massachusetts Lowell.
 * Portions created by the Initial Developer are Copyright (C) 2008-2015
 * the Initial Developer. All Rights Reserved.
 *
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this file,
 * You can obtain one at http://mozilla.org/MPL/2.0/.
 * 
 * ***** END LICENSE BLOCK ***** */
-->
<mx:HBox xmlns="weave.editors.*" 
		xmlns:mx="http://www.adobe.com/2006/mxml" xmlns:ui="weave.ui.*"
		implements="weave.api.ui.ILinkableObjectEditor,weave.api.core.ILinkableObject"
		paddingLeft="4"
		horizontalScrollPolicy="off" verticalScrollPolicy="off" width="100%" verticalAlign="middle">
	<ui:CustomCheckBox id="filterEnable" label="{getEnableLabel(columnTitle)}" change="toggleFilter();"/>
<!--	<mx:Button enabled="{filterEnable.selected}"
			   width="24" icon="@Embed(source='/weave/resources/images/eject-inset.png')"
			   toolTip="{lang('Select a column to be used for filtering the data.')}"
			   click="AttributeSelectorPanel.open(numberFilter.column, lang('Filter'));"/>
-->
	<mx:HSlider id="filterSlider" enabled="{filterEnable.selected}"
				thumbCount="2"
				liveDragging="true"
				mouseDown="event.target.setFocus(); event.stopPropagation()"
				change="handleSliderChange(event);"
				width="100%" minWidth="22"/>
	<mx:Script>
		<![CDATA[
			import mx.events.SliderEvent;
			
			import weave.api.core.ILinkableObject;
			import weave.api.linkBindableProperty;
			import weave.api.newLinkableChild;
			import weave.api.registerLinkableChild;
			import weave.core.LinkableBoolean;
			import weave.core.LinkableWatcher;
			import weave.core.UIUtils;
			import weave.data.AttributeColumns.DynamicColumn;
			import weave.data.KeySets.NumberDataFilter;
			import weave.utils.ColumnUtils;

			public const showToggle:LinkableBoolean = registerLinkableChild(this, new LinkableBoolean(true));
			
			override protected function childrenCreated():void
			{
				super.childrenCreated();
				
				UIUtils.linkVisibility(this, showToggle, filterEnable);
			}
			
			[Bindable] private var columnTitle:String;
			private function getEnableLabel(columnTitle:String):String
			{
				return lang('Filter by {0}', columnTitle || '...');
			}
			
			private const filterWatcher:LinkableWatcher = newLinkableChild(this, LinkableWatcher, invalidateDisplayList);
			private const statsWatcher:LinkableWatcher = newLinkableChild(this, LinkableWatcher, invalidateDisplayList);
			
			public function get numberFilter():NumberDataFilter
			{
				return filterWatcher.target as NumberDataFilter;
			}
			
			public function setTarget(object:ILinkableObject):void
			{
				filterWatcher.target = object as NumberDataFilter;
				if (numberFilter)
					statsWatcher.target = WeaveAPI.StatisticsCache.getColumnStatistics(numberFilter.column);
			}
			public function hasPendingChanges():Boolean { return false; }
			public function applyChanges():void { }
			
			private function toggleFilter():void
			{
				if (numberFilter)
					numberFilter.enabled.value = filterEnable.selected;
			}
			
			private function handleSliderChange(event:SliderEvent):void
			{
				if (!numberFilter || !UIUtils.hasFocus(filterSlider))
					return;
				numberFilter.min.value = filterSlider.values[0];
				numberFilter.max.value = filterSlider.values[1];
			}

			override protected function updateDisplayList(unscaledWidth:Number, unscaledHeight:Number):void
			{
				if (numberFilter)
				{
					enabled = true;
					filterEnable.selected = numberFilter.enabled.value;
					var column:DynamicColumn = numberFilter.column;
					columnTitle = ColumnUtils.getTitle(column);
					filterSlider.minimum = WeaveAPI.StatisticsCache.getColumnStatistics(column).getMin();
					filterSlider.maximum = WeaveAPI.StatisticsCache.getColumnStatistics(column).getMax();
					filterSlider.values = [numberFilter.min.value, numberFilter.max.value];
				}
				else
				{
					enabled = false;
					filterEnable.selected = false;
					filterSlider.minimum = 0;
					filterSlider.maximum = 100;
					filterSlider.values = [0, 100];
				}
				
				super.updateDisplayList.apply(this, arguments);
			}
		]]>
	</mx:Script>
</mx:HBox>
