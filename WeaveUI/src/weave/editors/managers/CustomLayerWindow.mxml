<?xml version="1.0" encoding="utf-8"?>
<!--
/*
    Weave (Web-based Analysis and Visualization Environment)
    Copyright (C) 2008-2011 University of Massachusetts Lowell

    This file is a part of Weave.

    Weave is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License, Version 3,
    as published by the Free Software Foundation.

    Weave is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with Weave.  If not, see <http://www.gnu.org/licenses/>.
*/
-->
<!---
	This component lists custom layers available 
	@author kmanohar
-->
<ui:DraggablePanel xmlns="weave.editors.managers.*" 
				xmlns:mx="http://www.adobe.com/2006/mxml"
				xmlns:ui="weave.ui.*"
				title="{lang('Add a new layer')}"
				width="250"
				height="400"
				escapeKeyClosesPanel="true"
				backgroundColor="0xcccccc"
				sessionPanelCoordsAsPercentages="false"
				layout="vertical">
	<mx:VBox initialize="UIUtils.pad(event, 5, 100, 100);">
		<mx:List id="layerSelector" width="100%" height="100%" doubleClickEnabled="true" doubleClick="addPlotter()">
			<mx:initialize>
				<![CDATA[
					layerSelector.dataProvider = WeaveAPI.getRegisteredImplementations(IPlotter);
					layerSelector.labelFunction = function(implementation:Class):String {
						return WeaveAPI.getRegisteredImplementationDisplayName(implementation);
					};
				]]>
			</mx:initialize>
		</mx:List>
		<mx:HBox width="100%">
			<mx:Spacer width="100%"/>
			<mx:Button label="{lang('Add new layer')}" click="addPlotter()" enabled="{layerSelector.selectedItem != null}"/>
			<mx:Button label="{lang('Cancel')}" click="removePanel()"/>
		</mx:HBox>
	</mx:VBox>
	<mx:Script>
		<![CDATA[
			import mx.core.UIComponent;
			
			import weave.api.WeaveAPI;
			import weave.api.core.ILinkableHashMap;
			import weave.api.getSessionState;
			import weave.api.ui.IPlotter;
			import weave.core.UIUtils;
			import weave.ui.ControlPanel;
			import weave.ui.SessionStateEditor;
			import weave.visualization.layers.Visualization;
			
			[PercentProxy("percentWidth")]
			override public function set width(value:Number):void
			{
				value = Math.round(value);
				super.width = value;
				if (!initialized)
					panelWidth.value = String(value);
			}
			
			[PercentProxy("percentHeight")]
			override public function set height(value:Number):void
			{
				value = Math.round(value);
				super.height = value;
				if (!initialized)
					panelHeight.value = String(value);
			}
			
			private var _visualization:Visualization = null;
			
			override protected function constructor():void
			{
				super.constructor();
				panelX.value = '' + int(33 + Math.random() * 10) + "%";
				panelY.value = '' + int(20 + Math.random() * 10) + "%";
				enableZOrder.value = false;
				minimizable.value = false;
				maximizable.value = false;
			}
			
			public function set targetVisualization(value:Visualization):void
			{
				if (_visualization != value && _visualization != null)
					throw new Error("targetTool should not be set more than once");
				
				_visualization = value;
			}
			
			private function addPlotter():void
			{
				if (CustomLayerWindow.addPlotterAndEdit(_visualization, layerSelector.selectedItem as Class))
					removePanel();
			}
			
			/**
			 * @return The newly created IPlotter, or null if it could not be created.
			 */
			public static function addPlotterAndEdit(visualization:Visualization, plotterType:Class):*
			{
				var hm:ILinkableHashMap = visualization.plotManager.plotters;
				var state:Object = getSessionState(visualization);
				var name:String = hm.generateUniqueName(WeaveAPI.getRegisteredImplementationDisplayName(plotterType));
				var plotter:IPlotter = hm.requestObject(name, plotterType, false) as IPlotter;
				if (!plotter)
					return null;
				
				ControlPanel.openEditor(plotter, [visualization], [state]);
				return plotter;
			}
			
		]]>
	</mx:Script>
</ui:DraggablePanel>
