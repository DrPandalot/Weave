<?xml version="1.0" encoding="utf-8"?>
<!--
/*
Weave (Web-based Analysis and Visualization Environment)
Copyright (C) 2008-2011 University of Massachusetts Lowell

This file is a part of Weave.

Weave is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License, Version 3,
as published by the Free Software Foundation.

Weave is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with Weave.  If not, see <http://www.gnu.org/licenses/>.
*/
-->
<!---
This component lists custom layers available 
@author kmanohar
-->
<ui:DraggablePanel xmlns="weave.editors.managers.*" 
				   xmlns:fx="http://ns.adobe.com/mxml/2009" 
				   xmlns:s="library://ns.adobe.com/flex/spark" 
				   xmlns:mx="library://ns.adobe.com/flex/mx" title="Add a new layer"
				   
				   
				   percentWidth="NaN" percentHeight="NaN"
				   sessionPanelCoordsAsPercentages="false"
				   xmlns:ui="weave.ui.*">
	<!--backgroundColor="0xcccccc"-->
	<ui:layout>
		<s:VerticalLayout/>
	</ui:layout>
	<s:BorderContainer borderStyle="solid" 
			  width="100%" height="100%">
		<s:backgroundFill>
			<s:SolidColor color="0xffffff" alpha="0.8"/>
		</s:backgroundFill>
		<s:layout>
			<s:VerticalLayout  paddingLeft="5" paddingTop="5" paddingBottom="5" paddingRight="5"/>
		</s:layout>
		
		<s:List id="layerSelector" width="100%" height="100%" minWidth="250" dataProvider="{layerSelectorDataProvider}">
			<!-- For now, add new plotter editors here. later, there will be a way of listing them automatically. -->
			
			<!--<mx:Object label="{lang('Bars')}" plotterClass="{CompoundBarChartPlotter}" selectable="true"/>-->
			
		</s:List>
		
		<s:Button label="{lang('Add new layer')}" right="0" click="openControls()" enabled="{layerSelector.selectedItem != null}"/>
	</s:BorderContainer>
	<fx:Declarations>
		<s:ArrayCollection id="layerSelectorDataProvider">
			<fx:Object label="{lang('Geometry Labels')}" plotterClass="{GeometryLabelPlotter}" selectable="true"/>
			<fx:Object label="{lang('Geometry Plotter')}" plotterClass="{GeometryPlotter}" selectable="true"/>
			<fx:Object label="{lang('WMS Plotter')}" plotterClass="{WMSPlotter}" selectable="true"/>
			<fx:Object label="{lang('Grid lines')}" plotterClass="{GridLinePlotter}" selectable="false"/>
			<fx:Object label="{lang('Labels')}" plotterClass="{AxisLabelPlotter}" selectable="false"/>
			<fx:Object label="{lang('Rectangle Plotter')}" plotterClass="{RectanglePlotter}" selectable="true"/>
			<fx:Object label="{lang('Image Plotter')}" plotterClass="{ImageGlyphPlotter}" selectable="true"/>
		</s:ArrayCollection>
	</fx:Declarations>
	<fx:Script>
		<![CDATA[
			import mx.core.INavigatorContent;
			import mx.core.IVisualElement;
			import mx.managers.PopUpManager;
			
			import spark.components.NavigatorContent;
			
			import weave.api.disposeObjects;
			import weave.api.registerDisposableChild;
			import weave.api.core.ILinkableHashMap;
			import weave.api.ui.ILinkableObjectEditor;
			import weave.api.ui.IPlotter;
			import weave.ui.ControlPanel;
			import weave.utils.EditorManager;
			import weave.visualization.layers.Visualization;
			import weave.visualization.plotters.AxisLabelPlotter;
			import weave.visualization.plotters.GeometryLabelPlotter;
			import weave.visualization.plotters.GeometryPlotter;
			import weave.visualization.plotters.GridLinePlotter;
			import weave.visualization.plotters.ImageGlyphPlotter;
			import weave.visualization.plotters.RectanglePlotter;
			import weave.visualization.plotters.WMSPlotter;
			
			private var _visualization:Visualization = null;
			
			override protected function constructor():void
			{
				super.constructor();
			}
			
			public function set targetVisualization(value:Visualization):void
			{
				if (_visualization != value && _visualization != null)
					throw new Error("targetTool should not be set more than once");
				
				_visualization = value;
			}
			
			private function openControls():void
			{
				var label:String = layerSelector.selectedItem.label;
				var Plotter:Class = layerSelector.selectedItem.plotterClass;
				
				var controls:ControlPanel = new ControlPanel();
				PopUpManager.addPopUp(controls, this);
				PopUpManager.centerPopUp(controls);
				controls.targets = [_visualization];
				
				var hm:ILinkableHashMap = _visualization.plotManager.plotters;
				var name:String = hm.generateUniqueName(label);
				var plotter:IPlotter = hm.requestObject(name, Plotter, false) as IPlotter;
				if (!plotter)
				{
					controls.revert();
					disposeObjects(controls);
					return;
				}
				registerDisposableChild(plotter, controls); // when the plotter goes away, make the control panel go away
				
				// add editor component to layercontrols
				var editor:ILinkableObjectEditor = EditorManager.getNewEditor(plotter);
				if (editor)
				{
					if(editor is INavigatorContent){
						controls.tabNavigator.addElement(editor as IVisualElement);
					}
					else{
						var navContent:NavigatorContent = new NavigatorContent();
						navContent.addElement(editor as IVisualElement);
						controls.tabNavigator.addElement(navContent);
					}
				}
				else
				{
					controls.removePanel();
				}
				
				removePanel();
			}
			
		]]>
	</fx:Script>
</ui:DraggablePanel>
