<?xml version="1.0" encoding="utf-8"?>
<!--
/*
    Weave (Web-based Analysis and Visualization Environment)
    Copyright (C) 2008-2011 University of Massachusetts Lowell

    This file is a part of Weave.

    Weave is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License, Version 3,
    as published by the Free Software Foundation.

    Weave is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with Weave.  If not, see <http://www.gnu.org/licenses/>.
*/
-->
<ui:DraggablePanel
	xmlns:mx="http://www.adobe.com/2006/mxml"
	xmlns="weave.editors.managers.*"
	xmlns:ui="weave.ui.*"
	backgroundColor="#EFF4BC"
	escapeKeyClosesPanel="true"
	sessionPanelCoordsAsPercentages="false"
	title="{lang('Manage data sources')}" xmlns:editors="weave.editors.*" xmlns:CustomDataGrid="weave.ui.CustomDataGrid.*">
	<mx:HDividedBox initialize="UIUtils.pad(event, padding, 100, 100)">
		<mx:VBox height="100%">
			<mx:Button id="createDataSource" label="{lang('New data source...')}" width="100%"/>
			<ui:Paragraph translate="true">
				Select a data source:
			</ui:Paragraph>
			<mx:List id="sourceList"
					 change="handleSourceSelect()"
					 minHeight="0"
					 height="100%" width="100%">
				<mx:itemRenderer>
					<mx:Component>
						<mx:HBox horizontalScrollPolicy="off" verticalAlign="middle">
							<mx:Label id="lbl" width="100%"/>
							<mx:Button id="menu" toolTip="{lang('Menu')}"
									   icon="@Embed(source='/weave/resources/images/menu_9x7.png')"
									   width="20" height="20"/>
							<ui:BusyIndicator id="busy" diameterRatio=".75"/>
							<mx:Script>
								<![CDATA[
									import weave.api.core.ILinkableHashMap;
									import weave.api.core.ILinkableObject;
									import weave.api.data.IDataSource;
									import weave.api.getLinkableOwner;
									import weave.core.UIUtils;
									import weave.menus.WeaveMenuItem;
									import weave.ui.SubMenu;
									
									private var _subMenu:SubMenu;
									
									override protected function childrenCreated():void
									{
										UIUtils.pad(this, 2);
										_subMenu = new SubMenu(menu, [
											{
												label: lang("Refresh hierarchy"),
												click: function():void {
													if (data is IDataSource)
														(data as IDataSource).refreshHierarchy();
												}
											},
											//WeaveMenuItem.TYPE_SEPARATOR,
											{
												label: lang('Delete'),
												click: function():void {
													var name:String = WeaveAPI.globalHashMap.getName(data as ILinkableObject);
													WeaveAPI.globalHashMap.removeObject(name);
												}
											}
										]);
									}

									override public function set data(value:Object):void
									{
										super.data = value as IDataSource;
										lbl.text = WeaveAPI.globalHashMap.getName(value as ILinkableObject);
										busy.targets = [value];
									}
								]]>
							</mx:Script>
						</mx:HBox>
					</mx:Component>
				</mx:itemRenderer>
			</mx:List>
		</mx:VBox>
		<ui:CustomTabNavigator id="tabNav" initialize="UIUtils.pad(event, padding, 100, 100)" change="callLater(handleSourceSelect)">
			<ui:CustomViewStack id="browseTab" label="{lang('Browse')}" initialize="UIUtils.pad(event, 0, 100, 100, true)" selectedIndex="{dataSource ? 1 : 0}">
				<mx:Canvas width="100%" height="100%">
					<ui:Paragraph translate="true" id="browseMessage"/>
				</mx:Canvas>
				<mx:HBox width="100%" height="100%">
					<editors:DynamicColumnEditor id="browser" dataSource="{dataSource}"/>
					<mx:Button id="createVis" label="{lang('Create a visualization...')}"/>
					<mx:VBox width="100%" height="100%" id="columnDisplay">
						<mx:Label id="columnDisplayLabel"/>
						<CustomDataGrid:CustomDataGrid id="columnDisplayGrid"
									 height="100%" width="100%"
									 sortableColumns="false"
									 draggableColumns="false"
									 verticalScrollPolicy="on">
							<CustomDataGrid:creationComplete>
								<![CDATA[
									browser.explorer.fileVBox.addChild(columnDisplay);
									var column:IAttributeColumn = browser.referencedColumn;
									var dgc1:DataGridColumn = new CustomDataGridColumn(keyColumn, null, null);
									var dgc2:DataGridColumn = new CustomDataGridColumn(dataColumn, null, null);
									columnDisplayGrid.columns = [dgc1, dgc2];
									dataColumn.setInternalColumn(column);
									column.addGroupedCallback(
										this,
										function():void {
											var keyCount:int = column.keys.length;
											columnDisplay.enabled = keyCount > 0;
											if (linkableObjectIsBusy(column))
												columnDisplayLabel.text = lang("Loading data...");
											else
											{
												columnDisplayLabel.visible = columnDisplayLabel.includeInLayout = columnDisplay.enabled;
												columnDisplayLabel.text = lang(
													'Selected column has {0} records',
													StandardLib.formatNumber(keyCount)
												);
											}
											columnDisplayGrid.dataProvider = column.keys;
											keyColumn.keyType.value = column.getMetadata(ColumnMetadata.KEY_TYPE);
											var dataType:String = column.getMetadata(ColumnMetadata.DATA_TYPE);
											var metadata:Object = {};
											metadata[ColumnMetadata.TITLE] = dataType ? lang("Value ({0})", dataType) : lang("Value");
											dataColumn.setMetadata(metadata);
										},
										true
									);
									BindingUtils.bindSetter(
										function(selectedItem:IWeaveTreeNode):void
										{
											var ref:IColumnReference = selectedItem as IColumnReference;
											columnDisplay.visible = columnDisplay.includeInLayout = ref && ref.getColumnMetadata() != null;
										},
										browser.explorer.fileView,
										'selectedItem'
									);
								]]>
							</CustomDataGrid:creationComplete>
						</CustomDataGrid:CustomDataGrid>
					</mx:VBox>
				</mx:HBox>
			</ui:CustomViewStack>
			<ui:CustomViewStack id="editTab" label="{lang('Configure')}" initialize="UIUtils.pad(event, 0, 100, 100, true)" selectedIndex="{dataSource ? 1 : 0}">
				<mx:Canvas width="100%" height="100%">
					<ui:Paragraph translate="true" id="configureMessage"/>
				</mx:Canvas>
				<mx:VBox width="100%" height="100%">
					<mx:Box id="container" initialize="UIUtils.pad(event, 0, 100, 100, true)"/>
					<mx:HBox width="100%">
						<ui:CustomCheckBox id="refreshCheck" label="{lang('Refresh hierarchy after apply')}" selected="true"/>
						<mx:Spacer width="100%"/>
						<mx:Button label="{lang('Apply changes')}" click="save()"/>
						<mx:Button label="{lang('Cancel')}" click="removeEditor(); tabNav.selectedChild = browseTab;"/>
					</mx:HBox>
				</mx:VBox>
			</ui:CustomViewStack>
		</ui:CustomTabNavigator>
	</mx:HDividedBox>
		
		<mx:Script>
			<![CDATA[
				import weave.menus.DataMenu;
				import weave.api.core.ILinkableHashMap;
				import weave.utils.ColumnUtils;
				import weave.api.ui.IObjectWithSelectableAttributes;
				import avmplus.getQualifiedClassName;
				import weave.core.ClassUtils;
				import weave.visualization.tools.SimpleVisTool;
				import weave.api.core.ILinkableObject;
				import weave.menus.ToolsMenu;
				import weave.menus.WeaveMenuItem;
				import weave.ui.SubMenu;
				import mx.binding.utils.BindingUtils;
				import mx.controls.dataGridClasses.DataGridColumn;
				import mx.core.Container;
				
				import weave.api.data.ColumnMetadata;
				import weave.api.data.IAttributeColumn;
				import weave.api.data.IColumnReference;
				import weave.api.data.IDataSource;
				import weave.api.data.IWeaveTreeNode;
				import weave.api.disposeObject;
				import weave.api.linkableObjectIsBusy;
				import weave.api.newDisposableChild;
				import weave.api.registerDisposableChild;
				import weave.api.reportError;
				import weave.api.ui.ILinkableObjectEditor;
				import weave.compiler.StandardLib;
				import weave.core.UIUtils;
				import weave.data.AttributeColumns.KeyColumn;
				import weave.data.AttributeColumns.ProxyColumn;
				import weave.ui.CustomDataGrid.CustomDataGridColumn;
				import weave.utils.PopUpUtils;
				
				private static const padding:int = 8;
				
				private const keyColumn:KeyColumn = newDisposableChild(this, KeyColumn);
				private const dataColumn:ProxyColumn = newDisposableChild(this, ProxyColumn);
				
				override protected function childrenCreated():void
				{
					super.childrenCreated();
					
					initCreateVis();
					createDataSource.data = new SubMenu(createDataSource, DataMenu.getDynamicItems());
					
					WeaveAPI.globalHashMap.childListCallbacks.addImmediateCallback(this, updateSources, true);
					selectDataSource(null);
				}
				
				private function initCreateVis():void
				{
					browser.explorer.fileVBox.addChildAt(createVis, 0);
					
					function onClick(item:WeaveMenuItem):void
					{
						var input:Array = [].concat(browser.explorer.selectedFolder.getChildren());
						const max_input:int = 10;
						if (input.length > max_input)
							input.length = max_input;
						var obj:IObjectWithSelectableAttributes = ToolsMenu.createGlobalObject(item) as IObjectWithSelectableAttributes;
						if (obj is SimpleVisTool)
						{
							(obj as SimpleVisTool).initSelectableAttributes(input);
						}
						else
						{
							var selectables:Array = obj.getSelectableAttributes();
							if (selectables.length == 1 && selectables[0] is ILinkableHashMap)
								input.forEach(function(item:Object, i:int, a:Array):void {
									ColumnUtils.initSelectableAttribute(selectables[0], item, i == 0);
								});
							else
								ColumnUtils.initSelectableAttributes(selectables, input);
						}
					}
					createVis.data = new SubMenu(createVis, function():Array {
						return ToolsMenu.getDynamicItems().filter(
							function(item:WeaveMenuItem, ..._):Boolean {
								item.click = onClick;
								var qname:String = getQualifiedClassName(item.data);
								var qname_iowsa:String = getQualifiedClassName(IObjectWithSelectableAttributes);
								return ClassUtils.classImplements(qname, qname_iowsa);
							}
						);
					});
				}
				
				override public function reposition():void
				{
					panelWidth.value = "700";
					panelHeight.value = "500";
				}
				
				private function hasPendingChanges():Boolean
				{
					return editor && editor.parent && editor.hasPendingChanges();
				}
				
				private function updateSources():void
				{
					sourceList.dataProvider = WeaveAPI.globalHashMap.getObjects(IDataSource);
					sourceList.selectedItem = dataSource;
					
					if (WeaveAPI.globalHashMap.childListCallbacks.lastObjectRemoved == dataSource)
						selectDataSource(null);
					
					var newDataSource:IDataSource = WeaveAPI.globalHashMap.childListCallbacks.lastObjectAdded as IDataSource;
					if (newDataSource && !hasPendingChanges())
					{
						selectDataSource(newDataSource);
						tabNav.selectedIndex = 0;
					}
				}
				
				[Bindable] private var dataSource:IDataSource;
				private var editor:ILinkableObjectEditor = null;
				
				/**
				 * Displays the Browse tab for a specific data source.
				 */
				public function browse(target:IDataSource, discardChanges:Boolean = false):void
				{
					if (discardChanges || !hasPendingChanges())
					{
						selectDataSource(target);
						tabNav.selectedChild = browseTab;
					}
				}
				
				private function selectDataSource(value:IDataSource):void
				{
					sourceList.selectedItem = value;
					handleSourceSelect(true);
				}
				
				private function handleSourceSelect(confirmed:Boolean = false):void
				{
					var newDataSource:IDataSource = sourceList.selectedItem as IDataSource;
					
					// don't reset editor if unnecessary
					if (dataSource == newDataSource && tabNav.selectedChild == editTab && hasPendingChanges())
						return;
					
					if (!confirmed && hasPendingChanges())
					{
						// switch back until user confirms
						sourceList.selectedItem = dataSource;
						tabNav.selectedChild = editTab;
						confirmDiscard(function():void { selectDataSource(newDataSource); });
						return;
					}
					
					if (confirmed && dataSource == newDataSource)
					{
						// clear any existing selection
						browser.referencedColumn.setColumnReference(null, null);
					}
					
					removeEditor();
					
					dataSource = newDataSource
					
					if (dataSource && tabNav.selectedChild == editTab)
					{
						editor = registerDisposableChild(this, WeaveAPI.EditorManager.getNewEditor(dataSource));
						if (!editor)
							return;
						container.addChildAt(editor as DisplayObject, 0);
						if (editor is Container)
							(editor as Container).label = lang('Edit {0}', WeaveAPI.ClassRegistry.getDisplayName(Object(dataSource).constructor as Class));
						editor.percentWidth = 100;
						editor.percentHeight = 100;
					}
					
					if (!dataSource)
					{
						if (WeaveAPI.globalHashMap.getObjects(IDataSource).length)
							browseMessage.text = configureMessage.text = "Please select a data source.";
						else
							browseMessage.text = configureMessage.text = "Please create a data source first.";
					}
				}
				
				private function save():void
				{
					try
					{
						if (editor != null)
						{
							editor.applyChanges();
							removeEditor();
							if (refreshCheck.selected)
								dataSource.refreshHierarchy();
							tabNav.selectedChild = browseTab;
						}
					}
					catch (e:Error)
					{
						reportError(e);
					}
				}
				
				private function removeEditor():void
				{
					if (editor && editor.parent == container)
						container.removeChild(editor as DisplayObject);
					disposeObject(editor);
					editor = null;
				}
				
				override public function removePanel():void
				{
					if (hasPendingChanges())
					{
						confirmDiscard(function():void {
							selectDataSource(null);
							removePanel();
						});
					}
					else
					{
						selectDataSource(null);
						super.removePanel();
					}
				}
				
				private function confirmDiscard(yes:Function):void
				{
					PopUpUtils.confirm(
						this,
						lang('Discard changes'),
						lang('Discard unsaved changes?'),
						yes, null,
						lang('Discard'), lang('Cancel')
					);
				}
			]]>
		</mx:Script>
</ui:DraggablePanel>