<?xml version="1.0" encoding="utf-8"?>
<!--
/*
    Weave (Web-based Analysis and Visualization Environment)
    Copyright (C) 2008-2011 University of Massachusetts Lowell

    This file is a part of Weave.

    Weave is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License, Version 3,
    as published by the Free Software Foundation.

    Weave is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with Weave.  If not, see <http://www.gnu.org/licenses/>.
*/
-->
<ui:DraggablePanel
	xmlns:mx="http://www.adobe.com/2006/mxml"
	xmlns="weave.editors.managers.*"
	xmlns:ui="weave.ui.*"
	sessionPanelCoordsAsPercentages="false"
	escapeKeyClosesPanel="true"
	title="{lang('Add new data source')}">
	<mx:HBox initialize="UIUtils.pad(event, padding, 100, 100)" horizontalGap="{padding}">
		<mx:VBox height="100%">
			<ui:Paragraph translate="true">
				Choose one:
			</ui:Paragraph>
			<mx:List id="options" initialize="UIUtils.pad(event, 0, 100, 100, true)" change="handleDataSelect()"/>
		</mx:VBox>
		<mx:VRule height="100%"/>
		<mx:VBox initialize="UIUtils.pad(event, padding, 100, 100)" visible="{!!options.selectedItem}">
			<mx:Box id="container" initialize="UIUtils.pad(event, 0, 100, 100, true)"/>
			<mx:HBox width="100%">
				<mx:Spacer width="100%"/>
				<mx:Button id="addButton" label="{lang('Add this data source')}" click="addSource()"/>
				<mx:Button id="cancelButton" label="{lang('Cancel')}" click="removePanel()"/>
			</mx:HBox>
		</mx:VBox>
	</mx:HBox>
	
	<mx:Script>
		<![CDATA[
			import mx.controls.Alert;
			
			import weave.Weave;
			import weave.api.WeaveAPI;
			import weave.api.copySessionState;
			import weave.api.data.IDataSource;
			import weave.api.disposeObject;
			import weave.api.newDisposableChild;
			import weave.api.ui.ILinkableObjectEditor;
			import weave.core.UIUtils;
			import weave.data.DataSources.CSVDataSource;
			import weave.data.DataSources.DBFDataSource;
			import weave.data.DataSources.TransposedDataSource;
			import weave.data.DataSources.WFSDataSource;
			import weave.data.DataSources.WeaveDataSource;
			import weave.data.DataSources.XLSDataSource;
			import weave.editors.CSVDataSourceEditor;
			import weave.editors.DBFDataSourceEditor;
			import weave.editors.TransposedDataSourceEditor;
			import weave.editors.WFSDataSourceEditor;
			import weave.editors.WeaveDataSourceEditor;
			import weave.editors.XLSDataSourceEditor;
			import weave.utils.EditorManager;

			private static const padding:int = 5;
			
			override protected function constructor():void
			{
				super.constructor();
				
				panelWidth.value = "700";
				panelHeight.value = "500";
			}
			
			override protected function childrenCreated():void
			{
				super.childrenCreated();
				
				options.dataProvider = WeaveAPI.getRegisteredImplementations(IDataSource);
				options.labelFunction = WeaveAPI.getRegisteredImplementationDisplayName;
			}
			
			private var _editor:ILinkableObjectEditor;
			
			private function handleDataSelect():void
			{
				disposeObject(_editor);
				container.removeAllChildren();
				_editor = null;
				if (!options.selectedItem)
					return;
				var Editor:Class = EditorManager.getEditorClass(options.selectedItem);
				_editor = newDisposableChild(this, Editor);
				container.addChild(_editor as DisplayObject);
				_editor.percentWidth = 100;
				_editor.percentHeight = 100;
			}
			
			//TODO Check for emtpy data source,switching between sources needs to be tested,
			//if source name already exists,feedback when object is generated,order of columns
			private function addSource():void
			{
				var wfsDataSourceEditor:WFSDataSourceEditor = _editor as WFSDataSourceEditor;
				if (wfsDataSourceEditor)
				{
					if (wfsDataSourceEditor.sourceName.text == "" || wfsDataSourceEditor.url.text == "")
					{
						Alert.show(lang("Please fill all required fields"),lang("Error"));
						return;
					}
					if (Weave.root.getObject(wfsDataSourceEditor.sourceName.text))
					{
						Alert.show(lang("Source Name already being used. Please give a different name"), lang("Error"));
						return;
					}
					var wfsDataSource:WFSDataSource = Weave.root.requestObject(wfsDataSourceEditor.sourceName.text, WFSDataSource, false);
					if (!wfsDataSource)
					{
						Alert.show(lang("Unexpected problem. Unable to add the data source."));
						return;
					}
					wfsDataSource.url.value = wfsDataSourceEditor.url.text;
				}
				
				var csvDataSourceEditor:CSVDataSourceEditor = _editor as CSVDataSourceEditor;
				if (csvDataSourceEditor)
				{
					if (csvDataSourceEditor.sourceName.text == "" || (csvDataSourceEditor.url.text == "" && csvDataSourceEditor.getCSVRows() == null) || csvDataSourceEditor.keyTypeSelector.selectedKeyType == "")
					{
						Alert.show(lang("Please fill all required fields"),lang("Error"));
						return;
					}
					if (Weave.root.getObject(csvDataSourceEditor.sourceName.text))
					{
						Alert.show(lang("Source Name already being used. Please give a different name"), lang("Error"));
						return;
					}
					var csvDataSource:CSVDataSource = Weave.root.requestObject(csvDataSourceEditor.sourceName.text, CSVDataSource, false);
					if (!csvDataSource)
					{
						Alert.show(lang("Unexpected problem. Unable to add the data source."));
						return;
					}
					csvDataSource.url.value = csvDataSourceEditor.url.text;
					csvDataSource.csvData.setSessionState(csvDataSourceEditor.getCSVRows());
					csvDataSource.keyColName.value = csvDataSourceEditor.keyColumnName.text;
					csvDataSource.keyType.value = csvDataSourceEditor.keyTypeSelector.selectedKeyType;
				}
				
				var dbfDataSourceEditor:DBFDataSourceEditor = _editor as DBFDataSourceEditor;
				if (dbfDataSourceEditor)
				{
					if (dbfDataSourceEditor.sourceName.text == "" || dbfDataSourceEditor.dbfURL.text == "")
					{
						Alert.show(lang("Please fill all required fields"),lang("Error"));
						return;
					}
					if (Weave.root.getObject(dbfDataSourceEditor.sourceName.text))
					{
						Alert.show(lang("Source Name already being used. Please give a different name"), lang("Error"));
						return;
					}
					var dbfDataSource:DBFDataSource = Weave.root.requestObject(dbfDataSourceEditor.sourceName.text, DBFDataSource, false);
					if (!dbfDataSource)
					{
						Alert.show(lang("Unexpected problem. Unable to add the data source."));
						return;
					}
					dbfDataSource.dbfUrl.value = dbfDataSourceEditor.dbfURL.text;
					dbfDataSource.shpUrl.value = dbfDataSourceEditor.shpURL.text;
					dbfDataSource.keyColName.value = dbfDataSourceEditor.keyColumnName.text;
					dbfDataSource.keyType.value = dbfDataSourceEditor.keyTypeSelector.selectedKeyType;
				}
				
				var xlsDataSourceEditor:XLSDataSourceEditor = _editor as XLSDataSourceEditor;
				if (xlsDataSourceEditor)
				{
					if (xlsDataSourceEditor.sourceName.text == "" || (xlsDataSourceEditor.url.text == "" && xlsDataSourceEditor.xlsFile == null))
					{
						Alert.show(lang("Please fill all required fields"),lang("Error"));
						return;
					}
					if (Weave.root.getObject(xlsDataSourceEditor.sourceName.text))
					{
						Alert.show(lang("Source Name already being used. Please give a different name"), lang("Error"));
						return;
					}
					//if an XLS file has been loaded we create and add it to a CSVDataSource
					if (xlsDataSourceEditor.xlsFile != null)
					{
						var csvSource:CSVDataSource = Weave.root.requestObject(xlsDataSourceEditor.sourceName.text, CSVDataSource, false);
						if (!csvSource)
						{
							Alert.show(lang("Unexpected problem. Unable to add the data source."));
							return;
						}
						csvSource.url.value = xlsDataSourceEditor.url.text;
						csvSource.setCSVDataString(WeaveAPI.CSVParser.createCSV(xlsDataSourceEditor.xlsDataArray));
						csvSource.keyColName.value = xlsDataSourceEditor.keyColumnName.text;
						csvSource.keyType.value = xlsDataSourceEditor.keyTypeSelector.selectedKeyType;
					}
					else
					{
						var xlsDataSource:XLSDataSource = Weave.root.requestObject(xlsDataSourceEditor.sourceName.text, XLSDataSource, false);
						if (!xlsDataSource)
						{
							Alert.show(lang("Unexpected problem. Unable to add the data source."));
							return;
						}
						xlsDataSource.url.value = xlsDataSourceEditor.url.text;
						xlsDataSource.keyColName.value = xlsDataSourceEditor.keyColumnName.text;
						xlsDataSource.keyType.value = xlsDataSourceEditor.keyTypeSelector.selectedKeyType;
					}
				}
				
				var weaveDataSourceEditor:WeaveDataSourceEditor = _editor as WeaveDataSourceEditor;
				if (weaveDataSourceEditor)
				{
					if (weaveDataSourceEditor.sourceName.text == "")
					{
						Alert.show(lang("Please fill all required fields"),lang("Error"));
						return;
					}
					if (Weave.root.getObject(weaveDataSourceEditor.sourceName.text))
					{
						Alert.show(lang("Source Name already being used. Please give a different name"), lang("Error"));
						return;
					}
					var weaveDataSource:WeaveDataSource = Weave.root.requestObject(weaveDataSourceEditor.sourceName.text, WeaveDataSource, false);
					if (!weaveDataSource)
					{
						Alert.show(lang("Unexpected problem. Unable to add the data source."));
						return;
					}
					weaveDataSource.url.value = weaveDataSourceEditor.url.text;
				}
				
				var transposedDataSourceEditor:TransposedDataSourceEditor = _editor as TransposedDataSourceEditor;
				if (transposedDataSourceEditor)
				{
					if (transposedDataSourceEditor.sourceName.text == "")
					{
						Alert.show(lang("Please fill all required fields"),lang("Error"));
						return;
					}
					if (Weave.root.getObject(transposedDataSourceEditor.sourceName.text))
					{
						Alert.show(lang("Source Name already being used. Please give a different name"), lang("Error"));
						return;
					}
					var transposedDataSource:TransposedDataSource = Weave.root.requestObject(transposedDataSourceEditor.sourceName.text, TransposedDataSource, false);
					if (!transposedDataSource)
					{
						Alert.show(lang("Unexpected problem. Unable to add the data source."));
						return;
					}
					
					copySessionState(transposedDataSourceEditor, transposedDataSource);
				}
				
				removePanel();
			}
			
			override public function removePanel():void
			{
				options.selectedItem = null;
				handleDataSelect();
				super.removePanel();
			}
		]]>
	</mx:Script>
</ui:DraggablePanel>