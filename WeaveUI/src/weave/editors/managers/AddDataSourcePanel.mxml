<?xml version="1.0" encoding="utf-8"?>
<!--
/*
Weave (Web-based Analysis and Visualization Environment)
Copyright (C) 2008-2011 University of Massachusetts Lowell

This file is a part of Weave.

Weave is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License, Version 3,
as published by the Free Software Foundation.

Weave is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with Weave.  If not, see <http://www.gnu.org/licenses/>.
*/
-->
<ui:DraggablePanel
	xmlns:fx="http://ns.adobe.com/mxml/2009" 
	xmlns:s="library://ns.adobe.com/flex/spark" 
	xmlns:mx="library://ns.adobe.com/flex/mx"
	xmlns="weave.editors.managers.*"
	layout="{new BasicLayout()}"
	title="{lang('Add New Data Source')}"
	height="564"
	width="184"
	creationComplete="handleDataSelect()" xmlns:ui="weave.ui.*"
	borderAlpha="1" borderColor="0x939178">

	
	<fx:Declarations>
		<s:RadioButtonGroup id="dataSourceType" itemClick="handleDataSelect(event)"/>
	</fx:Declarations>
	<s:HGroup height="100%" width="100%" gap="0">
		<s:VGroup paddingLeft="5" paddingTop="5" paddingRight="5" paddingBottom="5" height="100%">
			
			<s:RadioButton selected="true" groupName="dataSourceType" id="wfsSource" value="{WFSDataSource}" label="WFS Data Source"/>
			<s:RadioButton groupName="dataSourceType" id="csvSource" value="{CSVDataSource}" label="{lang('CSV Data Source')}"/>
			<s:RadioButton groupName="dataSourceType" id="xlsSource" value="{XLSDataSource}" label="{lang('XLS Data Source')}"/>
			<s:RadioButton groupName="dataSourceType" id="dbfSource" value="{DBFDataSource}" label="{lang('DBF Data Source')}"/>
			<s:RadioButton groupName="dataSourceType" id="weaveSource" value="{WeaveDataSource}" label="{lang('Weave Data Source')}"/>
		</s:VGroup>
		<!-- sanjay need to ask Andy ( is it required )-->
		<s:BorderContainer  width="5" height="100%">
			<s:backgroundFill>
				<s:SolidColor color="#939178"/>
			</s:backgroundFill>
		</s:BorderContainer>
		<s:Group width="100%" height="100%" id="container" />
	</s:HGroup>
	
	<ui:controlBarContent>
		<s:Button id="addButton" label="{lang('Add this data source')}" click="addSource()"/>
		<s:Button id="cancelButton" label="{lang('Close')}" click="removePanel()"/>
	</ui:controlBarContent>
	
	
	<fx:Script>
		<![CDATA[
			import mx.controls.Alert;
			import mx.core.IVisualElement;
			import mx.events.ItemClickEvent;
			import mx.managers.PopUpManager;
			
			import spark.layouts.BasicLayout;
			
			import weave.Weave;
			import weave.api.WeaveAPI;
			import weave.api.setSessionState;
			import weave.api.core.ILinkableObject;
			import weave.api.ui.ILinkableObjectEditor;
			import weave.data.DataSources.CSVDataSource;
			import weave.data.DataSources.DBFDataSource;
			import weave.data.DataSources.WFSDataSource;
			import weave.data.DataSources.WeaveDataSource;
			import weave.data.DataSources.XLSDataSource;
			import weave.editors.CSVDataSourceEditor;
			import weave.editors.DBFDataSourceEditor;
			import weave.editors.WFSDataSourceEditor;
			import weave.editors.WeaveDataSourceEditor;
			import weave.editors.XLSDataSourceEditor;
			import weave.utils.EditorManager;
			
			private static var _staticInstance:AddDataSourcePanel = null;
			public static function showAsPopup():void
			{
				if(_staticInstance == null)
					_staticInstance = PopUpManager.createPopUp(WeaveAPI.topLevelApplication as DisplayObject, AddDataSourcePanel, false) as AddDataSourcePanel;
				
				PopUpManager.centerPopUp(_staticInstance);
			}
			
			private var _editor:ILinkableObjectEditor;
			
			private function handleDataSelect(event:ItemClickEvent=null):void
			{
				container.removeAllElements();
				var Editor:Class = EditorManager.getEditorClass(dataSourceType.selectedValue);
				_editor = new Editor();
				container.addElement(_editor as IVisualElement);
				_editor.percentWidth = 100;
				_editor.percentHeight = 100;
			}
			
			//TODO Check for emtpy data source,switching between sources needs to be tested,
			//if source name already exists,feedback when object is generated,order of columns
			private function addSource():void
			{
				var checkObj:ILinkableObject = null;
				
				var wfsDataSourceEditor:WFSDataSourceEditor = _editor as WFSDataSourceEditor;
				if (wfsDataSourceEditor)
				{
					if (wfsDataSourceEditor.sourceName.text == "" || wfsDataSourceEditor.url.text == "")
					{
						Alert.show(lang("Please fill all required fields"),lang("Error"));
						return;
					}
					checkObj = Weave.root.getObject(wfsDataSourceEditor.sourceName.text);
					if (checkObj != null)
					{
						Alert.show(lang("Source Name already being used. Please give a different name"), lang("Error"));
						return;
					}
					var wfsDataSource:WFSDataSource = Weave.root.requestObject(wfsDataSourceEditor.sourceName.text, WFSDataSource, false);
					if (wfsDataSource != null)
						Alert.show(lang("Data Source added successfully"));
					wfsDataSource.url.value = wfsDataSourceEditor.url.text;
				}
				
				var csvDataSourceEditor:CSVDataSourceEditor = _editor as CSVDataSourceEditor;
				if (csvDataSourceEditor)
				{
					if (csvDataSourceEditor.sourceName.text == "" || (csvDataSourceEditor.url.text == "" && csvDataSourceEditor.getCSVRows() == null) || (csvDataSourceEditor.keyTypeSelector.selectedItem as String)== "")
					{
						Alert.show(lang("Please fill all required fields"),lang("Error"));
						return;
					}
					checkObj = Weave.root.getObject(csvDataSourceEditor.sourceName.text);
					if (checkObj != null)
					{
						Alert.show(lang("Source Name already being used. Please give a different name"), lang("Error"));
						return;
					}
					var csvDataSource:CSVDataSource = Weave.root.requestObject(csvDataSourceEditor.sourceName.text, CSVDataSource, false);
					if (csvDataSource != null)
						Alert.show(lang("Data Source added successfully"));
					csvDataSource.url.value = csvDataSourceEditor.url.text;
					csvDataSource.csvData.setSessionState(csvDataSourceEditor.getCSVRows());
					csvDataSource.keyColName.value = csvDataSourceEditor.keyColumnName.text;
					csvDataSource.keyType.value = csvDataSourceEditor.keyTypeSelector.selectedItem as String;
				}
				
				var dbfDataSourceEditor:DBFDataSourceEditor = _editor as DBFDataSourceEditor;
				if (dbfDataSourceEditor)
				{
					if (dbfDataSourceEditor.sourceName.text == "" || dbfDataSourceEditor.dbfURL.text == "")
					{
						Alert.show(lang("Please fill all required fields"),lang("Error"));
						return;
					}
					checkObj = Weave.root.getObject(dbfDataSourceEditor.sourceName.text);
					if (checkObj != null)
					{
						Alert.show(lang("Source Name already being used. Please give a different name"), lang("Error"));
						return;
					}
					var dbfDataSource:DBFDataSource = Weave.root.requestObject(dbfDataSourceEditor.sourceName.text, DBFDataSource, false);
					if (dbfDataSource != null)
						Alert.show(lang("Data Source added successfully"));
					dbfDataSource.dbfUrl.value = dbfDataSourceEditor.dbfURL.text;
					dbfDataSource.shpUrl.value = dbfDataSourceEditor.shpURL.text;
					dbfDataSource.keyColName.value = dbfDataSourceEditor.keyColumnName.text;
					dbfDataSource.keyType.value = dbfDataSourceEditor.keyTypeSelector.selectedItem as String;
				}
				
				var xlsDataSourceEditor:XLSDataSourceEditor = _editor as XLSDataSourceEditor;
				if (xlsDataSourceEditor)
				{
					if (xlsDataSourceEditor.sourceName.text == "" || (xlsDataSourceEditor.url.text == "" && xlsDataSourceEditor.xlsFile == null))
					{
						Alert.show(lang("Please fill all required fields"),lang("Error"));
						return;
					}
					checkObj = Weave.root.getObject(xlsDataSourceEditor.sourceName.text);
					if (checkObj != null)
					{
						Alert.show(lang("Source Name already being used. Please give a different name"), lang("Error"));
						return;
					}
					//if an XLS file has been loaded we create and add it to a CSVDataSource
					if (xlsDataSourceEditor.xlsFile !=null)
					{
						var csvSource:CSVDataSource = Weave.root.requestObject(xlsDataSourceEditor.sourceName.text, CSVDataSource, false);
						if (csvSource != null)
							Alert.show(lang("Data Source added successfully"));
						csvSource.url.value = xlsDataSourceEditor.url.text;
						csvSource.setCSVDataString(WeaveAPI.CSVParser.createCSV(xlsDataSourceEditor.xlsDataArray));
						csvSource.keyColName.value = xlsDataSourceEditor.keyColumnName.text;
						csvSource.keyType.value = xlsDataSourceEditor.keyTypeSelector.selectedItem as String;
						return;
					}
					var xlsDataSource:XLSDataSource = Weave.root.requestObject(xlsDataSourceEditor.sourceName.text, XLSDataSource, false);
					if (xlsDataSource != null)
						Alert.show(lang("Data Source added successfully"));
					xlsDataSource.url.value = xlsDataSourceEditor.url.text;
					xlsDataSource.keyColName.value = xlsDataSourceEditor.keyColumnName.text;
					xlsDataSource.keyType.value = xlsDataSourceEditor.keyTypeSelector.selectedItem as String;
				}
				
				var weaveDataSourceEditor:WeaveDataSourceEditor = _editor as WeaveDataSourceEditor;
				if (weaveDataSourceEditor)
				{
					if (weaveDataSourceEditor.sourceName.text == "")
					{
						Alert.show(lang("Please fill all required fields"),lang("Error"));
						return;
					}
					checkObj = Weave.root.getObject(weaveDataSourceEditor.sourceName.text);
					if (checkObj != null)
					{
						Alert.show(lang("Source Name already being used. Please give a different name"), lang("Error"));
						return;
					}
					var weaveDataSource:WeaveDataSource = Weave.root.requestObject(weaveDataSourceEditor.sourceName.text, WeaveDataSource, false);
					if (weaveDataSource != null)
						Alert.show(lang("Data Source added successfully"));
					weaveDataSource.url.value = weaveDataSourceEditor.url.text;
				}
			}
			
		]]>
	</fx:Script>
</ui:DraggablePanel>