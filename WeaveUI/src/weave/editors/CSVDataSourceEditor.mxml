<?xml version="1.0" encoding="utf-8"?>
<!--
/*
    Weave (Web-based Analysis and Visualization Environment)
    Copyright (C) 2008-2011 University of Massachusetts Lowell

    This file is a part of Weave.

    Weave is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License, Version 3,
    as published by the Free Software Foundation.

    Weave is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with Weave.  If not, see <http://www.gnu.org/licenses/>.
*/
-->
<mx:VBox 
	xmlns="weave.editors.*"
	xmlns:mx="http://www.adobe.com/2006/mxml"
	xmlns:ui="weave.ui.*"
	xmlns:CustomDataGrid="weave.ui.CustomDataGrid.*"
	verticalScrollPolicy="off"
	horizontalScrollPolicy="off"
	creationPolicy="all"
	implements="weave.api.ui.IDataSourceEditor"
	>
	<mx:Label id="editorTitle" fontWeight="bold" text="{label}"/>
	<ui:Indent group="{indentGroup}" label="{lang('Source Name *')}">
		<mx:TextInput id="sourceName" focusOut="keyTypeSelector.addKeyTypeToMenu(sourceName.text)" width="100%"/>
	</ui:Indent>
	<ui:Indent group="{indentGroup}" label="{lang('Source URL')}">
		<ui:TextInputWithPrompt change="handleURLTextChange()" id="url" width="100%" prompt="http://www.example.com/example.csv"/>
		<mx:Button label="{lang('Open file')}" click="append = false; browseForFiles()"/>
	</ui:Indent>
	<ui:CustomTabNavigator id="editorTabNavigator" width="100%" height="100%"
						   initialize="UIUtils.pad(event, 5);"
						   change="editorTabChanged(event)" enabled="{!url.text}">
		<mx:VBox id="tableEditorBox" label="{lang('Table')}">
			<CustomDataGrid:CustomDataGrid id="tableEditor" width="100%" height="100%" editable="true" itemEditEnd="handleItemEditEnd(event)"/>
		</mx:VBox>
		<mx:VBox  id="rawEditorBox" label="{lang('Text')}">
			<ui:CodeEditor id="rawEditor" width="100%" height="100%"/>
		</mx:VBox>
	</ui:CustomTabNavigator>
	<ui:Indent label="{lang('Delimiter')}">
		<ui:CustomComboBox id="delimiterComboBox"
						   openDuration="0"
						   closeDuration="0"
						   enabled="{!url.text &amp;&amp; !tableEdited}"
						   dataProvider="{delimiters}"
						   change="delimiterChanged()"/>
		<mx:Button label="{lang('Append file')}" click="append = true; browseForFiles()"/>
	</ui:Indent>

	<ui:Indent label="{lang('Key Column')}">
		<mx:TextInput id="keyColumnName" toolTip="{lang('Enter the name of the column that uniquely identifies each row in the data set')}"/>
	</ui:Indent>
	<ui:Indent label="{lang('Key Type *')}">
		<ui:KeyTypesMenu id="keyTypeSelector"/>
	</ui:Indent>
	<mx:Spacer/>
	<mx:Label text="{lang('* = required')}"/>
	<mx:Script>
		<![CDATA[
			import mx.controls.Alert;
			import mx.events.DataGridEvent;
			
			import weave.api.core.ILinkableObject;
			import weave.api.data.IDataSource;
			import weave.api.getSessionState;
			import weave.api.reportError;
			import weave.compiler.StandardLib;
			import weave.core.UIUtils;
			import weave.data.CSVParser;
			import weave.data.DataSources.CSVDataSource;
			import weave.ui.BusyIndicator;
			import weave.ui.IndentGroup;
			import weave.utils.VectorUtils;
			
			[Bindable] private var indentGroup:IndentGroup = new IndentGroup();
			
			private var busyIndicator:BusyIndicator = new BusyIndicator();

			private var target:CSVDataSource = null;
			
			[Bindable] private var tableEdited:Boolean = false;
			private var append:Boolean = false;

			private const delimiters:Array = [
				{label: "Comma", data: ','}, 
				{label: "Semicolon", data: ';'},
				{label: "Space", data: ' '},
				{label: "Tab", data: '\t'}
			];
			
			private var _fileLoader:FileReference = null;

			private function get parser():CSVParser
			{
				var item:Object = delimiterComboBox.selectedItem;
				var delim:String = item ? item.data : ',';
				return new CSVParser(false, delim);
			}
			
			override protected function createChildren():void
			{
				super.createChildren();
				addChild(busyIndicator);
				busyIndicator.visible = false;
				sourceName.text = WeaveAPI.globalHashMap.generateUniqueName("CSVDataSource");
				keyTypeSelector.addKeyTypeToMenu(sourceName.text);
				tableEditor.setRows(null);
				editorTabNavigator.selectedChild = rawEditorBox;
			}
			
			
			public function setTarget(object:ILinkableObject):void
			{
				target = object as CSVDataSource;
				
				if (!parent)
				{
					callLater(setTarget, arguments);
					return;
				}
				
				if (target)
				{
					sourceName.text = WeaveAPI.globalHashMap.getName(target);
					url.text = target.url.value;
					keyColumnName.text = target.keyColName.value;
					keyTypeSelector.addKeyTypeToMenu(target.keyType.value);
					keyTypeSelector.selectedKeyType = target.keyType.value;
					sourceName.editable = false;
					sourceName.toolTip = lang("Source name is not editable once added to the session. If needed, delete the source and add it again with the new name.")
					handleURLTextChange();
					if (!url.text)
					{
						var rows:Array = target.csvData.getSessionState() as Array;
						editorTabNavigator.selectedChild = tableEditorBox;
						tableEditor.setRows(rows);
						tableEdited = true;
						busyIndicator.visible = false;
					}
				}
			}

			private function editorTabChanged(evt:Event):void
			{
				if (editorTabNavigator.selectedChild === tableEditorBox)
					textToTable();
				else if (editorTabNavigator.selectedChild === rawEditorBox)
					tableToText();
			}
			
			private function tableToText():void
			{
				rawEditor.text = parser.createCSV(tableEditor.getRows());
				tableEdited = false;
			}
			
			private function textToTable():void
			{
				tableEditor.setRows(parser.parseCSV(rawEditor.text));
			}

			private function delimiterChanged():void
			{
				if (rawEditor.text)
				{
					textToTable();
					editorTabNavigator.selectedChild = tableEditorBox;
				}
			}

			private function handleItemEditEnd(event:DataGridEvent):void
			{
				var oldValue:String = event.itemRenderer.data[event.dataField];
				var newValue:String = TextInput((event.currentTarget as CustomDataGrid).itemEditorInstance).text;
				tableEdited ||= oldValue != newValue;
				if (tableEdited)
					callLater(delimiterComboBox.close);
			}
			
			public function hasPendingChanges():Boolean
			{
				return StandardLib.asString(target.url.value) != StandardLib.asString(url.text)
					|| StandardLib.asString(target.keyColName.value) != StandardLib.asString(keyColumnName.text)
					|| StandardLib.asString(target.keyType.value) != StandardLib.asString(keyTypeSelector.selectedKeyType)
					|| WeaveAPI.SessionManager.computeDiff(getSessionState(target.csvData), getRows()) !== undefined;
			}

			public function applyChanges():void
			{
				target.url.value = url.text;
				target.keyColName.value = keyColumnName.text;
				target.keyType.value = keyTypeSelector.selectedKeyType;
				target.csvData.setSessionState(getRows());
			}
			
			public function createDataSource():IDataSource
			{
				if (!sourceName.text || (!url.text && !(rawEditor.text || tableEdited)) || !keyTypeSelector.selectedKeyType)
				{
					Alert.show(lang("Please fill all required fields"), lang("Error"));
					return null;
				}
				if (WeaveAPI.globalHashMap.getObject(sourceName.text))
				{
					Alert.show(lang("Source Name already being used. Please give a different name"), lang("Error"));
					return null;
				}
				target = WeaveAPI.globalHashMap.requestObject(sourceName.text, CSVDataSource, false);
				if (!target)
				{
					Alert.show(lang("Unexpected problem. Unable to add the data source."));
					return null;
				}
				applyChanges();
				return target;
			}
			
			/**
			* browseForfiles: opens up a file browser window to upload CSV files 
			**/
			private function browseForFiles():void
			{
				try
				{
					if(_fileLoader == null)
					{
						_fileLoader = new FileReference();
						_fileLoader.addEventListener(Event.SELECT, csvFileSelectedHandler);
						_fileLoader.addEventListener(ProgressEvent.PROGRESS, handleProgress);
						_fileLoader.addEventListener(Event.COMPLETE, csvFileLoadCompleteHandler);
						_fileLoader.addEventListener(IOErrorEvent.IO_ERROR, fileErrorHandler);
					}
					
					_fileLoader.browse([new FileFilter("CSV", "*.csv"), new FileFilter("TSV", "*.tsv"), new FileFilter("All files", "*")]);
				}
				catch (e:Error)
				{
					reportError(e);
				}
			}
			
			private function csvFileSelectedHandler(event:Event):void
			{
				// Show busy indicator until parser finishes (handleCSVParser)
				busyIndicator.visible = true;
				_fileLoader.load();
				WeaveAPI.ProgressIndicator.addTask(_fileLoader);
			}
			
			private function handleProgress(event:ProgressEvent):void
			{
				WeaveAPI.ProgressIndicator.updateTask(_fileLoader, event.bytesLoaded / event.bytesTotal);
			}
			
			private function csvFileLoadCompleteHandler(event:Event):void
			{
				if (append)
				{
					appendRows(parser.parseCSV(String(_fileLoader.data)));
				}
				else
				{
					url.text = WeaveAPI.URLRequestUtils.saveLocalFile(_fileLoader.name, _fileLoader.data);
					handleURLTextChange();
				}
				
				busyIndicator.visible = false;

				WeaveAPI.ProgressIndicator.removeTask(_fileLoader);
			}
			
			private function fileErrorHandler(event:IOErrorEvent):void
			{
				busyIndicator.visible = false;
				var fileRef:FileReference = event.target as FileReference;
				reportError(
					"File upload failed",
					"File: " + fileRef.name + "\n" + "Size: " + fileRef.size + "\n" + event.text
				);
			}

			private function appendRows(rowsToAppend:Array):void
			{
				var currentRows:Array = getRows();
				var headerRow:Array = currentRows[0];
				var allRows:Array = WeaveAPI.CSVParser.convertRecordsToRows(
					VectorUtils.flatten(
						WeaveAPI.CSVParser.convertRowsToRecords(rowsToAppend),
						WeaveAPI.CSVParser.convertRowsToRecords(currentRows)
					),
					VectorUtils.union(headerRow, rowsToAppend[0])
				);
				
				tableEdited = true;
				tableEditor.setRows(allRows);
			}
			
			private function getRows():Array
			{
				if (url.text)
					return null;
				editorTabNavigator.selectedChild = tableEditorBox;
				editorTabNavigator.validateProperties();
				return tableEditor.getRows();
			}
			
			private function arrayIsEmpty(array:Array):Boolean
			{
				return !array || !array.length;
			}
			
			private function handleURLTextChange():void
			{
				var hasURL:Boolean = url.text ? true : false;
				tableEditor.setRows(null);
				rawEditor.text = '';
				editorTabNavigator.selectedChild = rawEditorBox;
			}
		]]>
	</mx:Script>
</mx:VBox>