<?xml version="1.0" encoding="utf-8"?>
<!--
/*
    Weave (Web-based Analysis and Visualization Environment)
    Copyright (C) 2008-2011 University of Massachusetts Lowell

    This file is a part of Weave.

    Weave is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License, Version 3,
    as published by the Free Software Foundation.

    Weave is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with Weave.  If not, see <http://www.gnu.org/licenses/>.
*/
-->
<mx:HBox xmlns="weave.editors.*" 
		xmlns:mx="http://www.adobe.com/2006/mxml" xmlns:ui="weave.ui.*"
		implements="weave.api.ui.ILinkableObjectEditor,weave.api.core.ILinkableObject"
		horizontalScrollPolicy="off"
		verticalScrollPolicy="off"
		width="100%"
		height="100%"
		verticalAlign="middle">
	<ui:CustomCheckBox id="filterEnable"
			paddingLeft="4"
			label="{getEnableLabel(columnTitle)}"
			change="toggleFilter();"/>
<!--	<mx:Button enabled="{filterEnable.selected}"
			   width="24" icon="@Embed(source='/weave/resources/images/eject-inset.png')"
			   toolTip="{lang('Select a column to be used for filtering the data.')}"
			   click="AttributeSelectorPanel.open(stringFilter.column, lang('Filter'));"/>
-->	
	<ui:MenuToolViewStack id="menuStack"
		enabled="{filterEnable.selected}"
		toolTip="{lang('Select a value used to filter the data.')}"
		prompt="{lang('Select filter value...')}"/>
	
	<mx:Script>
		<![CDATA[
			import weave.api.core.ILinkableObject;
			import weave.api.data.IQualifiedKey;
			import weave.api.linkBindableProperty;
			import weave.api.newLinkableChild;
			import weave.api.registerLinkableChild;
			import weave.api.unlinkBindableProperty;
			import weave.compiler.StandardLib;
			import weave.core.LinkableBoolean;
			import weave.core.LinkableString;
			import weave.core.LinkableWatcher;
			import weave.core.UIUtils;
			import weave.data.AttributeColumns.DynamicColumn;
			import weave.data.KeySets.StringDataFilter;
			import weave.utils.ColumnUtils;
			import weave.utils.VectorUtils;

			[Bindable] private var columnTitle:String;
			private function getEnableLabel(columnTitle:String):String
			{
				return lang('Filter by {0}', columnTitle || '...');
			}
			
			private const filterWatcher:LinkableWatcher = newLinkableChild(this, LinkableWatcher, handleFilter, true);
			private const columnWatcher:LinkableWatcher = newLinkableChild(this, LinkableWatcher, handleColumn, true);
			private var _linkedFilter:StringDataFilter;
			
			public const layoutMode:LinkableString = registerLinkableChild(this, new LinkableString("List"), handleLayoutMode, true);
			public const showToggle:LinkableBoolean = registerLinkableChild(this, new LinkableBoolean(true));
			
			override protected function childrenCreated():void
			{
				super.childrenCreated();
				
				UIUtils.linkVisibility(this, showToggle, filterEnable);
			}
			
			public function get stringFilter():StringDataFilter
			{
				return filterWatcher.target as StringDataFilter;
			}
			
			public function setTarget(object:ILinkableObject):void
			{
				filterWatcher.target = object as StringDataFilter;
				
				if (stringFilter)
				{
					columnWatcher.target = stringFilter.column;
					this.enabled = true;
				}
				else
				{
					this.enabled = false;
				}
				
				linkNewFilter();
			}
			private function linkNewFilter():void
			{
				if (!parent)
				{
					callLater(linkNewFilter);
					return;
				}
				if (_linkedFilter != stringFilter)
				{
					if (_linkedFilter)
						unlinkBindableProperty(_linkedFilter.stringValue, menuStack, 'chosenItem');
					_linkedFilter = stringFilter;
					if (_linkedFilter)
						linkBindableProperty(_linkedFilter.stringValue, menuStack, 'chosenItem');
				}
				handleFilter();
			}
			public function hasPendingChanges():Boolean { return false; }
			public function applyChanges():void { }

			private function toggleFilter():void
			{
				if (stringFilter)
					stringFilter.enabled.value = filterEnable.selected;
			}
			
			private function handleFilter():void
			{
				if (!parent)
				{
					callLater(handleFilter);
					return;
				}
				
				if (stringFilter)
				{
					enabled = true;
					filterEnable.selected = stringFilter.enabled.value;
					menuStack.chosenItem = stringFilter.stringValue.value;
				}
				else
				{
					enabled = false;
					filterEnable.selected = false;
					menuStack.chosenItem = null;
				}
			}
			
			private function handleColumn():void
			{
				if (!parent)
				{
					callLater(handleColumn);
					return;
				}
				if (!stringFilter)
					return;
				
				var column:DynamicColumn = stringFilter.column;
				if (column)
				{
					columnTitle = ColumnUtils.getTitle(column);
					
					//TODO - make this asynchronous
					var valueMap:Object = {};
					for each (var key:IQualifiedKey in column.keys)
						valueMap[column.getValueFromKey(key, String)] = column.getValueFromKey(key, Number);
					
					var valueList:Array = VectorUtils.getKeys(valueMap);
					StandardLib.sortOn(valueList, valueMap);
					
					menuStack.choices = valueList;
				}
				else
				{
					columnTitle = null;
					menuStack.choices = null;
				}
				handleFilter();
			}
			
			private function handleLayoutMode():void
			{
				if (!parent)
				{
					callLater(handleLayoutMode);
					return;
				}
				menuStack.layoutMode = layoutMode.value;
			}
		]]>
	</mx:Script>
</mx:HBox>
