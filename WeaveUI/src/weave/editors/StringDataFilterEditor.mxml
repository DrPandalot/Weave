<?xml version="1.0" encoding="utf-8"?>
<!--
/* ***** BEGIN LICENSE BLOCK *****
 *
 * This file is part of Weave.
 *
 * The Initial Developer of Weave is the Institute for Visualization
 * and Perception Research at the University of Massachusetts Lowell.
 * Portions created by the Initial Developer are Copyright (C) 2008-2015
 * the Initial Developer. All Rights Reserved.
 *
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this file,
 * You can obtain one at http://mozilla.org/MPL/2.0/.
 * 
 * ***** END LICENSE BLOCK ***** */
-->
<mx:HBox xmlns="weave.editors.*" 
		xmlns:mx="http://www.adobe.com/2006/mxml" xmlns:ui="weave.ui.*"
		implements="weave.api.ui.ILinkableObjectEditor,weave.api.core.ILinkableObject"
		horizontalScrollPolicy="off"
		verticalScrollPolicy="off"
		width="100%"
		height="100%"
		verticalAlign="middle">
	<ui:CustomCheckBox id="filterEnable"
			paddingLeft="4"
			label="{getEnableLabel(columnTitle)}"
			change="toggleFilter();"/>
	<ui:MenuToolViewStack id="menuStack"
		enabled="{filterEnable.selected}"
		allowMultipleSelection="true"
		prompt="{lang('Select filter value...')}"/>
	
	<mx:Script>
		<![CDATA[
			import weave.api.core.ILinkableObject;
			import weave.api.data.IQualifiedKey;
			import weave.api.linkBindableProperty;
			import weave.api.newLinkableChild;
			import weave.api.registerLinkableChild;
			import weave.api.unlinkBindableProperty;
			import weave.compiler.StandardLib;
			import weave.core.LinkableBoolean;
			import weave.core.LinkableString;
			import weave.core.LinkableWatcher;
			import weave.core.UIUtils;
			import weave.data.AttributeColumns.DynamicColumn;
			import weave.data.KeySets.StringDataFilter;
			import weave.utils.ColumnUtils;
			import weave.utils.VectorUtils;

			[Bindable] private var columnTitle:String;
			private function getEnableLabel(columnTitle:String):String
			{
				return lang('Filter by {0}', columnTitle || '...');
			}
			
			private const filterWatcher:LinkableWatcher = newLinkableChild(this, LinkableWatcher, handleFilter, true);
			private const columnWatcher:LinkableWatcher = newLinkableChild(this, LinkableWatcher, handleColumn, true);
			private var _linkedFilter:StringDataFilter;
			
			public const layoutMode:LinkableString = registerLinkableChild(this, new LinkableString("List"), handleLayoutMode, true);
			public const showToggle:LinkableBoolean = registerLinkableChild(this, new LinkableBoolean(true));
			
			override protected function childrenCreated():void
			{
				super.childrenCreated();
				
				UIUtils.linkVisibility(this, showToggle, filterEnable);
			}
			
			public function get stringFilter():StringDataFilter
			{
				return filterWatcher.target as StringDataFilter;
			}
			
			public function setTarget(object:ILinkableObject):void
			{
				filterWatcher.target = object as StringDataFilter;
				
				if (stringFilter)
				{
					columnWatcher.target = stringFilter.column;
					this.enabled = true;
				}
				else
				{
					this.enabled = false;
				}
				
				linkNewFilter();
			}
			private function linkNewFilter():void
			{
				if (!parent)
				{
					callLater(linkNewFilter);
					return;
				}
				if (_linkedFilter != stringFilter)
				{
					if (_linkedFilter)
						unlinkBindableProperty(_linkedFilter.stringValues, menuStack, 'chosenItems');
					_linkedFilter = stringFilter;
					if (_linkedFilter)
						linkBindableProperty(_linkedFilter.stringValues, menuStack, 'chosenItems', 0, true);
				}
				handleFilter();
			}
			public function hasPendingChanges():Boolean { return false; }
			public function applyChanges():void { }

			private function toggleFilter():void
			{
				if (stringFilter)
					stringFilter.enabled.value = filterEnable.selected;
			}
			
			private function handleFilter():void
			{
				if (!parent)
				{
					callLater(handleFilter);
					return;
				}
				
				if (stringFilter)
				{
					enabled = true;
					filterEnable.selected = stringFilter.enabled.value;
					menuStack.chosenItems = stringFilter.stringValues.getSessionState() as Array;
				}
				else
				{
					enabled = false;
					filterEnable.selected = false;
					menuStack.chosenItem = null;
				}
			}
			
			private function handleColumn():void
			{
				if (!parent)
				{
					callLater(handleColumn);
					return;
				}
				if (!stringFilter)
					return;
				
				var column:DynamicColumn = stringFilter.column;
				if (column)
				{
					columnTitle = ColumnUtils.getTitle(column);
					
					//TODO - make this asynchronous
					var valueMap:Object = {};
					for each (var key:IQualifiedKey in column.keys)
						valueMap[column.getValueFromKey(key, String)] = column.getValueFromKey(key, Number);
					
					var valueList:Array = VectorUtils.getKeys(valueMap);
					StandardLib.sortOn(valueList, valueMap);
					
					menuStack.choices = valueList;
				}
				else
				{
					columnTitle = null;
					menuStack.choices = null;
				}
				handleFilter();
			}
			
			private function handleLayoutMode():void
			{
				if (!parent)
				{
					callLater(handleLayoutMode);
					return;
				}
				menuStack.layoutMode = layoutMode.value;
			}
		]]>
	</mx:Script>
</mx:HBox>
