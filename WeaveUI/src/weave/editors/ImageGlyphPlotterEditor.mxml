<?xml version="1.0" encoding="utf-8"?>
<mx:VBox xmlns:mx="http://www.adobe.com/2006/mxml" 
		 xmlns="weave.editors.*"
		 implements="weave.api.ui.ILinkableObjectEditor"
		 label="{lang('Image Settings')}" xmlns:ui="weave.ui.*">	
	
	<ui:DynamicColumnComponent id="xCol" label="{lang('X Column')}" />
	<ui:DynamicColumnComponent id="yCol" label="{lang('Y Column')}" />
	
	<ui:DynamicColumnComponent id="imageURL" label="{lang('Image URL Column')}" />
	<ui:Indent>
		<ui:IndentTextInput id="defaultURL" label="{lang('Default URL')}" creationComplete="linkBindableProperty(plotter.imageURL.defaultValue, event.target, 'text', 500)"/>
		<mx:Button label="{lang('Open file')}" click="fileAttacher.browseAndAttachFile()"/>
	</ui:Indent>
	
	<ui:DynamicColumnComponent id="imageSize" label="{lang('Image Size Column')}" />
	<ui:Indent>
		<ui:CustomCheckBox id="enableDefaultSize" label="{lang('Default Image Size')}">
			<ui:change>
				<![CDATA[
					if (enableDefaultSize.selected)
						plotter.imageSize.defaultValue.value = defaultSize.value;
					linkPlotterImageSize();
					if (!enableDefaultSize.selected)
						plotter.imageSize.defaultValue.value = undefined;
				]]>
			</ui:change>
		</ui:CustomCheckBox>
		<mx:NumericStepper id="defaultSize" width="64" value="10" minimum="1" maximum="1000" enabled="{enableDefaultSize.selected}"/>
	</ui:Indent>
	
	<ui:DynamicColumnComponent id="rotationCol" label="{lang('Image Rotation Column')}" />
	<ui:Indent>
		<mx:HBox verticalAlign="middle" horizontalGap="{hgap}">
			<mx:HBox>
				<mx:Label text="{lang('Offset')}"/>
				<mx:NumericStepper id="rotationStepper" width="64" maximum="360" minimum="-360" stepSize="90"
								   creationComplete="linkBindableProperty(plotter.rotationOffset, event.target, 'value', 500)" />
			</mx:HBox>
			<ui:CustomCheckBox id="rotationCheckbox" label="{lang('Data in Degrees')}"
							   creationComplete="linkBindableProperty(plotter.dataInDegrees, event.target, 'selected')">
				<ui:change>
					<![CDATA[
						rotationStepper.value = 0;
						if (rotationCheckbox.selected)
							rotationStepper.stepSize = 90, rotationStepper.minimum = -360, rotationStepper.maximum = 360;
						else
							rotationStepper.stepSize = Math.PI / 2, rotationStepper.minimum = -2*Math.PI, rotationStepper.maximum = 2*Math.PI;
					]]>
				</ui:change>
			</ui:CustomCheckBox>
			<ui:CustomCheckBox label="{lang('Reverse')}"
							   creationComplete="linkBindableProperty(plotter.reverseRotation, event.target, 'selected')"/>
		</mx:HBox>
	</ui:Indent>
	<mx:Script>
		<![CDATA[
			import weave.api.core.ILinkableObject;
			import weave.api.linkBindableProperty;
			import weave.api.unlinkBindableProperty;
			import weave.compiler.StandardLib;
			import weave.services.FileAttacher;
			import weave.visualization.plotters.ImageGlyphPlotter;
			
			private const hgap:int = 30;
			
			public function setTarget(object:ILinkableObject):void
			{
				plotter = object as ImageGlyphPlotter;
			}
			public function hasPendingChanges():Boolean { return false; }
			public function applyChanges():void { }
			
			override protected function childrenCreated():void
			{
				super.childrenCreated();
				
				xCol.dynamicObject = plotter.dataX;
				yCol.dynamicObject = plotter.dataY;
				imageURL.dynamicObject = plotter.imageURL.internalDynamicColumn;
				imageSize.dynamicObject = plotter.imageSize.internalDynamicColumn;
				rotationCol.dynamicObject = plotter.rotation;
				plotter.imageSize.defaultValue.addGroupedCallback(this, handlePlotterImageSize, true);
			}
			
			private var plotter:ImageGlyphPlotter = null;
			
			private function handlePlotterImageSize():void
			{
				enableDefaultSize.selected = StandardLib.isDefined(plotter.imageSize.defaultValue.value);
				linkPlotterImageSize();
			}
			private function linkPlotterImageSize():void
			{
				if (enableDefaultSize.selected)
					linkBindableProperty(plotter.imageSize.defaultValue, defaultSize, 'value', 250);
				else
					unlinkBindableProperty(plotter.imageSize.defaultValue, defaultSize, 'value');
			}
			
			private var fileAttacher:FileAttacher = new FileAttacher(this, [new FileFilter('Image', '*.png;*.jpg;*.bmp'), new FileFilter('All files', "*")], handleURL);
			private function handleURL(url:String):void
			{
				defaultURL.text = url;
			}
		]]>
	</mx:Script>
</mx:VBox>
