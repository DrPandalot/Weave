<?xml version="1.0" encoding="utf-8"?>
<!--
/*
    Weave (Web-based Analysis and Visualization Environment)
    Copyright (C) 2008-2011 University of Massachusetts Lowell

    This file is a part of Weave.

    Weave is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License, Version 3,
    as published by the Free Software Foundation.

    Weave is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with Weave.  If not, see <http://www.gnu.org/licenses/>.
*/
-->
<mx:VBox xmlns="weave.editors.*" 
		 xmlns:mx="http://www.adobe.com/2006/mxml" 
		 xmlns:ui="weave.ui.*"
		 width="100%" 
		 height="100%">

	<ui:CheckBoxWithNestedOptions label="{lang('Enable selection in visualizations')}"
					   creationComplete="linkBindableProperty(Weave.properties.enableToolSelection, event.target, 'selected');">
		<ui:Indent grouped="false" label="{lang('Selection mode')}">
			<mx:ComboBox dataProvider="{(function():*{return InteractionController.enumSelectionMode();}())}"
						 creationComplete="linkBindableProperty(Weave.properties.selectionMode, event.target, 'text')"/>
		</ui:Indent>
		<ui:Indent grouped="false" label="{lang('Dashed line parameters')}">
			<ui:HelpComponent>
				Enter a series of numbers separated by commas to be used as alternating line length and gap values.
			</ui:HelpComponent>
			<mx:TextInput creationComplete="linkBindableProperty(Weave.properties.dashedLengths, event.target, 'text');"/>
			<ui:CustomColorPicker creationComplete="linkBindableProperty(Weave.properties.dashedSelectionColor, event.target, 'selectedColor');"/>
			<mx:Canvas id="dashedCanvas"
					   height="100%"
					   width="100%"
					   resize="drawDashedLinePreview()"
					   />
		</ui:Indent>
	</ui:CheckBoxWithNestedOptions>
	
	<mx:HBox>
		<mx:CheckBox id="showSelectedRecordsText"
					 label='{lang("Show \"Selected Records\" tooltip")}'
			 		 creationComplete="linkBindableProperty(Weave.properties.showSelectedRecordsText, event.target, 'selected')"/>
		<ui:CustomComboBox id="recordsTooltip"
						   enabled="{showSelectedRecordsText.selected}"
						   initialize="recordsTooltip.dataProvider = Weave.properties.recordsTooltipEnum;"
						   creationComplete="linkBindableProperty(Weave.properties.recordsTooltipLocation, recordsTooltip, 'selectedItem');"/>
	</mx:HBox>

	<ui:CheckBoxWithNestedOptions id="enableBitmapFilters"
					 label="{lang('Enable extra bitmap filters used with mouseover and selection')}"
					 creationComplete="linkBindableProperty(Weave.properties.enableBitmapFilters, event.target, 'selected')">
		<ui:HelpComponent>
			Disabling this option will improve performance.
		</ui:HelpComponent>
		<ui:Indent label="{lang('Shadow Color')}">
			<ui:CustomColorPicker id="shadowColor"
							creationComplete="linkBindableProperty(Weave.properties.selectionDropShadow.color, event.target, 'selectedColor' );"
							/>
		</ui:Indent> 
		<ui:Indent label="{lang('Shadow Alpha')}">
			<mx:NumericStepper id="shadowAlpha"
							   maximum="1"
							   stepSize="0.1"
							   creationComplete="linkBindableProperty(Weave.properties.selectionDropShadow.alpha, event.target, 'value' );"
							   />
		</ui:Indent> 
	</ui:CheckBoxWithNestedOptions>
	
	<ui:Indent grouped="false" label="{lang('Selection background alpha')}">
		<mx:NumericStepper id="selectionAlpha"
						   maximum="1"
						   stepSize="0.1"
						   creationComplete="linkBindableProperty(Weave.properties.selectionAlphaAmount, event.target, 'value' );"
						   />
	</ui:Indent>
	
	<mx:Script>
		<![CDATA[
			import weave.Weave;
			import weave.api.linkBindableProperty;
			import weave.utils.DrawUtils;
			import weave.visualization.layers.InteractionController;
			
			override protected function childrenCreated():void
			{
				super.childrenCreated();
				
				Weave.properties.dashedSelectionColor.addGroupedCallback(this, drawDashedLinePreview, true);
				Weave.properties.dashedLengths.addGroupedCallback(this, drawDashedLinePreview, true);
			}
			
			private function drawDashedLinePreview():void
			{
				dashedCanvas.graphics.clear();
				dashedCanvas.graphics.lineStyle(2, Weave.properties.dashedSelectionColor.value, 1, false, 'normal', CapsStyle.NONE);
				DrawUtils.drawDashedLine(
					dashedCanvas.graphics,
					[new Point(5, 10), new Point(dashedCanvas.width - 5, 10)],
					Weave.properties.dashedLengths.getSessionState() as Array
				);
			}
		]]>
	</mx:Script>
</mx:VBox>