<?xml version="1.0" encoding="utf-8"?>
<!--
/* ***** BEGIN LICENSE BLOCK *****
*
* This file is part of Weave.
*
* The Initial Developer of Weave is the Institute for Visualization
* and Perception Research at the University of Massachusetts Lowell.
* Portions created by the Initial Developer are Copyright (C) 2008-2015
* the Initial Developer. All Rights Reserved.
*
* This Source Code Form is subject to the terms of the Mozilla Public
* License, v. 2.0. If a copy of the MPL was not distributed with this file,
* You can obtain one at http://mozilla.org/MPL/2.0/.
* 
* ***** END LICENSE BLOCK ***** */
-->
<mx:VBox 
	xmlns:mx="http://www.adobe.com/2006/mxml"
	xmlns="weave.editors.*"
	verticalScrollPolicy="off"
	horizontalScrollPolicy="off"
	creationPolicy="all"
	implements="weave.api.ui.IDataSourceEditor" xmlns:ui="weave.ui.*"
	>
	<mx:Label id="editorTitle" fontWeight="bold" text="{label}"/>
	<ui:Indent label="{lang('Source Name *')}">
		<mx:TextInput id="sourceName" width="100%"/>
	</ui:Indent>
	<ui:Indent label="{lang('API Key')}">
		<mx:TextInput id="apiKeyInput" width="100%"/>
	</ui:Indent>
	<ui:Indent label="{lang('Year')}">
		
	</ui:Indent>
	<ui:Indent label="{lang('Dataset')}">
		<ui:CustomComboBox id="dataFamilyCombo" change="dataFamilyChanged()"/>
		<ui:CustomComboBox id="vintageCombo" change="vintageChanged()"/>
		<ui:CustomComboBox width = "100%" id="dataSetCombo" change="dataSetChanged()" toolTip="{lang('Select a dataset from those available on the US Census API.')}"/>
	</ui:Indent>
	<ui:Indent label="{lang('Geographic Scope')}">
		<ui:CustomComboBox width = "100%" id="geographicScopeCombo" change="geographicScopeChanged()" toolTip="{lang('Select the geographic scope to which each record will correspond.')}"/>
	</ui:Indent>
	<ui:Indent label="{lang('Keytype')}">
		<ui:KeyTypesMenu id="keyTypeCombo" toolTip="{lang('Select a keytype for columns produced by this data source.')}"/>
	</ui:Indent>
	<ui:Indent label="{lang('Geographic Filters')}">
		<mx:HBox id="filtersBox">
			
		</mx:HBox>
	</ui:Indent>
	<mx:Script>
		<![CDATA[
			import mx.controls.Alert;
			
			import weave.api.core.ILinkableObject;
			import weave.api.data.IDataSource;
			import weave.compiler.StandardLib;
			import weave.data.DataSources.CensusApi;
			import weave.data.DataSources.CensusDataSource;
			
			override protected function createChildren():void
			{
				super.createChildren();
				sourceName.text = WeaveAPI.globalHashMap.generateUniqueName(WeaveAPI.ClassRegistry.getDisplayName(CensusDataSource));
				
				populateDatasets();
			}
			
			[Bindable] private var target:CensusDataSource = null;
			private var _api:CensusApi = new CensusApi();
			
			private function get api():CensusApi
			{
				if (!_api)
					_api = new CensusApi();
				return _api;
			}
		
			public function setTarget(object:ILinkableObject):void
			{
				target = object as CensusDataSource;
				
				if (!parent)
				{
					callLater(setTarget, arguments);
					return;
				}
				
				if (target)
				{
					sourceName.text = WeaveAPI.globalHashMap.getName(target);
					sourceName.editable = false;
					sourceName.toolTip = lang("Source name is not editable once added to the session. If needed, delete the source and add it again with the new name.");
					
					dataSetCombo.selectByField("id", target.dataSet.value);
					/* selectByField doesn't trigger change? */
					dataSetChanged();
					
					apiKeyInput.text = target.apiKey.value; 
					keyTypeCombo.selectedKeyType = target.keyType.value;
					
					
					_api = target.getAPI();
				}
			}
			public function populateDatasets():void
			{
				api.getDatasets().then(
					function (datasets:Object):void
					{
						var provider:Array = [];
						
						for each (var dataset:Object in datasets)
						{
							provider.push({id: dataset.identifier, label: dataset.title, description: dataset.description});
						}
						
						StandardLib.sortOn(provider, function (obj:Object):String {return obj.id});
						
						dataSetCombo.dataProvider = provider;
						
						if (target)
						{
							dataSetCombo.selectByField("id", target.dataSet.value);
						}
						dataSetChanged();
					}
				);
			}
			public function vintageChanged():void
			{
				
			}
			public function dataFamilyChanged():void
			{
				
			}
			public function dataSetChanged():void
			{
				if (!dataSetCombo.selectedItem) 
				{
					geographicScopeCombo.dataProvider = [];
					return;
				}
				
				api.getGeographies(dataSetCombo.selectedItem.id).then(
					function (geographies:Object):void
					{
						var provider:Array = [];
						
						for (var levelId:String in geographies)
						{
							var geoInfo:Object = geographies[levelId];
							provider.push({id: levelId, label: geoInfo.name});
						}
						
						StandardLib.sortOn(provider, function (obj:Object):String {return obj.id});
						
						geographicScopeCombo.dataProvider = provider;
						
						if (target)
						{
							geographicScopeCombo.selectByField("id", target.geographicScope.value);
							geographicScopeChanged();
						}
					}
				);
			}
			public function geographicScopeChanged():void
			{
				api.getGeographies(dataSetCombo.selectedItem.id).then(
					function (geographies:Object):void
					{
						/* TODO: Generate comboboxes and populate. */
						var provider:Array = [];
					}
				);
			}
			public function hasPendingChanges():Boolean
			{
				return (dataSetCombo.selectedItem.id != target.dataSet.value) ||
					(apiKeyInput.text != target.apiKey.value) ||
					(keyTypeCombo.selectedKeyType != target.keyType.value) ||
					(geographicScopeCombo.selectedItem.id != target.geographicScope.value);
			}
			
			public function applyChanges():void
			{
				target.dataSet.value = dataSetCombo.selectedItem.id;
				target.apiKey.value = apiKeyInput.text;
				target.keyType.value = keyTypeCombo.selectedKeyType;
				target.geographicScope.value = geographicScopeCombo.selectedItem.id;
			}
			
			public function createDataSource():IDataSource
			{
				if (!sourceName.text || !geographicScopeCombo.selectedItem || !dataSetCombo.selectedItem)
				{
					Alert.show(lang("Please fill all required fields"), lang("Error"));
					return null;
				}
				if (WeaveAPI.globalHashMap.getObject(sourceName.text))
				{
					Alert.show(lang("Source Name already being used. Please give a different name"), lang("Error"));
					return null;
				}
				
				target = WeaveAPI.globalHashMap.requestObject(sourceName.text, CensusDataSource, false);
				if (!target)
				{
					Alert.show(lang("Unexpected problem. Unable to add the data source."));
					return null;
				}
				applyChanges();
				return target;
			}
		]]>
	</mx:Script>
</mx:VBox>