<?xml version="1.0" encoding="utf-8"?>
<!--
/*
    Weave (Web-based Analysis and Visualization Environment)
    Copyright (C) 2008-2011 University of Massachusetts Lowell

    This file is a part of Weave.

    Weave is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License, Version 3,
    as published by the Free Software Foundation.

    Weave is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with Weave.  If not, see <http://www.gnu.org/licenses/>.
*/
-->
<mx:VBox 
    xmlns:mx="http://www.adobe.com/2006/mxml"
    xmlns="weave.editors.*"
    verticalScrollPolicy="off"
    horizontalScrollPolicy="off"
    creationPolicy="all"
    implements="weave.api.core.ILinkableObject, weave.api.ui.IDataSourceEditor, weave.api.ui.IObjectWithSelectableAttributes" xmlns:ui="weave.ui.*" xmlns:CustomDataGrid="weave.ui.CustomDataGrid.*"
    >
    <mx:Label id="editorTitle" fontWeight="bold" text="{label}"/>
    <ui:Indent label="{lang('Source Name')}" visible="{!target}" includeInLayout="{!target}">
        <ui:TextInputWithPrompt id="sourceName"
                                width="100%"
                                prompt="{lang('Enter a name')}"
                                errorString="{sourceName.text ? null : lang('Required')}"/>
    </ui:Indent>
    <ui:DynamicColumnComponent id="groupByColumnEditor">
        <ui:helpContent>
			The keyType of the "Group by" column should match the keyType of each column to be transformed.
			The values in this column will be treated as foreign keys which map to aggregated values in the transformed columns.
        </ui:helpContent>
    </ui:DynamicColumnComponent>
	<ui:Indent label="{lang('Group keyType')}">
		<ui:helpContent>
			Specifies the keyType of the foreign keys referenced by the "Group by" column.
			By default, the dataType of the "Group by" column is used as the foreign keyType.
		</ui:helpContent>
		<ui:TextInputWithPrompt id="groupKeyType"/>
	</ui:Indent>
    <ui:ColumnListComponent id="dataColumnsEditor">
		<ui:internalList>
			<CustomDataGrid:CustomDataGrid id="dataGrid" sortableColumns="false" draggableColumns="false">
				<CustomDataGrid:columns>
					<mx:DataGridColumn headerText="{lang('Column')}"
									   labelFunction="{getColumnLabel}"/>
					<mx:DataGridColumn id="aggregationCol"
									   width="100"
									   rendererIsEditor="true"
									   headerText="{lang('Aggregation')}"
									   editable="true" paddingLeft="2" paddingRight="2">
						<mx:itemRenderer>
							<mx:Component>
								<mx:VBox width="100%" mouseDown="event.stopPropagation();">
									<ui:CustomComboBox id="combo"
										width="100%" openDuration="0" closeDuration="0" rowCount="10"
										valueCommit="if (UIUtils.hasFocus(combo)) outerDocument.setAggregationMode(data as IAttributeColumn, combo.selectedItem as String);"/>
									<mx:Script>
										<![CDATA[
											import weave.api.data.ColumnMetadata;
											import weave.api.data.DataType;
											import weave.api.data.IAttributeColumn;
											import weave.core.UIUtils;
											import weave.data.AttributeColumns.StringColumn;
											
											override public function set data(value:Object):void
											{
												super.data = value;
												
												var column:IAttributeColumn = data as IAttributeColumn;
												if (DataType.getClass(column.getMetadata(ColumnMetadata.DATA_TYPE)) === String)
													combo.dataProvider = StringColumn.getSupportedAggregationModes();
												else
													combo.dataProvider = ColumnMetadata.getSuggestedPropertyValues(ColumnMetadata.AGGREGATION);
												combo.selectedItem = outerDocument.getAggregationMode(data as IAttributeColumn);
											}
										]]>
									</mx:Script>
								</mx:VBox>
							</mx:Component>
						</mx:itemRenderer>
					</mx:DataGridColumn>
				</CustomDataGrid:columns>
			</CustomDataGrid:CustomDataGrid>
		</ui:internalList>
        <ui:helpContent>
			The data in these columns will be grouped and aggregated.
			The keyType of each column should match the keyType of the "Group by" column.
        </ui:helpContent>
    </ui:ColumnListComponent>
    <mx:Script>
        <![CDATA[
			import weave.api.core.ILinkableVariable;
			import weave.core.LinkableVariable;
			import mx.controls.Alert;
			
			import weave.api.copySessionState;
			import weave.api.core.ILinkableHashMap;
			import weave.api.core.ILinkableObject;
			import weave.api.data.Aggregation;
			import weave.api.data.ColumnMetadata;
			import weave.api.data.IAttributeColumn;
			import weave.api.data.IDataSource;
			import weave.api.getSessionState;
			import weave.api.newLinkableChild;
			import weave.api.registerLinkableChild;
			import weave.core.LinkableHashMap;
			import weave.data.AttributeColumns.DynamicColumn;
			import weave.data.Transforms.GroupedDataTransform;
			import weave.ui.CustomComboBox;
			import weave.utils.ColumnUtils;

			private function getColumnLabel(column:IAttributeColumn, dgc:DataGridColumn):String
			{
				return ColumnUtils.getColumnListLabel(column);
			}
			
			public function getSelectableAttributeNames():Array
			{
				return ["Group by", "Data to transform"];
			}
			public function getSelectableAttributes():Array
			{
				return [groupByColumn, dataColumns];
			}

            private const groupByColumn:DynamicColumn = newLinkableChild(this, DynamicColumn, updateGroupKeyTypePrompt);
            private const dataColumns:ILinkableHashMap = registerLinkableChild(this, new LinkableHashMap(IAttributeColumn));
			private const aggregationModes:ILinkableVariable = registerLinkableChild(this, new LinkableVariable(null, null, {}));
			
			internal function getAggregationMode(column:IAttributeColumn):String
			{
				var state:Object = aggregationModes.getSessionState() || {};
				var name:String = dataColumns.getName(column);
				return state[name] || Aggregation.DEFAULT;
			}
			internal function setAggregationMode(column:IAttributeColumn, value:String):void
			{
				var name:String = dataColumns.getName(column);
				if (!name)
					return;
				var state:Object = aggregationModes.getSessionState() || {};
				state[name] = value;
				aggregationModes.setSessionState(state);
			}
            
			private function updateGroupKeyTypePrompt():void
			{
				groupKeyType.prompt = groupByColumn.getMetadata(ColumnMetadata.DATA_TYPE);
			}
			
            [Bindable] private var target:GroupedDataTransform = null;
            
            override protected function createChildren():void
            {
                super.createChildren();
                
                groupByColumnEditor.dynamicObject = groupByColumn;

                dataColumnsEditor.hashMap = dataColumns;
                
                sourceName.text = WeaveAPI.globalHashMap.generateUniqueName("GroupedDataTransform");
            }
            
            public function setTarget(object:ILinkableObject):void
            {
                target = object as GroupedDataTransform;
                
                if (!parent)
                {
                    callLater(setTarget, arguments);
                    return;
                }
                
                if (target)
                {
                    copySessionState(target.dataColumns, dataColumns);
                    copySessionState(target.groupByColumn, groupByColumn);
					copySessionState(target.aggregationModes, aggregationModes);
                    sourceName.text = WeaveAPI.globalHashMap.getName(target);
                    sourceName.editable = false;
                    sourceName.toolTip = lang("Source name is not editable once added to the session. If needed, delete the source and add it again with the new name.");
                }
            }
            
			private function hasDiff(a:ILinkableObject, b:ILinkableObject):Boolean
			{
				return WeaveAPI.SessionManager.computeDiff(getSessionState(a), getSessionState(b)) !== undefined;
			}
			
            public function hasPendingChanges():Boolean
            {
                return hasDiff(dataColumns, target.dataColumns)
                    || hasDiff(groupByColumn, target.groupByColumn)
                    || hasDiff(aggregationModes, target.aggregationModes);
            }
            
            public function applyChanges():void
            {
				// update session state to include default aggregation modes if not specified
				for each (var col:IAttributeColumn in dataColumns.getObjects())
					setAggregationMode(col, getAggregationMode(col));
				
                copySessionState(dataColumns, target.dataColumns);
                copySessionState(groupByColumn, target.groupByColumn);
                copySessionState(aggregationModes, target.aggregationModes);
            }
            
            public function createDataSource():IDataSource
            {
                if (!sourceName.text)
                {
                    Alert.show(lang("Please fill all required fields"), lang("Error"));
                    return null;
                }
                if (WeaveAPI.globalHashMap.getObject(sourceName.text))
                {
                    Alert.show(lang("Source Name already being used. Please give a different name"), lang("Error"));
                    return null;
                }
                target = WeaveAPI.globalHashMap.requestObject(sourceName.text, GroupedDataTransform, false);
                if (!target)
                {
                    Alert.show(lang("Unexpected problem. Unable to add the data source."));
                    return null;
                }
                applyChanges();
                return target;
            }
        ]]>
    </mx:Script>
</mx:VBox>