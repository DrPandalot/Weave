<?xml version="1.0" encoding="utf-8"?>
<s:VGroup xmlns:fx="http://ns.adobe.com/mxml/2009" 
 xmlns:s="library://ns.adobe.com/flex/spark" 
 xmlns:mx="library://ns.adobe.com/flex/mx" xmlns="weave.editors.*" width="500" height="300" xmlns:ui="weave.ui.*" implements="weave.api.ui.ILinkableObjectEditor">
	<s:HGroup id="wmsPlotterControls" width="100%" horizontalAlign="center" paddingTop="3" verticalAlign="middle">
		<s:BorderContainer borderStyle="solid" width="100%" >
			<s:layout>
				<s:VerticalLayout paddingTop="3" horizontalAlign="left"/>
			</s:layout>
			<mx:CheckBox id="wmsPreferLowerQuality"
						 selected="false"
						 label="{lang('Prefer Lower Quality')}"
						 labelPlacement="right" 
						 toolTip="{'Check this box to download lower quality images from the WMS service. This option may be '
						 + 'preferred when using the OpenStreetMap service.'}"
						 creationComplete="linkBindableProperty(_plotter.preferLowerQuality,event.target,'selected')"/>
			<mx:CheckBox id="wmsDisplayMissing"
						 selected="true"
						 label="{lang('Show Failed Downloads')}"
						 labelPlacement="right" 
						 toolTip="{'Check this box to enable drawing of the missing image for failed requests. If this is unchecked, '
						 + 'the plotter will fill missing images with lower quality images which cover the same area.'}"
						 creationComplete="linkBindableProperty(_plotter.displayMissingImage,event.target,'selected')"/>
			<s:HGroup width="100%" horizontalAlign="center" verticalAlign="middle">
				<s:Label text="{lang('Service:')}"/>
				<!-- for each provider's name, append '(SRS_CODE)' to the end -->
				<ui:CustomComboBox editable="false" id="wmsLayerService"
								prompt="{lang('Select a service')}"
								dataProvider="{WMSProviders.providers}"
								width="200"
								toolTip="{lang('Select the WMS provider to use.')}" 
								creationComplete="setWMSLayerServiceOnPlotterChange()"
								change="handleWMSProviderChange()"/>
			</s:HGroup>
			<mx:Box id="customWMSSettings" visible="false" width="100%" height="100%" includeInLayout="false">
				<ui:Indent label="URL: ">
					<s:TextInput id="wmsURLText" />
				</ui:Indent>
				<ui:Indent label="Projection SRS: ">
					<s:TextInput id="projSRSText" />
				</ui:Indent>
				<ui:Indent label="Maximum Zoom: ">
					<s:TextInput id="maxZoomText"/>					
				</ui:Indent>
				<ui:Indent label="Copyright text: ">
					<s:TextInput id="creditInfoText" />					
				</ui:Indent>
			</mx:Box>
		</s:BorderContainer>
		<s:BorderContainer borderStyle="solid" width="100%" >
			<s:layout>
				<s:VerticalLayout  paddingTop="3" horizontalAlign="center" verticalAlign="middle"/>
			</s:layout>
			<s:HGroup width="100%" horizontalAlign="center">
				<s:Label text="{lang('Month:')}"/>
				<ui:CustomComboBox enabled="{(wmsLayerService.selectedItem as String) == WMSProviders.NASA}" visible="{enabled == true}" editable="false" 
								dataProvider="{['Dec ','Jan','Feb','Mar','Apr','May','Jun','Jul','Aug','Sep','Oct','Nov','Dec','Jan ']}" 
								change="handleStyleInputChange()" id="requestStyles" width="80" 
								toolTip="{lang('Enter the month of the NASA images.')}"/>
			</s:HGroup>
		</s:BorderContainer>
	</s:HGroup>
	
	<fx:Script>
		<![CDATA[
			import com.modestmaps.mapproviders.BlueMarbleMapProvider;
			import com.modestmaps.mapproviders.IMapProvider;
			import com.modestmaps.mapproviders.OpenStreetMapProvider;
			
			import weave.api.core.ILinkableObject;
			import weave.api.getCallbackCollection;
			import weave.api.linkBindableProperty;
			import weave.api.registerLinkableChild;
			import weave.api.services.IWMSService;
			import weave.api.unlinkBindableProperty;
			import weave.core.LinkableNumber;
			import weave.core.LinkableString;
			import weave.services.wms.CustomWMS;
			import weave.services.wms.OpenMapQuestAerialProvider;
			import weave.services.wms.OpenMapQuestProvider;
			import weave.services.wms.StamenProvider;
			import weave.services.wms.WMSProviders;
			import weave.visualization.plotters.WMSPlotter;
			
			private var _plotter:WMSPlotter = null;
			
			public function setTarget(object:ILinkableObject):void
			{
				_plotter = object as WMSPlotter;
				getCallbackCollection(_plotter).addImmediateCallback(this,setWMSLayerServiceOnPlotterChange,true);
			}
			
			public function applyChanges():void
			{
				
			}			
			
			override protected function childrenCreated():void
			{
				super.childrenCreated();
				setWMSLayerServiceOnPlotterChange();
				handleWMSProviderChange();
				wmsURLText.toolTip =  "Enclose x,y,z in curly braces as shown in this sample URL: http://tile.openstreetmap.org/{z}/{x}/{y}.png";
			}
			
			private function handleStyleInputChange():void
			{
				
				if (_plotter == null)
					return;
				
				if (requestStyles.selectedLabel == null || requestStyles.selectedLabel == '')
					return;
				
				if (requestStyles.selectedLabel == 'Jan ')
					requestStyles.selectedIndex = 1;
				if (requestStyles.selectedLabel == 'Dec ')
					requestStyles.selectedIndex = 12;
				
				requestStyles.text = requestStyles.text.replace(' ','');
				
				_plotter.styles.value = requestStyles.text;
			}
			
			private function setWMSLayerServiceOnPlotterChange():void
			{
				if (!_plotter.providerName || !wmsLayerService)
					return;
				wmsLayerService.selectedItem = _plotter.providerName;

			}
			
			private var _customWMS:CustomWMS = null;
			private function handleWMSProviderChange():void
			{
				_plotter.setProvider(wmsLayerService.selectedItem as String);
				
				if (_plotter.service.internalObject is CustomWMS)
				{
					if (_customWMS != null)
					{
						unlinkBindableProperty(_customWMS.wmsURL,wmsURLText,"text");
						unlinkBindableProperty(_customWMS.tileProjectionSRS,projSRSText,"text");
						unlinkBindableProperty(_customWMS.maxZoom,maxZoomText,"text");
						unlinkBindableProperty(_customWMS.creditInfo,creditInfoText,"text");
					}
					customWMSSettings.includeInLayout = true;								
					customWMSSettings.visible = true;
					
					_customWMS = _plotter.service.internalObject as CustomWMS;
					
					linkBindableProperty(_customWMS.wmsURL,wmsURLText,"text");
					linkBindableProperty(_customWMS.tileProjectionSRS,projSRSText,"text");
					linkBindableProperty(_customWMS.maxZoom,maxZoomText,"text");
					linkBindableProperty(_customWMS.creditInfo,creditInfoText,"text");

				}
				else
				{
					customWMSSettings.includeInLayout = false;								
					customWMSSettings.visible = false;
				}
			}
		]]>
	</fx:Script>
</s:VGroup>
