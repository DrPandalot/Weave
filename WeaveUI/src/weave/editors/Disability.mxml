<?xml version="1.0" encoding="utf-8"?>
<!--
/*
Weave (Web-based Analysis and Visualization Environment)
Copyright (C) 2008-2011 University of Massachusetts Lowell

This file is a part of Weave.

Weave is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License, Version 3,
as published by the Free Software Foundation.

Weave is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with Weave.  If not, see <http://www.gnu.org/licenses/>.
*/
-->

<!---
@author mervetuccar
@author hgranz
-->

<mx:VBox xmlns:mx="http://www.adobe.com/2006/mxml" width="400" height="300"		 
		 xmlns="weave.editors.*"
		 xmlns:ui="weave.ui.*"
		 label="Disability"
		 implements="weave.api.core.ILinkableObject"
		 enabled="{_panel != null}"	>
	
	<mx:Label text="User generated visualization description text:"
			  textAlign="left"/>
	
	<mx:TextArea id="manualToolDescTextBox" 
				 width="100%" 
				 height="40%" 
				 minWidth="5" 
				 minHeight="5"
				 borderStyle="solid" 
				 editable="true"  
				 keyFocusChange="event.preventDefault(); event.target.replaceSelectedText('\t');"
				 toolTip="changeme"
				 creationComplete="handleCreationComplete(event);" 
				 wordWrap="true"/>
	
	<mx:Label text="System generated visualization description text:"
			  textAlign="left"/>
	
	<mx:TextArea id="automaticToolDescTextBox" 
				 width="100%" 
				 height="40%" 
				 minWidth="5" 
				 minHeight="5"
				 borderStyle="solid" 
				 editable="false"  
				 keyFocusChange="event.preventDefault(); event.target.replaceSelectedText('\t');"
				 toolTip="changeme"
				 wordWrap="true" text="before button clicked"/>
	
	<mx:Button label="Refresh Description"
			   id="automaticDescRefreshButton" 
			   toolTip="changeme" click="automaticDescRefreshButton_clickHandler(event)"/>
	
	
	<mx:Script>
		<![CDATA[
			import mx.accessibility.CheckBoxAccImpl;
			import mx.binding.utils.BindingUtils;
			import mx.controls.Menu;
			import mx.controls.TextArea;
			import mx.core.IUIComponent;
			import mx.core.UIComponent;
			import mx.events.DragEvent;
			import mx.events.FlexEvent;
			import mx.managers.DragManager;
			import mx.rpc.AsyncToken;
			import mx.rpc.events.FaultEvent;
			import mx.rpc.events.ResultEvent;
			
			import weave.Weave;
			import weave.api.WeaveAPI;
			import weave.api.core.ILinkableObject;
			import weave.api.data.IAttributeColumn;
			import weave.api.linkBindableProperty;
			import weave.api.newLinkableChild;
			import weave.api.registerLinkableChild;
			import weave.api.reportError;
			import weave.api.setSessionState;
			import weave.api.ui.ILinkableObjectEditor;
			import weave.api.unlinkBindableProperty;
			import weave.api.unlinkSessionState;
			import weave.core.LinkableHashMap;
			import weave.core.LinkableString;
			import weave.data.KeySets.KeySet;
			import weave.services.DelayedAsyncInvocation;
			import weave.services.DelayedAsyncResponder;
			import weave.services.WeaveRServlet;
			import weave.services.beans.RResult;
			import weave.ui.ControlPanel;
			import weave.ui.DisabilityOptions;
			import weave.ui.DraggablePanel;
			import weave.utils.ColumnUtils;
			import weave.utils.LinkableTextFormat;
			import weave.visualization.tools.LineChartTool;
			
			
			
			[Bindable] private var _panel:DraggablePanel = null;
			[Bindable] public var _target:LineChartTool = Weave.root.requestObject(null, LineChartTool, false);
			//create a new map which belongs to the line chart tool which contains only iAttribute columns
			public var _columnObjects:LinkableHashMap = registerLinkableChild(this, new LinkableHashMap(IAttributeColumn));
			public var Rservice:WeaveRServlet = new WeaveRServlet(Weave.properties.rServiceURL.value);
			
			public var joinedColsforRArrayUnsplit:Array = new Array();
			public const disabilityText:LinkableString = newLinkableChild(this, LinkableString);
			public var joinKeysRArray:Array = new Array();
			public var joinColsRArray:Array = new Array();
			
			public function set target(panel:DraggablePanel):void
			{
				if (_panel)
					throw new Error("target should not be set more than once");
				
				_panel = panel;
			}
			
			override protected function childrenCreated():void
			{
				super.childrenCreated();
				
			}
		
			private function handleCreationComplete(event:Event) : void
			{
				
				Weave.properties.disabilityHashMap.requestObject('text', LinkableString, false);
				var HashDisabilityText : LinkableString = (Weave.properties.disabilityHashMap.renameObject('text', _panel.title) as LinkableString);
				
				if( HashDisabilityText == null)
					reportError("Error Creating request object from Disability Options");
				else
					linkBindableProperty(HashDisabilityText, event.target, "text");
				
			}
			
			protected function automaticDescRefreshButton_clickHandler(event:MouseEvent):void
			{
				automaticToolDescTextBox.text = "after button clicked";
				var dictionaryType:String;
				var vizType:String;
				var rResult:Array;
		//		rResult = getInfoForR(/*columns???*/);
				vizType = "lineChart";
				dictionaryType = determineDictionaryType(vizType);
		
				determineMessageCategory(dictionaryType, rResult) 
				
			}
			
			protected function determineDictionaryType(vizType:String):String
			{
				return ("lineChartDictionary");
			}
			
			protected function determineMessageCategory(dictionaryType:String, rResult:Array):String
			{
				return ("increasingTrend");
			}
			
			protected function getInfoForR():void
			{
				//use this function to gather the appropriate information that will be sent to R 
				//we have the columns in columnObjects
				var colsSentToRArray:Array = new Array();
				//below whatever cols are plotted it picks them up as individual objects
				colsSentToRArray = _columnObjects.getObjects(IAttributeColumn)
				//joining columns returns columns only complete records (no incomplete records)
				joinedColsforRArrayUnsplit = joinColumns(colsSentToRArray);
				
				joinKeysRArray = joinedColsforRArrayUnsplit[0]; 
				joinColsRArray = joinedColsforRArrayUnsplit[1];
			
				//todo: getting axis, title, color, scale, etc
				sendStuffToR();
				
			
				
			}
			private function joinColumns(columns:Array):Array
			{
				var selection:KeySet = Weave.defaultSelectionKeySet;
				var keys:Array = selection.keys.length > 0 ? selection.keys : null;
				//make dataype Null, so that columns will be sent as exact dataype to R
				//if mentioned as String or NUmber ,will convert all columns to String or Number .
				var result:Array = ColumnUtils.joinColumns(columns,null, false, keys);
				return [result.shift(), result];
			}

			protected function sendStuffToR():void
			{
				//send the columns and variables returned from getInfoForR to R using this function

				var computeScript:String = "";
				//inputValues is a matrix of all of the columns that are to be sent to R
				var inputValues:Array = new Array();
				var outputNames:Array = null;
				inputValues = joinColsRArray;
				//default name to be used in R
				var inputName:Array = ["myColumns"];
				
				var query:AsyncToken = Rservice.runScript(joinKeysRArray, inputName, inputValues, outputNames, computeScript, "", false, false, false);
				DelayedAsyncResponder.addResponder(query, handleRunScriptResult, handleRunScriptFault, joinKeysRArray);		
				
			}
			private function handleRunScriptResult(event:ResultEvent, token:Object):void
			{
				var rObject:Array = new Array();
				rObject = event.result as Array;

				
				if (rObject == null){ 
					reportError("R Server did not return an array");
				}
				
				var finalRObject:Array = new Array();
				for (var i:int=0; i < rObject.length; i++){
					
					if (rObject[i] == null){
						reportError("R server returned an array with null element " + i);
					}
					
					var rResult:RResult = new RResult(rObject[i]);
					finalRObject[i] = rResult;
			
				}
			
			}
			private function handleRunScriptFault(event:FaultEvent, token:Object):void
			{
				trace(["fault", token, event.message].join("\n"));
				reportError(event);
			}
			
		]]>
	</mx:Script>
</mx:VBox>
