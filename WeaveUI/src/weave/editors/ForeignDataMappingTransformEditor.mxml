<?xml version="1.0" encoding="utf-8"?>
<!--
/*
    Weave (Web-based Analysis and Visualization Environment)
    Copyright (C) 2008-2011 University of Massachusetts Lowell

    This file is a part of Weave.

    Weave is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License, Version 3,
    as published by the Free Software Foundation.

    Weave is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with Weave.  If not, see <http://www.gnu.org/licenses/>.
*/
-->
<mx:VBox 
    xmlns:mx="http://www.adobe.com/2006/mxml"
    xmlns="weave.editors.*"
    verticalScrollPolicy="off"
    horizontalScrollPolicy="off"
    creationPolicy="all"
    implements="weave.api.core.ILinkableObject, weave.api.ui.IDataSourceEditor" xmlns:ui="weave.ui.*"
    >
    <mx:Label id="editorTitle" fontWeight="bold" text="{label}"/>
    <ui:Indent label="{lang('Source Name')}" visible="{!target}" includeInLayout="{!target}">
        <ui:TextInputWithPrompt id="sourceName"
                                width="100%"
                                prompt="{lang('Enter a name')}"
                                errorString="{sourceName.text ? null : lang('Required')}"/>
    </ui:Indent>
    <ui:DynamicColumnComponent 
        label="Key mapping column" id="keyColumnEditor">
        <ui:helpContent>
            Each value in this column will be used as the key to look up records in the data columns.
        </ui:helpContent>
    </ui:DynamicColumnComponent>
    <ui:ColumnListComponent id="dataColumnsEditor" showVariableNames="false" label="{lang('Columns to access using the key mapping')}">
        <ui:helpContent>
            Each column here will be reproduced in the data source, using the key mapping column's keys.
        </ui:helpContent>
    </ui:ColumnListComponent>
    <mx:Script>
        <![CDATA[
            import mx.controls.Alert;
            
            import weave.api.copySessionState;
            import weave.api.core.ILinkableHashMap;
            import weave.api.core.ILinkableObject;
            import weave.api.data.IAttributeColumn;
            import weave.api.data.IDataSource;
            import weave.api.getSessionState;
            import weave.api.newLinkableChild;
            import weave.api.registerLinkableChild;
            import weave.api.linkBindableProperty;
            import weave.core.LinkableHashMap;
            import weave.data.AttributeColumns.DynamicColumn;
            import weave.data.Transforms.ForeignDataMappingTransform;

            private const keyColumn:DynamicColumn = newLinkableChild(this, DynamicColumn);
            private const dataColumns:ILinkableHashMap = registerLinkableChild(this, new LinkableHashMap(IAttributeColumn));
            
            [Bindable] private var target:ForeignDataMappingTransform = null;
            
            override protected function createChildren():void
            {
                super.createChildren();
                
                keyColumnEditor.dynamicObject = keyColumn;

                dataColumnsEditor.hashMap = dataColumns;
                
                sourceName.text = WeaveAPI.globalHashMap.generateUniqueName("ForeignDataMappingTransform");
            }
            
            public function setTarget(object:ILinkableObject):void
            {
                target = object as ForeignDataMappingTransform;
                
                if (!parent)
                {
                    callLater(setTarget, arguments);
                    return;
                }
                
                if (target)
                {
                    copySessionState(target.keyColumn, keyColumn);
                    copySessionState(target.dataColumns, dataColumns);
                    sourceName.text = WeaveAPI.globalHashMap.getName(target);
                    sourceName.editable = false;
                    sourceName.toolTip = lang("Source name is not editable once added to the session. If needed, delete the source and add it again with the new name.");
                }
            }
            
            public function hasPendingChanges():Boolean
            {
                return !!WeaveAPI.SessionManager.computeDiff(getSessionState(dataColumns), getSessionState(target.dataColumns))
                    || !!WeaveAPI.SessionManager.computeDiff(getSessionState(keyColumn), getSessionState(target.keyColumn));
            }
            
            public function applyChanges():void
            {
                copySessionState(keyColumn, target.keyColumn);
                copySessionState(dataColumns, target.dataColumns);
            }
            
            public function createDataSource():IDataSource
            {
                if (!sourceName.text)
                {
                    Alert.show(lang("Please fill all required fields"), lang("Error"));
                    return null;
                }
                if (WeaveAPI.globalHashMap.getObject(sourceName.text))
                {
                    Alert.show(lang("Source Name already being used. Please give a different name"), lang("Error"));
                    return null;
                }
                target = WeaveAPI.globalHashMap.requestObject(sourceName.text, ForeignDataMappingTransform, false);
                if (!target)
                {
                    Alert.show(lang("Unexpected problem. Unable to add the data source."));
                    return null;
                }
                applyChanges();
                return target;
            }
        ]]>
    </mx:Script>
</mx:VBox>