<?xml version="1.0" encoding="utf-8"?>
<!--
/*
    Weave (Web-based Analysis and Visualization Environment)
    Copyright (C) 2008-2011 University of Massachusetts Lowell

    This file is a part of Weave.

    Weave is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License, Version 3,
    as published by the Free Software Foundation.

    Weave is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with Weave.  If not, see <http://www.gnu.org/licenses/>.
*/
-->
<mx:VBox 
	xmlns:mx="http://www.adobe.com/2006/mxml"
	xmlns="weave.editors.*"
	verticalScrollPolicy="off"
	horizontalScrollPolicy="off"
	creationPolicy="all"
	implements="weave.api.core.ILinkableObject, weave.api.ui.IDataSourceEditor" xmlns:ui="weave.ui.*"
	>
	<mx:Label id="editorTitle" fontWeight="bold" text="{label}"/>
	<ui:Indent label="{lang('Source Name')}" visible="{!target}" includeInLayout="{!target}">
		<ui:TextInputWithPrompt id="sourceName"
								width="100%"
								prompt="{lang('Enter a name')}"
								errorString="{sourceName.text ? null : lang('Required')}"/>
	</ui:Indent>
	<ui:DynamicColumnComponent label="Title column" id="titleColumnEditor" showLinkControl="false">
		<ui:helpContent>
			The values in this column will be used as titles for the transposed columns.
		</ui:helpContent>
	</ui:DynamicColumnComponent>
	<ui:CustomTabNavigator initialize="UIUtils.pad(event, 8, 100, 100);">
		<ui:ColumnListComponent id="columnsEditor" showVariableNames="false" label="{lang('Columns to transpose')}">
			<ui:helpContent>
				Each column you add below will correspond to a record in the transposed data source.
				Records in the original columns will become columns in the transposed data source.
			</ui:helpContent>
		</ui:ColumnListComponent>
		<ui:ColumnListComponent id="metadataEditor" showVariableNames="true" label="{lang('Metadata variables')}">
			<ui:helpContent>
				Metadata variables will be used to set the metadata of transposed columns and are case sensitive.
				For example, create a metadata variable named "title" to define the text used for each transposed column title.
			</ui:helpContent>
		</ui:ColumnListComponent>
	</ui:CustomTabNavigator>
	<mx:Script>
		<![CDATA[
			import mx.controls.Alert;
			
			import weave.api.copySessionState;
			import weave.api.core.ILinkableHashMap;
			import weave.api.core.ILinkableObject;
			import weave.api.data.ColumnMetadata;
			import weave.api.data.IAttributeColumn;
			import weave.api.data.IDataSource;
			import weave.api.getCallbackCollection;
			import weave.api.getSessionState;
			import weave.api.newLinkableChild;
			import weave.api.registerLinkableChild;
			import weave.core.LinkableHashMap;
			import weave.core.UIUtils;
			import weave.data.AttributeColumns.DynamicColumn;
			import weave.data.DataSources.TransposedDataSource;
			
			private const titleColumn:DynamicColumn = newLinkableChild(this, DynamicColumn);
			public const metadata:ILinkableHashMap = registerLinkableChild(this, new LinkableHashMap(IAttributeColumn));
			public const columns:ILinkableHashMap = registerLinkableChild(this, new LinkableHashMap(IAttributeColumn));
			
			[Bindable] private var target:TransposedDataSource = null;
			
			override protected function createChildren():void
			{
				super.createChildren();
				
				titleColumnEditor.dynamicObject = titleColumn;
				metadataEditor.hashMap = metadata;
				columnsEditor.hashMap = columns;
				
				titleColumn.addImmediateCallback(this, function():void {
					metadata.requestObjectCopy(ColumnMetadata.TITLE, titleColumn.getInternalColumn());
				});
				getCallbackCollection(metadata).addImmediateCallback(this, function():void {
					titleColumn.requestLocalObjectCopy(metadata.getObject(ColumnMetadata.TITLE));
				});
				getCallbackCollection(columns).addImmediateCallback(this, function():void {
					if (!titleColumn.getInternalColumn())
					{
						var cols:Array = columns.getObjects();
						if (cols.length)
							titleColumn.requestLocalObjectCopy(cols[0]);
					}
				});
				
				sourceName.text = WeaveAPI.globalHashMap.generateUniqueName("TransposedDataSource");
			}
			
			public function setTarget(object:ILinkableObject):void
			{
				target = object as TransposedDataSource;
				
				if (!parent)
				{
					callLater(setTarget, arguments);
					return;
				}
				
				if (target)
				{
					copySessionState(target.metadata, metadata);
					copySessionState(target.columns, columns);
					sourceName.text = WeaveAPI.globalHashMap.getName(target);
					sourceName.editable = false;
					sourceName.toolTip = lang("Source name is not editable once added to the session. If needed, delete the source and add it again with the new name.");
				}
			}
			
			public function hasPendingChanges():Boolean
			{
				return !!WeaveAPI.SessionManager.computeDiff(getSessionState(metadata), getSessionState(target.metadata))
					|| !!WeaveAPI.SessionManager.computeDiff(getSessionState(columns), getSessionState(target.columns));
			}
			
			public function applyChanges():void
			{
				copySessionState(metadata, target.metadata);
				copySessionState(columns, target.columns);
			}
			
			public function createDataSource():IDataSource
			{
				if (!sourceName.text)
				{
					Alert.show(lang("Please fill all required fields"), lang("Error"));
					return null;
				}
				if (WeaveAPI.globalHashMap.getObject(sourceName.text))
				{
					Alert.show(lang("Source Name already being used. Please give a different name"), lang("Error"));
					return null;
				}
				target = WeaveAPI.globalHashMap.requestObject(sourceName.text, TransposedDataSource, false);
				if (!target)
				{
					Alert.show(lang("Unexpected problem. Unable to add the data source."));
					return null;
				}
				applyChanges();
				return target;
			}
		]]>
	</mx:Script>
</mx:VBox>