<?xml version="1.0" encoding="utf-8"?>
<!--
/*
    Weave (Web-based Analysis and Visualization Environment)
    Copyright (C) 2008-2011 University of Massachusetts Lowell

    This file is a part of Weave.

    Weave is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License, Version 3,
    as published by the Free Software Foundation.

    Weave is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with Weave.  If not, see <http://www.gnu.org/licenses/>.
*/
-->
<mx:VBox 
	xmlns:mx="http://www.adobe.com/2006/mxml"
	xmlns="weave.editors.*"
	verticalScrollPolicy="off"
	horizontalScrollPolicy="off"
	creationPolicy="all"
	implements="weave.api.ui.IDataSourceEditor" xmlns:ui="weave.ui.*" xmlns:CustomDataGrid="weave.ui.CustomDataGrid.*"
	>
	<mx:Label id="editorTitle" fontWeight="bold" text="{label}"/>
	<ui:Indent label="{lang('Source name *')}">
		<mx:TextInput id="sourceName" width="100%"/>
	</ui:Indent>
	<ui:Indent label="{lang('Source URL')}">
		<ui:TextInputWithPrompt id="url" prompt="http://www.example.com/WeaveServices/DataService" width="100%"/>
	</ui:Indent>
	<ui:Indent label="{lang('Collections')}">
		<ui:MenuButton id="collectionMenu" label="{selectedCollection || 'Choose a collection...'}"/>
		<mx:Button label="{lang('Open Search')}" click="openSearch()" enabled="{!!selectedCollection}"/>
		<mx:Button label="{lang('Manage...')}" click="manageCollection()" enabled="{!!selectedCollection}"/>
	</ui:Indent>
	<ui:Indent label="{lang('Topic Names')}">
		<mx:DataGrid id="topicNameGrid" itemEditEnd="editEnd(event)" editable="true" height="100%" width="100%">
			<mx:columns>
				<mx:DataGridColumn id="topicIdColumn"
					headerText="{lang('ID')}"
					sortable="false"
					editable="false"
				/>
				<mx:DataGridColumn id="topicWordColumn"
					headerText="{lang('Keywords')}"
					sortable="false"
					editable="false"
				/>
				<mx:DataGridColumn id="topicLabelColumn"
					headerText="{lang('Label')}"
					sortable="false"
					editable="true"
				/>
			</mx:columns>
		</mx:DataGrid>
	</ui:Indent>
	<mx:Spacer height="20"/>
	<mx:Label text="{lang('* = required')}"/>
	<mx:Script>
		<![CDATA[
			import mx.binding.utils.BindingUtils;
			import mx.controls.Alert;
			import mx.controls.dataGridClasses.DataGridColumn;
			import mx.events.DataGridEvent;
			
			import weave.api.core.ILinkableObject;
			import weave.api.data.IDataSource;
			import weave.api.disposeObject;
			import weave.api.getCallbackCollection;
			import weave.api.newDisposableChild;
			import weave.api.registerDisposableChild;
			import weave.compiler.StandardLib;
			import weave.core.LinkableHashMap;
			import weave.core.LinkableString;
			import weave.data.DataSources.DocumentMapDataSource;
			import weave.ui.DraggablePanel;
			import weave.ui.VariableListController;
			import weave.ui.WeaveDataSourceHierarchySelector;
			import weave.visualization.tools.DocMapSearchTool;
			
			private const controller:VariableListController = newDisposableChild(this, VariableListController);
			
		
			override protected function createChildren():void
			{
				super.createChildren();
				
				sourceName.text = WeaveAPI.globalHashMap.generateUniqueName(WeaveAPI.ClassRegistry.getDisplayName(DocumentMapDataSource));
				topicIdColumn.labelFunction = topicWordColumn.labelFunction = topicLabelColumn.labelFunction = labelFunction;
				controller.view = topicNameGrid;
			}
			
			[Bindable] private var target:DocumentMapDataSource = null;

			private function editEnd(event:DataGridEvent):void
			{
				var grid:DataGrid = event.target as DataGrid;
				var column:DataGridColumn = grid.columns[event.columnIndex];
				var entry:LinkableString = event.itemRenderer.data as LinkableString;
				var newValue:String = grid.itemEditorInstance[column.editorDataField];
				entry.value = newValue;
			}
			private function labelFunction(item:Object, column:DataGridColumn):String
			{
				var collection:String = selectedCollection;
				var entry:LinkableString = item as LinkableString;
				if (column == topicIdColumn)
				{
					return controller.hashMap.getName(entry);
				}
				else if (column == topicWordColumn)
				{
					if (target._topicIdToWords[collection])
					{
						return target._topicIdToWords[collection][controller.hashMap.getName(entry)] || "";
					}
					else
					{
						return "";
					}
				}
				else if (column == topicLabelColumn)
				{
					return entry.value;
				}
				return null;
			}
			private var _currentHashMap:LinkableHashMap = null;
			[Bindable] private var selectedCollection:String;
			private function updateTopicNameView(collectionName:String):void
			{
				selectedCollection = collectionName;
				controller.hashMap = target.topicNameOverrides.requestObject(collectionName, LinkableHashMap, false) as LinkableHashMap;
				for each (var topicID:String in target.getTopicIDs(collectionName))
				{
					controller.hashMap.requestObject(topicID, LinkableString, false);
				}
			}

			public function setTarget(object:ILinkableObject):void
			{
				target = object as DocumentMapDataSource;
				
				if (!parent)
				{
					callLater(setTarget, arguments);
					return;
				}
				
				if (target)
				{
					sourceName.text = WeaveAPI.globalHashMap.getName(target);
					url.text = target.url.value;
					
					sourceName.editable = false;
					sourceName.toolTip = lang("Source name is not editable once added to the session. If needed, delete the source and add it again with the new name.");

					collectionMenu.data = {
						source: target._listCollectionsCallbacks,
						children: function():Array {
							return target._collections.map(function(collection:String, i:int, a:Array):Object {
								return {
									label: collection,
									click: function():void {
										updateTopicNameView(collection);
									}
								};
							});
						}
					};
				}
			}
			
			public function hasPendingChanges():Boolean
			{
				return StandardLib.asString(target.url.value) != StandardLib.asString(url.text);
			}
			
			public function applyChanges():void
			{
				// set value on data source
				target.url.value = url.text;
				// read from data source in case value is different
				url.text = target.url.value;
			}
			
			public function createDataSource():IDataSource
			{
				if (!sourceName.text)
				{
					Alert.show(lang("Please fill all required fields"), lang("Error"));
					return null;
				}
				if (WeaveAPI.globalHashMap.getObject(sourceName.text))
				{
					Alert.show(lang("Source Name already being used. Please give a different name"), lang("Error"));
					return null;
				}
				target = WeaveAPI.globalHashMap.requestObject(sourceName.text, DocumentMapDataSource, false);
				if (!target)
				{
					Alert.show(lang("Unexpected problem. Unable to add the data source."));
					return null;
				}
				applyChanges();
				return target;
			}
			
			public function openSearch():void
			{
				var toolName:String = WeaveAPI.globalHashMap.generateUniqueName(WeaveAPI.ClassRegistry.getDisplayName(DocMapSearchTool));
				var tool:DocMapSearchTool = WeaveAPI.globalHashMap.requestObject(toolName, DocMapSearchTool, false);
				tool.collectionName.value = selectedCollection;
			}
			public function manageCollection():void
			{
				
			}
		]]>
	</mx:Script>
</mx:VBox>
