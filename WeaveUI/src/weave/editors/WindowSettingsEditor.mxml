<?xml version="1.0" encoding="utf-8"?>
<!--
/*
    Weave (Web-based Analysis and Visualization Environment)
    Copyright (C) 2008-2011 University of Massachusetts Lowell

    This file is a part of Weave.

    Weave is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License, Version 3,
    as published by the Free Software Foundation.

    Weave is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with Weave.  If not, see <http://www.gnu.org/licenses/>.
*/
-->
<mx:VBox xmlns:mx="http://www.adobe.com/2006/mxml"
		xmlns="weave.ui.editors.*"
		label="{lang('Window')}"
		enabled="{_panel != null}"
		creationPolicy="all" xmlns:ui="weave.ui.*">
	<mx:HBox id="titleControls" width="100%">
		<mx:Label text="{lang('Window title:')}"/>
		<mx:TextInput id="titleInput"
					  width="100%"
					  toolTip="{lang('Entering a title here will override the automatic title generated by the tool.')}"
					  creationComplete="linkBindableProperty(_panel.panelTitle, event.target, 'text', 500);"/>
	</mx:HBox>
	
	<mx:HBox>
		<ui:CustomCheckBox label="{lang('Allow move and resize')}"
				 creationComplete="linkBindableProperty(_panel.enableMoveResize, event.target, 'selected')"/>
		<ui:HelpComponent>
			Windows will always be movable and resizable when editing a visualization as an Admin.
		</ui:HelpComponent>
	</mx:HBox>

	<ui:CheckBoxWithNestedOptions label="{lang('Show borders')}"
				 creationComplete="linkBindableProperty(_panel.enableBorders, event.target, 'selected');">
		<ui:CustomCheckBox label="{labelShowButton(DraggablePanel.TOOLTIP_ZORDER)}"
				 creationComplete="linkBindableProperty(_panel.enableZOrder, event.target, 'selected')"/>
		<ui:CustomCheckBox label="{labelShowButton(DraggablePanel.TOOLTIP_MINIMIZE)}"
				 creationComplete="linkBindableProperty(_panel.minimizable, event.target, 'selected')"/>
		<ui:CustomCheckBox label="{labelShowButton(DraggablePanel.TOOLTIP_MAXIMIZE)}"
				 creationComplete="linkBindableProperty(_panel.maximizable, event.target,'selected')"/>
		<ui:CustomCheckBox label="{labelShowButton(DraggablePanel.TOOLTIP_CLOSE)}"
				 creationComplete="linkBindableProperty(_panel.closeable, event.target, 'selected')"/>
		<ui:Indent label="{lang('Border color')}">
			<ui:CustomColorPicker id="borderColorPicker" change="borderColorPicked();"/>
			<mx:Button label="{lang('Reset')}" click="_panel.panelBorderColor.value = NaN;"/>
		</ui:Indent>
	</ui:CheckBoxWithNestedOptions>

	<ui:Indent label="{lang('Background color')}">
		<ui:CustomColorPicker id="backgroundColorPicker" change="backgroundColorPicked();"/>
		<mx:Button label="{lang('Reset')}" click="_panel.panelBackgroundColor.value = NaN;"/>
	</ui:Indent>

	<mx:Script>
		<![CDATA[
			import mx.events.FlexEvent;
			
			import weave.api.linkBindableProperty;
			import weave.core.UIUtils;
			import weave.ui.DraggablePanel;

			[Bindable]
			private var _panel:DraggablePanel = null;
			
			private function labelShowButton(buttonToolTip:String):String
			{
				return lang('Show button "{0}"', lang(buttonToolTip));
			}
			
			public function set target(panel:DraggablePanel):void
			{
				if (_panel)
					throw new Error(lang("target should not be set more than once"));
				
				_panel = panel;
			}
			override protected function childrenCreated():void
			{
				super.childrenCreated();
				
				_panel.panelBackgroundColor.addGroupedCallback(this, backgroundColorCallback, true);
				_panel.addEventListener(FlexEvent.UPDATE_COMPLETE, function(..._):void { backgroundColorCallback(); });

				_panel.panelBorderColor.addGroupedCallback(this, borderColorCallback, true);
				_panel.addEventListener(FlexEvent.UPDATE_COMPLETE, function(..._):void { borderColorCallback(); });
			}
			
			private function backgroundColorCallback():void
			{
				backgroundColorPicker.selectedColor = _panel.getStyle('backgroundColor');
			}
			private function backgroundColorPicked():void
			{
				_panel.panelBackgroundColor.value = backgroundColorPicker.selectedColor;
			}
			
			private function borderColorCallback():void
			{
				borderColorPicker.selectedColor = _panel.getStyle('borderColor');
			}
			private function borderColorPicked():void
			{
				_panel.panelBorderColor.value = borderColorPicker.selectedColor;
			}
		]]>
	</mx:Script>
</mx:VBox>
