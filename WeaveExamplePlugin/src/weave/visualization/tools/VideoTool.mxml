<?xml version="1.0" encoding="utf-8"?>
<!--
/* ***** BEGIN LICENSE BLOCK *****
 *
 * This file is part of Weave.
 *
 * The Initial Developer of Weave is the Institute for Visualization
 * and Perception Research at the University of Massachusetts Lowell.
 * Portions created by the Initial Developer are Copyright (C) 2008-2015
 * the Initial Developer. All Rights Reserved.
 *
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this file,
 * You can obtain one at http://mozilla.org/MPL/2.0/.
 * 
 * ***** END LICENSE BLOCK ***** */
-->
<ui:DraggablePanel xmlns:mx="http://www.adobe.com/2006/mxml"
				   xmlns:tools="weave.visualization.tools.*"
				   xmlns:ui="weave.ui.*"
				   width="400" height="300" implements="weave.api.ui.IVisTool" layout="absolute"
				   resize="fixVideoSizing()" title="{lang('Video Tool')}">	
	<mx:UIComponent id="theVideoSpace" width="100%" height="100%"/>
	<mx:Script>
		<![CDATA[			
			import cc.cote.chromatracker.ChromaTracker;
			
			import weave.api.linkBindableProperty;
			import weave.api.registerLinkableChild;
			import weave.api.reportError;
			import weave.api.ui.IVisTool;
			import weave.core.LinkableNumber;
			import weave.core.LinkableString;
			import weave.core.LinkableBoolean;
			import weave.api.linkBindableProperty;
			import weave.utils.ZoomUtils;
			import weave.primitives.Bounds2D;
			
			public const videoURL:LinkableString = registerLinkableChild(this, new LinkableString(""), loadVideo);
			public const rectangleColor:LinkableNumber = registerLinkableChild(this, new LinkableNumber(0xFF0000));
			public const trackingColor:LinkableNumber = registerLinkableChild(this, new LinkableNumber(10040115), updateTrackingColor);
			public const trackingTolerance:LinkableNumber = registerLinkableChild(this, new LinkableNumber(0.15), updateTrackingTolerance);
			public const enableTracking:LinkableBoolean = registerLinkableChild(this, new LinkableBoolean(false), updateEnableTracking);
			
			private var theVideo:Video;
			private var vidConnection:NetStream = null; //Connection that is the video stream.
			private var netConnect:NetConnection = new NetConnection(); //Connection to the server.
			public var overlay:Sprite; //Used for drawing the overlay rectangle.
			private var trackingTimer:Timer = new Timer(33); //Timer set to run every frame to draw a rectangle. (30 FPS)
			private var connected:Boolean = false; //Inidicates if a NetConnection was successfully made.
			private var tracker:ChromaTracker;
			
			WeaveAPI.ClassRegistry.registerImplementation(IVisTool, VideoTool, "Video Tool");
			
			override protected function childrenCreated():void
			{
				super.childrenCreated();
				linkBindableProperty(rectangleColor, this.rectangleColorPicker, "selectedColor");
				linkBindableProperty(trackingColor, this.trackingColorColorPicker, "selectedColor");
				linkBindableProperty(trackingTolerance, this.trackingTolerancePicker, "value");
				//Overlay setup
				overlay = new Sprite();
				overlay.mouseEnabled = false;
				overlay.mouseChildren = false;
				//Initial setup for the video and server connection
				theVideo = new Video(theVideoSpace.width, theVideoSpace.height);
				netConnect.addEventListener(NetStatusEvent.NET_STATUS, netStatusHandler);
				netConnect.connect(null);
				//Add the video container and overlay to the UIComponent.
				theVideoSpace.addChild(theVideo);
				theVideoSpace.addChild(overlay);
				fixVideoSizing();
			}
			
			private function lastKeyFrameDetector(event:NetStatusEvent):void
			{
				switch(event.info.code){
					case "NetStream.Play.Start":
						trackingTimer.start();
						break;
					case "NetStream.Buffer.Empty":
						trackingTimer.stop();
						overlay.graphics.clear();
						break;
					case "NetStream.Play.StreamNotFound":
						trackingTimer.stop();
						overlay.graphics.clear();
						break;
				}
			}
			
			private var colorRect:Rectangle;

			private function updateEnableTracking():void
			{
				if (!parent)
				{
					WeaveAPI.StageUtils.callLater(this, updateEnableTracking);
					return;
				}

				if (enableTracking.value)
				{
					fixVideoSizing();
					overlay.visible = true;
					if (!trackingTimer.hasEventListener(TimerEvent.TIMER))
						trackingTimer.addEventListener(TimerEvent.TIMER, stepFrame);
				}
				else
				{
					tracker = null;
					overlay.visible = false;
					trackingTimer.removeEventListener(TimerEvent.TIMER, stepFrame);
				}
			}
			
			private function stepFrame(event:TimerEvent):void
			{
				if (tracker == null) return;

				colorRect = tracker.track();
				if( !(colorRect.height == 0 && colorRect.width == 0) )
					drawClassifierRectangle(colorRect.x, colorRect.y, colorRect.height, colorRect.width);
				else
					overlay.graphics.clear();
			}
			
			private function netStatusHandler(event:NetStatusEvent):void
			{
				switch (event.info.code) {
					case "NetConnection.Connect.Success":
						connected = true;
						loadVideo();
						break;
					case "NetStream.Play.StreamNotFound":
						connected = false;
						trace("Stream not found");
						break;
				}
			}
			
			private function loadVideo(item:Object = null):void
			{
				try
				{
					if( connected )
					{
						if( vidConnection == null )
						{
							//Setup the initial connection.
							vidConnection = new NetStream(netConnect);
							vidConnection.client = {onMetadata: fixVideoSizing};

							vidConnection.checkPolicyFile = true;
							vidConnection.addEventListener(NetStatusEvent.NET_STATUS, lastKeyFrameDetector);

							theVideo.attachNetStream(vidConnection);
						}
						
						videoURLInput.text = videoURL.value;
						vidConnection.close();
						theVideo.clear();

						vidConnection.play(videoURL.value);
					}
				}
				catch (e:Error)
				{
					reportError(e);
				}
			}
			
			override public function get defaultPanelTitle():String
			{
				return lang("Video Tool");
			}
			
			private var called:Boolean = false;
			
			//Used for resizing the video area.
			protected function fixVideoSizing():void
			{

				if (theVideo.videoHeight != 0 && theVideo.videoWidth != 0)
				{
					var videoRatio:Number = theVideo.videoWidth/theVideo.videoHeight;
					var displayRatio:Number = theVideoSpace.width/theVideoSpace.height;
					if (videoRatio > displayRatio)
					{
						theVideo.width = theVideoSpace.width;
						theVideo.height = theVideoSpace.width / videoRatio;
					}
					else
					{
						theVideo.height = theVideoSpace.height;
						theVideo.width = theVideoSpace.height * videoRatio;
					}
				}
				else
				{
					theVideo.height = theVideoSpace.height;
					theVideo.width = theVideoSpace.width;
				}
				theVideo.x = (theVideoSpace.width - theVideo.width) / 2;
				theVideo.y = (theVideoSpace.height - theVideo.height) / 2;
				if (enableTracking.value && theVideo.videoHeight != 0 && theVideo.videoWidth != 0)
				{
					overlay.x = theVideo.x;
					overlay.y = theVideo.y;
					
					tracker = new ChromaTracker(theVideo, trackingColor.value, trackingTolerance.value);
				}
			}
			
			protected function playVideoPressed(event:MouseEvent):void
			{
				//loadVideo() should run after setting this.
				if( videoURL.value == videoURLInput.text )
					loadVideo();
				else
					videoURL.value = videoURLInput.text;
			}
			
			//Draws a rectangle on the video overlay as specified by a classification algorithm.
			public function drawClassifierRectangle(x:Number, y:Number, height:Number, width:Number):void
			{
				overlay.graphics.clear();
				overlay.graphics.beginFill(rectangleColor.value);
				overlay.graphics.drawRect(x+5,y+5,width-10,height-10);
				overlay.graphics.drawRect(x,y,width,height);
				overlay.graphics.endFill();
			}
			
			//Pause button function.
			protected function pauseOrResumeStream(event:MouseEvent):void
			{
				if( pauseButton.label == lang("Pause") )
				{
					trackingTimer.stop();
					vidConnection.pause();
					pauseButton.label = lang("Resume");
					
				}
				else
				{
					vidConnection.resume();
					pauseButton.label = lang("Pause");
					trackingTimer.start();
				}
			}
			
			private function updateTrackingColor():void
			{
				if( tracker != null )
					tracker.color = trackingColor.value;
			}
			
			private function updateTrackingTolerance():void
			{
				if( tracker != null )
					tracker.tolerance = trackingTolerance.value;
			}
			
		]]>
	</mx:Script>
	<ui:ControlPanel>
		<mx:VBox>
			<mx:HBox>
				<mx:TextInput id="videoURLInput"/>
				<mx:Button label="{lang('Play')}" click="playVideoPressed(event)"/>
			</mx:HBox>
			<mx:Button id="pauseButton" label="{lang('Pause')}" click="pauseOrResumeStream(event)"/>
			<ui:CheckBoxWithNestedOptions id= "trackingCheckBox" label="{lang('Enable Color Tracking')}"
							 creationComplete="linkBindableProperty(enableTracking, event.target, 'selected')">
				<mx:HBox>
					<mx:Label text="Rectangle color:"/>
					<mx:ColorPicker id="rectangleColorPicker"/>
				</mx:HBox>
				<mx:HBox>
					<mx:Label text="Color to identify:"/>
					<mx:ColorPicker id="trackingColorColorPicker"/>
				</mx:HBox>
				<mx:HBox>
					<mx:Label text="Rectangle thickness:"/>
					<mx:NumericStepper id="trackingTolerancePicker" maximum="1" minimum="0"
									   stepSize="0.01"/>
				</mx:HBox>
			</ui:CheckBoxWithNestedOptions>
		</mx:VBox>
	</ui:ControlPanel>
</ui:DraggablePanel>
