angular.module('aws.MetadataController', ['ngAnimate', 'ngSanitize', 'mgcrea.ngStrap'])

/*angular.module('aws.MetadataController').controller('SideBarCtrl', function($scope) {

 $scope.display_message = 'Show';

 $scope.click = function() {
 $scope.boolChangeClass = !$scope.boolChangeClass;

 if ($scope.display_message == 'Show') {
 $scope.display_message = 'Hide';
 } else {
 $scope.display_message = 'Show';
 }

 $scope.$apply();

 };

 });

 */'use strict';

angular.module('aws.MetadataController').controller('SearchBarCtrl', function($scope, $modal, $aside, queryService) {

	/*
	 *
	 * Data Table Section
	 *
	 *
	 */
	queryService.queryObject.dataTable = {
		id : -1,
		title : ""
	};

	$scope.dataTableList = queryService.getDataTableList();

	console.log('hello');

	$scope.dataTableList = [];

	$scope.$watch(function() {
		return queryService.dataObject.dataTableList;
	}, function() {
		if (queryService.dataObject.hasOwnProperty("dataTableList")) {
			for (var i = 0; i < queryService.dataObject.dataTableList.length; i++) {
				dataTable = queryService.dataObject.dataTableList[i];
				$scope.dataTableList.push({
					id : dataTable.id,
					title : dataTable.title
				});
			}
		}
	});

	$scope.$watch('dataTable', function() {
		if ($scope.dataTable != undefined && $scope.dataTable != "") {
			var dataTable_s = angular.fromJson($scope.dataTable);
			queryService.queryObject.dataTable = dataTable_s;
			if (dataTable_s.hasOwnProperty('id') && dataTable_s.id != null) {
				queryService.getDataColumnsEntitiesFromId(dataTable_s.id);
			}

		}
		/*console.log(angular.toJson(queryService.queryObject));*/
	});

	/*
	 *
	 *
	 * Search Bar section
	 *
	 *
	 */

	$scope.scriptSelected = '';
	$scope.scriptList = []

	$scope.populateScriptsBar = function() {

		$scope.scriptList = queryService.getListOfScripts();

	}

	$scope.$watch('scriptSelected', function() {
		if ($scope.scriptSelected != undefined && $scope.scriptSelected != "") {
			queryService.queryObject.scriptSelected = $scope.scriptSelected;
			queryService.getScriptMetadata($scope.scriptSelected, true);
			$scope.show_script_settings();

		} else {
			$scope.scriptList = queryService.getListOfScripts();
		}
	});

	//*Building the Input controls from the script metadata
	// array of column selected
	$scope.selection = [];

	// array of filter types, can either be categorical (true) or continuous (false).
	$scope.filterType = [];

	// array of boolean values, true when the column it is possible to apply a filter on the column,
	// we basically check if the metadata has varType, min, max etc...
	$scope.show = [];

	// the slider options for the columns, min, max etc... Array of object, comes from the metadata
	$scope.sliderOptions = [];

	// the categorical options for the columns, Array of string Arrays, comes from metadata,
	// this is provided in the ng-repeat for the select2
	$scope.categoricalOptions = [];

	// array of filter values. This is used for the model and is sent to the queryObject, each element is either
	// [min, max] or ["a", "b", "c", etc...]
	$scope.filterValues = [];

	// array of booleans, either true of false if we want filtering enabled
	$scope.enabled = [];

	/*$scope.$watch(function() {
	 return queryService.queryObject.scriptSelected;
	 }, function() {
	 $scope.scriptSelected = queryService.queryObject.scriptSelected;
	 });
	 */
	$scope.inputs

	$scope.$watch(function() {
		return queryService.dataObject.scriptMetadata;
	}, function() {
		if (queryService.dataObject.hasOwnProperty("scriptMetadata")) {
			$scope.inputs = [];
			if (queryService.dataObject.scriptMetadata.hasOwnProperty("inputs")) {
				$scope.inputs = queryService.dataObject.scriptMetadata.inputs;
			}
		}
	});

	$scope.columns = [];

	$scope.$watch(function() {
		return queryService.queryObject.dataTable;
	}, function() {
		queryService.getDataColumnsEntitiesFromId(queryService.queryObject.dataTable.id, true);
		// reset these values when the data table changes
	});

	$scope.$watch(function() {
		return queryService.dataObject.columns;
	}, function() {
		if (queryService.dataObject.columns != undefined) {
			var columns = queryService.dataObject.columns;
			var orderedColumns = {};
			orderedColumns.all = [];
			for (var i = 0; i < columns.length; i++) {
				if (columns[i].publicMetadata.hasOwnProperty("aws_metadata")) {
					var column = columns[i];
					orderedColumns.all.push({
						id : column.id,
						title : column.publicMetadata.title
					});
					var aws_metadata = angular.fromJson(column.publicMetadata.aws_metadata);
					if (aws_metadata.hasOwnProperty("columnType")) {
						var key = aws_metadata.columnType;
						if (!orderedColumns.hasOwnProperty(key)) {
							orderedColumns[key] = [{
								id : column.id,
								title : column.publicMetadata.title
							}];
						} else {
							orderedColumns[key].push({
								id : column.id,
								title : column.publicMetadata.title
							});
						}
					}
				}
			}
			$scope.columns = orderedColumns;
		}
	});

	queryService.queryObject.FilteredColumnRequest = [];

	$scope.$watchCollection('selection', function(newVal, oldVal) {
		for (var i = 0; i < $scope.selection.length; i++) {
			if ($scope.selection != undefined) {
				if ($scope.selection[i] != undefined && $scope.selection[i] != "") {
					var selection = angular.fromJson($scope.selection[i]);
					if (queryService.queryObject.FilteredColumnRequest[i]) {
						queryService.queryObject.FilteredColumnRequest[i].column = selection;
					} else {
						queryService.queryObject.FilteredColumnRequest[i] = {
							column : selection
						};
					}
					var columnSelected = selection;
					var allColumns = queryService.dataObject.columns;
					var column;
					for (var j = 0; j < allColumns.length; j++) {
						if (columnSelected != undefined && columnSelected != "") {
							if (columnSelected.id == allColumns[j].id) {
								column = allColumns[j];
							}
						}
					}
					if (column != undefined) {
						if (column.publicMetadata.hasOwnProperty("aws_metadata")) {
							var metadata = angular.fromJson(column.publicMetadata.aws_metadata);
							if (metadata.hasOwnProperty("varType")) {
								if (metadata.varType == "continuous") {
									$scope.filterType[i] = "continuous";
									if (metadata.hasOwnProperty("varRange")) {
										$scope.show[i] = true;
										$scope.sliderOptions[i] = {
											range : true,
											min : metadata.varRange[0],
											max : metadata.varRange[1]
										};
									}
								} else if (metadata.varType == "categorical") {
									$scope.show[i] = true;
									$scope.filterType[i] = "categorical";
									if (metadata.hasOwnProperty("varValues")) {
										$scope.categoricalOptions[i] = metadata.varValues;
									}
								}
							}
						}
					}
				} // end if ""
			} // end if undefined
		}
	});

	$scope.$watchCollection('filterValues', function() {
		//console.log($scope.filterValues);
		for (var i = 0; i < $scope.filterValues.length; i++) {
			if (($scope.filterValues != undefined) && $scope.filterValues != "") {
				if ($scope.filterValues[i] != undefined && $scope.filterValues[i] != []) {

					var temp = $.map($scope.filterValues[i], function(item) {
						return angular.fromJson(item);
					});

					if (!queryService.queryObject.FilteredColumnRequest[i].hasOwnProperty("filters")) {
						queryService.queryObject.FilteredColumnRequest[i].filters = {};
					}

					if ($scope.filterType[i] == "categorical") {
						queryService.queryObject.FilteredColumnRequest[i].filters.filterValues = temp;
					} else if ($scope.filterType[i] == "continuous") {// continuous, we want arrays of ranges
						queryService.queryObject.FilteredColumnRequest[i].filters.filterValues = [temp];
					}
				}
			}
		}
	});

	$scope.$watchCollection('enabled', function() {
		if ($scope.enabled != undefined) {
			for (var i = 0; i < $scope.enabled.length; i++) {
				if (!queryService.queryObject.FilteredColumnRequest[i].hasOwnProperty("filters")) {
					queryService.queryObject.FilteredColumnRequest[i].filters = {};
				}

				if ($scope.enabled[i] != undefined) {
					queryService.queryObject.FilteredColumnRequest[i].filters.enabled = $scope.enabled[i];
				}

				//				console.log($scope.enabled);
				//				console.log($scope.filterType);
				//				console.log($scope.show);
			}
		}
	});

	$scope.$watchCollection(function() {
		return queryService.queryObject.FilteredColumnRequest;
	}, function() {
		if (queryService.queryObject.FilteredColumnRequest != undefined) {
			for (var i = 0; i < queryService.queryObject.FilteredColumnRequest.length; i++) {
				if (queryService.queryObject.FilteredColumnRequest[i] != undefined && queryService.queryObject.FilteredColumnRequest[i] != "") {
					if (queryService.queryObject.FilteredColumnRequest[i].hasOwnProperty("column")) {
						$scope.selection[i] = angular.toJson(queryService.queryObject.FilteredColumnRequest[i].column);
					}

					if (queryService.queryObject.FilteredColumnRequest[i].hasOwnProperty("filters")) {

						if (queryService.queryObject.FilteredColumnRequest[i].filters.hasOwnProperty("filterValues")) {

							$scope.show[i] = true;

							if (queryService.queryObject.FilteredColumnRequest[i].filters.filterValues[0].constructor == Object) {

								$scope.filterType[i] = "categorical";
								var temp = $.map(queryService.queryObject.FilteredColumnRequest[i].filters.filterValues, function(item) {
									return angular.toJson(item);
								});
								$scope.filterValues[i] = temp;

							} else if (queryService.queryObject.FilteredColumnRequest[i].filters.filterValues[0].constructor == Array) {
								$scope.filterType[i] = "continuous";
								$scope.filterValues[i] = queryService.queryObject.FilteredColumnRequest[i].filters.filterValues[0];
							}
						}
						if (queryService.queryObject.FilteredColumnRequest[i].filters.hasOwnProperty("enabled")) {
							$scope.enabled[i] = queryService.queryObject.FilteredColumnRequest[i].filters.enabled;
						}
					}
				}
			}
		}
	});

	/*
	 *
	 *Script setting Modal
	 *
	 */

	var script_setting_modal = $modal({
		scope : $scope,
		template : '../app/console/metadata/script-settings.tpl.html',
		show : false
	});

	$scope.show_script_settings = function() {

		// Show when some event occurs (use $promise property to ensure the template has been loaded)
		script_setting_modal.$promise.then(function() {
			script_setting_modal.show();
		})
	};

	$scope.set = function() {

		script_setting_modal.hide();
		console.log(queryService.queryObject);

	};

	/*
	 * Side Bar Control
	 *
	 *
	 var side_bar = $aside({
	 scope : $scope,
	 template : '../app/console/metadata/sidebar-template.html',
	 placement: "left",
	 animation: "am-slide-left",
	 show: false,
	 container: "body"

	 });

	 $scope.show_sidebar = function() {
	 side_bar.$promise.then(function() {
	 side_bar.show();
	 })
	 };*/

}).config(function($typeaheadProvider, $selectProvider) {
	angular.extend($typeaheadProvider.defaults, {
		animation : '', /*'am-flip-x',*/
		minLength : 2,
		limit : 99999,
		placeholder : 'Search Script',

	});
	angular.extend($selectProvider.defaults, {
		animation : '',
		sort : true,
		placeholder : 'Select a Datatable'
	});

}).directive('selectOnClick', function() {
	return {
		restrict : 'A',
		link : function(scope, element, attrs) {
			element.on('click', function() {
				this.select();
			});
		}
	};
});

angular.module('aws.MetadataController').controller("BarChartToolPanelCtrl", function($scope, queryService) {

	queryService.queryObject.BarChartTool = {
		enabled : false,
		heights : [],
		sort : "",
		label : ""
	};

	$scope.options = [];

	$scope.$watch(function() {
		return queryService.dataObject.scriptMetadata;
	}, function() {
		$scope.options = [];
		if (queryService.dataObject.hasOwnProperty("scriptMetadata")) {
			if (queryService.dataObject.scriptMetadata.hasOwnProperty("outputs")) {
				var outputs = queryService.dataObject.scriptMetadata.outputs;
				for (var i = 0; i < outputs.length; i++) {
					$scope.options.push(outputs[i].param);
				}
			}
		}
	});

	$scope.$watch('enabled', function() {
		if ($scope.enabled != undefined) {
			queryService.queryObject.BarChartTool.enabled = $scope.enabled;
		}
	});

	$scope.$watch(function() {
		return queryService.queryObject.BarChartTool.enabled;
	}, function() {
		$scope.enabled = queryService.queryObject.BarChartTool.enabled;
	});

	$scope.$watch('heights', function() {

		if ($scope.heights != undefined) {
			queryService.queryObject.BarChartTool.heights = $scope.heights;
		}

	});

	$scope.$watch(function() {
		return queryService.queryObject.BarChartTool.heights;
	}, function() {
		$scope.heights = queryService.queryObject.BarChartTool.heights;
	});

	$scope.$watch('sort', function() {
		if ($scope.sort != undefined) {
			queryService.queryObject.BarChartTool.sort = $scope.sort;
		}

	});

	$scope.$watch(function() {
		return queryService.queryObject.BarChartTool.sort;
	}, function() {
		$scope.sort = queryService.queryObject.BarChartTool.sort;
	});

	$scope.$watch('label', function() {
		if ($scope.label != undefined) {
			queryService.queryObject.BarChartTool.label = $scope.label;
		}

	});

	$scope.$watch(function() {
		return queryService.queryObject.BarChartTool.label;
	}, function() {
		$scope.label = queryService.queryObject.BarChartTool.label;
	});

});

angular.module('aws.MetadataController').controller('SideBarCtrl', function($scope, queryService) {
	$scope.aside = {
		title : 'Configure Visuals for Weave',
	};

	
	$scope.runQuery = function() {

        $scope.embedFlash();
		queryHandler = new aws.QueryHandler(queryService.queryObject);
		q1 = queryHandler;
		// doesn't work to remove weave instance -> $scope.weaveInstancePanel = "";
		// Probably need to put a broadcast event here? to tell weave instance panel to die.
		queryHandler.ComputationEngine.run("runScriptWithFilteredColumns", function(result) {

			queryHandler.resultDataSet = result.data[0].value;

			workOnData(q1, result.data[0].value);

		});

	}
	
	

});

angular.module('aws.MetadataController').controller('SideBarAccordianCtrl', function($scope, queryService) {

	queryService.queryObject.BarChartTool = {
		enabled : true,
		heights : [],
		sort : "",
		label : ""

	};

	$scope.groups = [{
		id : 'BarChartTool',
		template : 'barchart/BarChartTool.html',
		title : "Bar Chart Tool",
		content : "Dynamic Group Body - 1",
		checked : true
	}, {
		id : 'MapTool',
		template : 'maptool/MapTool.html',
		title : "Map Tool",
		content : "Dynamic Group Body - 2",
		checked : false
	}];

	$scope.$watch('enabled', function() {
		if ($scope.enabled != undefined) {
			queryService.queryObject.BarChartTool.enabled = $scope.enabled;
		}
	});

	$scope.getUrl = function(tmpl) {
		console.log(tmpl.id);
		return '../app/console/metadata/chart_controls/' + tmpl.template;
	}

	
});

/*angular.module('aws.MetadataController').controller('ChartController', function($scope) {

 $scope.getTemplateUrl = function() {
 return '../apps/console/metadata/chart_controls/' + $scope.group.type + '/' + $scope.group.id + '.html';

 }
 });*/

/*angular.module('aws.MetadataController').directive("chart-control", function() {
 return {
 replace:true,
 controller: 'ChartController',
 template : '<div ng-include="getTemplateUrl()"></div>'

 };
 });*/

/*angular.module('aws.MetadataController').config(function($asideProvider) {
 angular.extend($asideProvider.defaults, {
 animation: 'am-fadeAndSlideLeft',
 placement: 'left',

 });
 })*/

angular.module('aws.MetadataController').directive('startstop', function() {
	return {
		link : function(scope, element, attrs) {
			element.bind('click', function() {

				element.parent().parent().parent().find('span')[0].innerText = element[0].innerText;

			});
		}
	}
});

