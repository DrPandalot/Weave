/**
 * Generated by Apache Flex Cross-Compiler from weavejs\utils\Dictionary2D.as
 * weavejs.utils.Dictionary2D
 *
 * @fileoverview
 *
 * @suppress {checkTypes}
 */

goog.provide('weavejs.utils.Dictionary2D');

goog.require('weavejs.utils.Utils');



/**
 * @constructor
 * @param {boolean=} weakPrimaryKeys
 * @param {boolean=} weakSecondaryKeys
 * @param {Object=} defaultType
 */
weavejs.utils.Dictionary2D = function(weakPrimaryKeys, weakSecondaryKeys, defaultType) {
  weakPrimaryKeys = typeof weakPrimaryKeys !== 'undefined' ? weakPrimaryKeys : false;
  weakSecondaryKeys = typeof weakSecondaryKeys !== 'undefined' ? weakSecondaryKeys : false;
  defaultType = typeof defaultType !== 'undefined' ? defaultType : null;
  this.map = weakPrimaryKeys ? new weavejs.utils.Utils.WeakMap() : new weavejs.utils.Utils.Map();
  this.weak1 = weakPrimaryKeys;
  this.weak2 = weakSecondaryKeys;
  this.defaultType = defaultType;
};


/**
 * @export
 * @type {Object}
 */
weavejs.utils.Dictionary2D.prototype.map;


/**
 * @private
 * @type {boolean}
 */
weavejs.utils.Dictionary2D.prototype.weak1;


/**
 * @private
 * @type {boolean}
 */
weavejs.utils.Dictionary2D.prototype.weak2;


/**
 * @private
 * @type {Object}
 */
weavejs.utils.Dictionary2D.prototype.defaultType;


/**
 * @asparam key1 The first map key.
 * @asparam key2 The second map key.
 * @asreturn The value.
 * @export
 * @param {Object} key1
 * @param {Object} key2
 * @return {*}
 */
weavejs.utils.Dictionary2D.prototype.get = function(key1, key2) {
  var /** @type {*} */ value = undefined;
  var /** @type {*} */ map2 = this.map.get(key1);
  if (map2)
    value = map2.get(key2);
  if (value === undefined && this.defaultType) {
    value = new this.defaultType();
    this.set(key1, key2, value);
  }
  return value;
};


/**
 * This will add or replace an entry in the map.
 * @asparam key1 The first map key.
 * @asparam key2 The second map key.
 * @asparam value The value.
 * @export
 * @param {Object} key1
 * @param {Object} key2
 * @param {Object} value
 */
weavejs.utils.Dictionary2D.prototype.set = function(key1, key2, value) {
  var /** @type {Object} */ map2 = this.map.get(key1);
  if (map2 == null)
    this.map.set(key1, map2 = this.weak2 ? new weavejs.utils.Utils.WeakMap() : new weavejs.utils.Utils.Map());
  map2.set(key2, value);
};


/**
 * This removes all values associated with the given primary key.
 * @asparam key1 The first dictionary key.
 * @export
 * @param {Object} key1
 */
weavejs.utils.Dictionary2D.prototype.removeAllPrimary = function(key1) {
  this.map['delete'](key1);
};


/**
 * This removes all values associated with the given secondary key.
 * @asparam key2 The second dictionary key.
 * @asprivate
 * @export
 * @param {Object} key2
 */
weavejs.utils.Dictionary2D.prototype.removeAllSecondary = function(key2) {
  if (this.weak1)
    throw new Error("WeakMap cannot be iterated over");
  this._key2ToRemove = key2;
  this.map.forEach(org.apache.flex.utils.Language.closure(this.removeAllSecondary_each, this, 'removeAllSecondary_each'), this);
};


/**
 * @private
 * @type {*}
 */
weavejs.utils.Dictionary2D.prototype._key2ToRemove;


/**
 * @private
 * @param {*} map2
 * @param {*} key1
 */
weavejs.utils.Dictionary2D.prototype.removeAllSecondary_each = function(map2, key1) {
  map2['delete'](this._key2ToRemove);
};


/**
 * This removes a value associated with the given primary and secondary keys.
 * @asparam key1 The first dictionary key.
 * @asparam key2 The second dictionary key.
 * @asreturn The value that was in the dictionary.
 * @export
 * @param {Object} key1
 * @param {Object} key2
 * @return {*}
 */
weavejs.utils.Dictionary2D.prototype.remove = function(key1, key2) {
  var /** @type {*} */ value = undefined;
  var /** @type {*} */ map2 = this.map.get(key1);
  if (map2) {
    value = map2.get(key2);
    map2['delete'](key2);
    if (map2.size)
      return value;
    this.map['delete'](key1);
  }
  return value;
};


/**
 * Iterates over pairs of keys and corresponding values.
 * @asparam key1_key2_value A function which may return true to stop iterating.
 * @asparam thisArg The 'this' argument for the function.
 * @export
 * @param {Function} key1_key2_value
 * @param {Object} thisArg
 */
weavejs.utils.Dictionary2D.prototype.forEach = function(key1_key2_value, thisArg) {
  if (this.weak1 || this.weak2)
    throw new Error("WeakMap cannot be iterated over");
  this.forEach_fn = key1_key2_value;
  this.forEach_this = thisArg;
  this.map.forEach(org.apache.flex.utils.Language.closure(this.forEach1, this, 'forEach1'), this);
  this.forEach_fn = null;
  this.forEach_this = null;
  this.forEach_key1 = null;
  this.forEach_map2 = null;
};


/**
 * @private
 * @type {Function}
 */
weavejs.utils.Dictionary2D.prototype.forEach_fn;


/**
 * @private
 * @type {Object}
 */
weavejs.utils.Dictionary2D.prototype.forEach_this;


/**
 * @private
 * @type {Object}
 */
weavejs.utils.Dictionary2D.prototype.forEach_key1;


/**
 * @private
 * @type {Object}
 */
weavejs.utils.Dictionary2D.prototype.forEach_map2;


/**
 * @private
 * @param {*} map2
 * @param {*} key1
 */
weavejs.utils.Dictionary2D.prototype.forEach1 = function(map2, key1) {
  if (this.forEach_fn == null)
    return;
  this.forEach_key1 = key1;
  this.forEach_map2 = map2;
  map2.forEach(org.apache.flex.utils.Language.closure(this.forEach2, this, 'forEach2'), this);
};


/**
 * @private
 * @param {*} value
 * @param {*} key2
 */
weavejs.utils.Dictionary2D.prototype.forEach2 = function(value, key2) {
  if (this.forEach_fn != null && this.forEach_fn.call(this.forEach_this, this.forEach_key1, key2, value))
    this.forEach_fn = null;
};


/**
 * Metadata
 *
 * @type {Object.<string, Array.<Object>>}
 */
weavejs.utils.Dictionary2D.prototype.FLEXJS_CLASS_INFO = { names: [{ name: 'Dictionary2D', qName: 'weavejs.utils.Dictionary2D'}] };
