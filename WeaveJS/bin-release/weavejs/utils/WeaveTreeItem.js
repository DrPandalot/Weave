/**
 * Generated by Apache Flex Cross-Compiler from weavejs\utils\WeaveTreeItem.as
 * weavejs.utils.WeaveTreeItem
 *
 * @fileoverview
 *
 * @suppress {checkTypes}
 */

goog.provide('weavejs.utils.WeaveTreeItem');

goog.require('weavejs.Weave');
goog.require('weavejs.WeaveAPI');
goog.require('weavejs.api.core.ILinkableObject');
goog.require('weavejs.api.core.ILinkableVariable');



/**
 * Constructs a new WeaveTreeItem.
 * @asparam params An Object containing property values to set on the WeaveTreeItem.
 *               If params is a String, both <code>label</code> and <code>data</code> will be set to that String.
 * @constructor
 * @param {Object=} params
 */
weavejs.utils.WeaveTreeItem = function(params) {
  params = typeof params !== 'undefined' ? params : null;
  
  this._recursion = {};
  this._cache = {};
  this._counter = {};
  if (org.apache.flex.utils.Language.is(params, String)) {
    this.label = org.apache.flex.utils.Language.as(params, String);
    this.data = params;
  }
  else
    for (var /** @type {string} */ key in params)
      this[key] = params[key];
};


/**
 * @export
 * @const
 * @type {Function}
 */
weavejs.utils.WeaveTreeItem.createItems = function(WeaveTreeItem_implementation, items) {
  var /** @type {number} */ n = 0;
  while (n != items.length) {
    n = items.length;
    items = [].concat.apply(null, items);
  }
  return items.map(weavejs.utils.WeaveTreeItem._mapItems, WeaveTreeItem_implementation).filter(weavejs.utils.WeaveTreeItem._filterItemsRemoveNulls);
};


/**
 * @protected
 * @const
 * @type {Function}
 */
weavejs.utils.WeaveTreeItem._mapItems = function(item, i, a) {
  if (org.apache.flex.utils.Language.is(item, Class))
    return new item();
  if (org.apache.flex.utils.Language.is(item, String) || (item != null && Object(item).constructor == Object)) {
    var /** @type {Object} */ ItemClass = org.apache.flex.utils.Language.as(this, Class) || weavejs.utils.WeaveTreeItem;
    return new ItemClass(item);
  }
  return item;
};


/**
 * Filters out null items.
 * @private
 * @param {Object} item
 * @param {*} i
 * @param {*} a
 * @return {boolean}
 */
weavejs.utils.WeaveTreeItem._filterItemsRemoveNulls = function(item, i, a) {
  return item != null;
};


/**
 * @protected
 * @type {Object}
 */
weavejs.utils.WeaveTreeItem.prototype.childItemClass;


/**
 * @protected
 * @type {Object}
 */
weavejs.utils.WeaveTreeItem.prototype._recursion;


/**
 * @protected
 * @type {*}
 */
weavejs.utils.WeaveTreeItem.prototype._label = "";


/**
 * @protected
 * @type {*}
 */
weavejs.utils.WeaveTreeItem.prototype._children = null;


/**
 * @protected
 * @type {weavejs.api.core.ILinkableObject}
 */
weavejs.utils.WeaveTreeItem.prototype._dependency = null;


/**
 * @protected
 * @type {Object}
 */
weavejs.utils.WeaveTreeItem.prototype._cache;


/**
 * @protected
 * @type {Object}
 */
weavejs.utils.WeaveTreeItem.prototype._counter;


/**
 * Computes a Boolean value from various structures
 * @asparam param Either a Boolean, and Object like {not: param}, a Function, an ILinkableVariable, or an Array of those objects.
 * @asparam recursionName A name used to keep track of recursion.
 * @asreturn A Boolean value derived from the param, or the param itself if called recursively.
 * @protected
 * @param {*} param
 * @param {string} recursionName
 * @return {*}
 */
weavejs.utils.WeaveTreeItem.prototype.getBoolean = function(param, recursionName) {
  if (!this._recursion[recursionName]) {
    try {
      this._recursion[recursionName] = true;
      if (this.isSimpleObject(param, 'not'))
        param = !this.getBoolean(param['not'], "not_" + recursionName);
      if (this.isSimpleObject(param, 'or'))
        param = this.getBoolean(param['or'], "or_" + recursionName);
      if (org.apache.flex.utils.Language.is(param, Function))
        param = this.evalFunction(org.apache.flex.utils.Language.as(param, Function));
      if (org.apache.flex.utils.Language.is(param, weavejs.api.core.ILinkableVariable))
        param = org.apache.flex.utils.Language.as(param, weavejs.api.core.ILinkableVariable).getSessionState();
      if (org.apache.flex.utils.Language.is(param, Array)) {
        var /** @type {boolean} */ breakValue = recursionName.indexOf("or_") == 0;
        for (var foreachiter0 in param) 
        {
        param = param[foreachiter0];
        {
          param = this.getBoolean(param, "item_" + recursionName);
          if (param ? breakValue : !breakValue)
            break;
        }}
        
      }
      param = param ? true : false;
    } finally {
      this._recursion[recursionName] = false;
    }
  }
  return param;
};


/**
 * Checks if an object has a single specified property.
 * @protected
 * @param {*} object
 * @param {string} singlePropertyName
 * @return {boolean}
 */
weavejs.utils.WeaveTreeItem.prototype.isSimpleObject = function(object, singlePropertyName) {
  var /** @type {boolean} */ found = false;
  for (var /** @type {*} */ key in object) {
    if (found)
      return false;
    if (key !== singlePropertyName)
      return false;
    found = true;
  }
  return found;
};


/**
 * Gets a String value from a String or Function.
 * @asparam param Either a String or a Function.
 * @asparam recursionName A name used to keep track of recursion.
 * @asreturn A String value derived from the param, or the param itself if called recursively.
 * @protected
 * @param {*} param
 * @param {string} recursionName
 * @return {*}
 */
weavejs.utils.WeaveTreeItem.prototype.getString = function(param, recursionName) {
  if (!this._recursion[recursionName]) {
    try {
      this._recursion[recursionName] = true;
      if (org.apache.flex.utils.Language.is(param, Function))
        param = this.evalFunction(org.apache.flex.utils.Language.as(param, Function));
      else
        param = param || '';
    } finally {
      this._recursion[recursionName] = false;
    }
  }
  return param;
};


/**
 * Evaluates a function to get an Object or just returns the non-Function Object passed in.
 * @asparam param Either an Object or a Function.
 * @asparam recursionName A name used to keep track of recursion.
 * @asreturn An Object derived from the param, or the param itself if called recursively.
 * @protected
 * @param {*} param
 * @param {string} recursionName
 * @return {*}
 */
weavejs.utils.WeaveTreeItem.prototype.getObject = function(param, recursionName) {
  if (!this._recursion[recursionName]) {
    try {
      this._recursion[recursionName] = true;
      if (org.apache.flex.utils.Language.is(param, Function))
        param = this.evalFunction(org.apache.flex.utils.Language.as(param, Function));
    } finally {
      this._recursion[recursionName] = false;
    }
  }
  return param;
};


/**
 * First tries calling a function with no parameters.
 * If an ArgumentError is thrown, the function will called again, passing this WeaveTreeItem as the first parameter.
 * @protected
 * @param {Function} func
 * @return {*}
 */
weavejs.utils.WeaveTreeItem.prototype.evalFunction = function(func) {
  try {
    return func.call(this, this);
  } catch (e) {
    weavejs.Weave.error(e);
  }
};


/**
 * Checks if cached value is valid.
 * Always returns false if the source property is not set.
 * @asparam id A string identifying a property.
 * @asreturn true if the property value has been cached.
 * @protected
 * @param {string} id
 * @return {boolean}
 */
weavejs.utils.WeaveTreeItem.prototype.isCached = function(id) {
  if (this._dependency && weavejs.WeaveAPI.SessionManager.objectWasDisposed(this._dependency))
    this.dependency = null;
  return this._dependency && this._counter[id] === weavejs.WeaveAPI.SessionManager.getCallbackCollection(this._dependency).triggerCounter;
};


/**
 * Retrieves or updates a cached value for a property.
 * Does not cache the value if the source property is not set.
 * @asparam id A string identifying a property.
 * @asparam newValue Optional new value to cache for the property.
 * @asreturn The new or existing value for the property.
 * @protected
 * @param {string} id
 * @param {*=} newValue
 * @return {*}
 */
weavejs.utils.WeaveTreeItem.prototype.cache = function(id, newValue) {
  newValue = typeof newValue !== 'undefined' ? newValue : undefined;
  if (arguments.length == 1)
    return this._cache[id];
  if (this._dependency && weavejs.WeaveAPI.SessionManager.objectWasDisposed(this._dependency))
    this.dependency = null;
  if (this._dependency) {
    this._counter[id] = weavejs.WeaveAPI.SessionManager.getCallbackCollection(this._dependency).triggerCounter;
    this._cache[id] = newValue;
  }
  return newValue;
};


/**
 * @export
 * @type {Object}
 */
weavejs.utils.WeaveTreeItem.prototype.data = null;


Object.defineProperties(weavejs.utils.WeaveTreeItem.prototype, /** @lends {weavejs.utils.WeaveTreeItem.prototype} */ {
/** @export */
label: {
get: /** @this {weavejs.utils.WeaveTreeItem} */ function() {
  
/**
 * @const
 * @type {string}
 */
var id = 'label';
  if (this.isCached(id))
    return this._cache[id];
  var /** @type {string} */ str = this.getString(this._label, id);
  if (!str && org.apache.flex.utils.Language.is(this.data, String))
    str = org.apache.flex.utils.Language.as(this.data, String);
  return this.cache(id, str);
},
set: /** @this {weavejs.utils.WeaveTreeItem} */ function(value) {
  this._counter['label'] = undefined;
  this._label = value;
}},
/** @export */
children: {
get: /** @this {weavejs.utils.WeaveTreeItem} */ function() {
  
/**
 * @const
 * @type {string}
 */
var id = 'children';
  var /** @type {Array} */ items;
  if (this.isCached(id))
    items = this._cache[id];
  else
    items = org.apache.flex.utils.Language.as(this.getObject(this._children, id), Array);
  if (items) {
    var /** @type {number} */ iOut = 0;
    for (var /** @type {number} */ i = 0; i < items.length; i++) {
      var /** @type {Object} */ item = weavejs.utils.WeaveTreeItem._mapItems.call(this.childItemClass, items[i], i, items);
      if (item != null)
        items[iOut++] = item;
    }
    items.length = iOut;
  }
  return this.cache(id, items);
},
set: /** @this {weavejs.utils.WeaveTreeItem} */ function(value) {
  this._counter['children'] = undefined;
  this._children = value;
}},
/** @export */
dependency: {
get: /** @this {weavejs.utils.WeaveTreeItem} */ function() {
  if (this._dependency && weavejs.WeaveAPI.SessionManager.objectWasDisposed(this._dependency))
    this.dependency = null;
  return this._dependency;
},
set: /** @this {weavejs.utils.WeaveTreeItem} */ function(value) {
  if (this._dependency != value)
    this._counter = {};
  this._dependency = value;
}}}
);


/**
 * Metadata
 *
 * @type {Object.<string, Array.<Object>>}
 */
weavejs.utils.WeaveTreeItem.prototype.FLEXJS_CLASS_INFO = { names: [{ name: 'WeaveTreeItem', qName: 'weavejs.utils.WeaveTreeItem'}] };
