/**
 * Generated by Apache Flex Cross-Compiler from weavejs\core\GroupedCallbackEntry.as
 * weavejs.core.GroupedCallbackEntry
 *
 * @fileoverview
 *
 * @suppress {checkTypes}
 */

goog.provide('weavejs.core.GroupedCallbackEntry');

goog.require('weavejs.Weave');
goog.require('weavejs.core.CallbackEntry');
goog.require('weavejs.utils.Utils');
goog.require('weavejs.api.core.ICallbackCollection');



/**
 * Constructor
 * @constructor
 * @extends {weavejs.core.CallbackEntry}
 * @param {Function} groupedCallback
 */
weavejs.core.GroupedCallbackEntry = function(groupedCallback) {
  weavejs.core.GroupedCallbackEntry.base(this, 'constructor', [], groupedCallback);
  weavejs.Weave.bindAll(this);
  if (!weavejs.core.GroupedCallbackEntry._initialized)
    weavejs.core.GroupedCallbackEntry._initialized = weavejs.Weave.global.setInterval(weavejs.core.GroupedCallbackEntry._handleGroupedCallbacks, 0);
};
goog.inherits(weavejs.core.GroupedCallbackEntry, weavejs.core.CallbackEntry);


/**
 * @export
 * @param {weavejs.api.core.ICallbackCollection} callbackCollection
 * @param {Object} relevantContext
 * @param {Function} groupedCallback
 * @param {boolean} triggerCallbackNow
 */
weavejs.core.GroupedCallbackEntry.addGroupedCallback = function(callbackCollection, relevantContext, groupedCallback, triggerCallbackNow) {
  var /** @type {weavejs.core.GroupedCallbackEntry} */ entry = weavejs.core.GroupedCallbackEntry._entryLookup.get(groupedCallback);
  if (!entry)
    weavejs.core.GroupedCallbackEntry._entryLookup.set(groupedCallback, entry = new weavejs.core.GroupedCallbackEntry(groupedCallback));
  if (relevantContext == null)
    relevantContext = callbackCollection;
  org.apache.flex.utils.Language.as(entry.context, Array).push(relevantContext);
  callbackCollection.removeCallback(groupedCallback);
  callbackCollection.addImmediateCallback(null, org.apache.flex.utils.Language.closure(entry.trigger, entry, 'trigger'), triggerCallbackNow);
};


/**
 * @export
 * @param {weavejs.api.core.ICallbackCollection} callbackCollection
 * @param {Function} groupedCallback
 */
weavejs.core.GroupedCallbackEntry.removeGroupedCallback = function(callbackCollection, groupedCallback) {
  var /** @type {weavejs.core.GroupedCallbackEntry} */ entry = weavejs.core.GroupedCallbackEntry._entryLookup.get(groupedCallback);
  if (entry)
    callbackCollection.removeCallback(org.apache.flex.utils.Language.closure(entry.trigger, entry, 'trigger'));
};


/**
 * This function gets called once per frame and allows grouped callbacks to run.
 * @private
 */
weavejs.core.GroupedCallbackEntry._handleGroupedCallbacks = function() {
  var /** @type {number} */ i;
  var /** @type {weavejs.core.GroupedCallbackEntry} */ entry;
  weavejs.core.GroupedCallbackEntry._handlingGroupedCallbacks = true;
  for (i = 0; i < weavejs.core.GroupedCallbackEntry._triggeredEntries.length; i++) {
    entry = weavejs.core.GroupedCallbackEntry._triggeredEntries[i];
    entry.handleGroupedCallback();
  }
  weavejs.core.GroupedCallbackEntry._handlingRecursiveGroupedCallbacks = true;
  for (i = 0; i < weavejs.core.GroupedCallbackEntry._triggeredEntries.length; i++) {
    entry = weavejs.core.GroupedCallbackEntry._triggeredEntries[i];
    if (entry.triggeredAgain)
      entry.handleGroupedCallback();
  }
  weavejs.core.GroupedCallbackEntry._handlingRecursiveGroupedCallbacks = false;
  weavejs.core.GroupedCallbackEntry._handlingGroupedCallbacks = false;
  for (var foreachiter0 in weavejs.core.GroupedCallbackEntry._triggeredEntries) 
  {
  entry = weavejs.core.GroupedCallbackEntry._triggeredEntries[foreachiter0];
  
    entry.triggered = entry.triggeredAgain = false;}
  
  weavejs.core.GroupedCallbackEntry._triggeredEntries.length = 0;
};


/**
 * @private
 * @type {boolean}
 */
weavejs.core.GroupedCallbackEntry._handlingGroupedCallbacks = false;


/**
 * @private
 * @type {boolean}
 */
weavejs.core.GroupedCallbackEntry._handlingRecursiveGroupedCallbacks = false;


/**
 * @private
 * @type {boolean}
 */
weavejs.core.GroupedCallbackEntry._initialized = false;


/**
 * @private
 * @type {Object}
 */
weavejs.core.GroupedCallbackEntry._entryLookup = new weavejs.utils.Utils.Map();


/**
 * @private
 * @const
 * @type {Array}
 */
weavejs.core.GroupedCallbackEntry._triggeredEntries = [];


/**
 * @export
 * @type {boolean}
 */
weavejs.core.GroupedCallbackEntry.prototype.triggered = false;


/**
 * @export
 * @type {boolean}
 */
weavejs.core.GroupedCallbackEntry.prototype.triggeredAgain = false;


/**
 * Marks the entry to be handled later (unless already triggered this frame).
 * This also takes care of preventing recursion.
 * @export
 */
weavejs.core.GroupedCallbackEntry.prototype.trigger = function() {
  if (weavejs.core.GroupedCallbackEntry._handlingRecursiveGroupedCallbacks) {
    this.handleGroupedCallback();
  } else if (!this.triggered) {
    weavejs.core.GroupedCallbackEntry._triggeredEntries.push(this);
    this.triggered = true;
  } else if (weavejs.core.GroupedCallbackEntry._handlingGroupedCallbacks) {
    this.triggeredAgain = true;
  }
};


/**
 * Checks the context(s) before calling groupedCallback
 * @export
 */
weavejs.core.GroupedCallbackEntry.prototype.handleGroupedCallback = function() {
  if (!this.context)
    return;
  var /** @type {Array} */ allContexts = org.apache.flex.utils.Language.as(this.context, Array);
  for (var /** @type {number} */ i = 0; i < allContexts.length; i++)
    if (weavejs.Weave.objectWasDisposed(allContexts[i]))
      allContexts.splice(i--, 1);
  if (allContexts.length == 0) {
    this.dispose();
    weavejs.core.GroupedCallbackEntry._entryLookup['delete'](this.callback);
    return;
  }
  if (this.recursionCount == 0) {
    this.recursionCount++;
    this.callback.apply(allContexts[0]);
    this.recursionCount--;
  }
  this.triggeredAgain = false;
};


/**
 * Metadata
 *
 * @type {Object.<string, Array.<Object>>}
 */
weavejs.core.GroupedCallbackEntry.prototype.FLEXJS_CLASS_INFO = { names: [{ name: 'GroupedCallbackEntry', qName: 'weavejs.core.GroupedCallbackEntry'}] };
