/**
 * Generated by Apache Flex Cross-Compiler from weavejs\core\LinkableWatcher.as
 * weavejs.core.LinkableWatcher
 *
 * @fileoverview
 *
 * @suppress {checkTypes}
 */

goog.provide('weavejs.core.LinkableWatcher');

goog.require('weavejs.Weave');
goog.require('weavejs.WeaveAPI');
goog.require('weavejs.compiler.StandardLib');
goog.require('weavejs.core.SessionManager');
goog.require('weavejs.utils.Dictionary2D');
goog.require('weavejs.api.core.ICallbackCollection');
goog.require('weavejs.api.core.IDisposableObject');
goog.require('weavejs.api.core.ILinkableCompositeObject');
goog.require('weavejs.api.core.ILinkableDynamicObject');
goog.require('weavejs.api.core.ILinkableHashMap');
goog.require('weavejs.api.core.ILinkableObject');
goog.require('weavejs.api.core.ISessionManager');



/**
 * Instead of calling this constructor directly, consider using one of the global functions
 * newLinkableChild() or newDisposableChild() to make sure the watcher will get disposed automatically.
 * @asparam typeRestriction Optionally restricts which type of targets this watcher accepts.
 * @asparam immediateCallback A function to add as an immediate callback.
 * @asparam groupedCallback A function to add as a grouped callback.
 * @see weave.api.core.newLinkableChild()
 * @see weave.api.core.newDisposableChild()
 * @constructor
 * @implements {weavejs.api.core.ILinkableObject}
 * @implements {weavejs.api.core.IDisposableObject}
 * @param {Object=} typeRestriction
 * @param {Function=} immediateCallback
 * @param {Function=} groupedCallback
 */
weavejs.core.LinkableWatcher = function(typeRestriction, immediateCallback, groupedCallback) {
  typeRestriction = typeof typeRestriction !== 'undefined' ? typeRestriction : null;
  immediateCallback = typeof immediateCallback !== 'undefined' ? immediateCallback : null;
  groupedCallback = typeof groupedCallback !== 'undefined' ? groupedCallback : null;
  
  this._pathDependencies = new weavejs.utils.Dictionary2D();
  this._typeRestriction = typeRestriction;
  if (immediateCallback != null)
    weavejs.WeaveAPI.SessionManager.getCallbackCollection(this).addImmediateCallback(null, immediateCallback);
  if (groupedCallback != null)
    weavejs.WeaveAPI.SessionManager.getCallbackCollection(this).addGroupedCallback(null, groupedCallback);
};


/**
 * @protected
 * @type {Object}
 */
weavejs.core.LinkableWatcher.prototype._typeRestriction;


/**
 * @private
 * @type {weavejs.api.core.ILinkableObject}
 */
weavejs.core.LinkableWatcher.prototype._target;


/**
 * @private
 * @type {boolean}
 */
weavejs.core.LinkableWatcher.prototype._foundTarget = true;


/**
 * @protected
 * @type {Array}
 */
weavejs.core.LinkableWatcher.prototype._targetPath;


/**
 * @private
 * @type {weavejs.utils.Dictionary2D}
 */
weavejs.core.LinkableWatcher.prototype._pathDependencies;


/**
 * This sets the new target to be watched without resetting targetPath.
 * Callbacks will be triggered immediately if the new target is different from the old one.
 * @protected
 * @param {weavejs.api.core.ILinkableObject} newTarget
 */
weavejs.core.LinkableWatcher.prototype.internalSetTarget = function(newTarget) {
  if (this._foundTarget && this._typeRestriction)
    newTarget = org.apache.flex.utils.Language.as(org.apache.flex.utils.Language.as(newTarget, _typeRestriction), weavejs.api.core.ILinkableObject);
  if (this._target == newTarget)
    return;
  var /** @type {weavejs.core.SessionManager} */ sm = org.apache.flex.utils.Language.as(weavejs.WeaveAPI.SessionManager, weavejs.core.SessionManager);
  if (this._target) {
    sm.getCallbackCollection(this._target).removeCallback(org.apache.flex.utils.Language.closure(this._handleTargetTrigger, this, '_handleTargetTrigger'));
    sm.getCallbackCollection(this._target).removeCallback(org.apache.flex.utils.Language.closure(this._handleTargetDispose, this, '_handleTargetDispose'));
    if (sm.getLinkableOwner(this._target) == this)
      sm.disposeObject(this._target);
    else
      sm.unregisterLinkableChild(this, this._target);
  }
  this._target = newTarget;
  if (this._target) {
    sm.registerLinkableChild(this, this._target);
    sm.getCallbackCollection(this._target).removeCallback(org.apache.flex.utils.Language.closure(sm.getCallbackCollection(this).triggerCallbacks, sm.getCallbackCollection(this), 'triggerCallbacks'));
    sm.getCallbackCollection(this._target).addImmediateCallback(this, org.apache.flex.utils.Language.closure(this._handleTargetTrigger, this, '_handleTargetTrigger'), false, true);
    sm.getCallbackCollection(this._target).addDisposeCallback(this, org.apache.flex.utils.Language.closure(this._handleTargetDispose, this, '_handleTargetDispose'));
  }
  if (this._foundTarget)
    this._handleTargetTrigger();
};


/**
 * @private
 */
weavejs.core.LinkableWatcher.prototype._handleTargetTrigger = function() {
  if (this._foundTarget)
    weavejs.WeaveAPI.SessionManager.getCallbackCollection(this).triggerCallbacks();
  else
    this.handlePath();
};


/**
 * @private
 */
weavejs.core.LinkableWatcher.prototype._handleTargetDispose = function() {
  if (this._targetPath) {
    this.handlePath();
  } else {
    this._target = null;
    weavejs.WeaveAPI.SessionManager.getCallbackCollection(this).triggerCallbacks();
  }
};


/**
 * @private
 */
weavejs.core.LinkableWatcher.prototype.handlePath = function() {
  if (!this._targetPath) {
    this._foundTarget = true;
    this.internalSetTarget(null);
    return;
  }
  var /** @type {weavejs.api.core.ISessionManager} */ sm = weavejs.WeaveAPI.SessionManager;
  var /** @type {weavejs.api.core.ILinkableObject} */ node = weavejs.Weave.getRoot(this);
  var /** @type {Array} */ subPath = [];
  for (var foreachiter0 in this._targetPath) 
  {
  var name = this._targetPath[foreachiter0];
  {
    if (org.apache.flex.utils.Language.is(node, weavejs.api.core.ILinkableCompositeObject))
      this.addPathDependency(org.apache.flex.utils.Language.as(node, weavejs.api.core.ILinkableCompositeObject), name);
    subPath[0] = name;
    var /** @type {weavejs.api.core.ILinkableObject} */ child = sm.getObject(node, subPath);
    if (child) {
      node = child;
    } else {
      if (org.apache.flex.utils.Language.is(node, weavejs.api.core.ILinkableHashMap)) {
        node = org.apache.flex.utils.Language.as(node, weavejs.api.core.ILinkableHashMap).childListCallbacks;
      }
      if (org.apache.flex.utils.Language.is(node, weavejs.api.core.ILinkableDynamicObject)) {
        node = null;
      }
      var /** @type {boolean} */ lostTarget = this._foundTarget;
      this._foundTarget = false;
      this.internalSetTarget(node);
      if (lostTarget)
        sm.getCallbackCollection(this).triggerCallbacks();
      return;
    }
  }}
  
  this._foundTarget = !this._typeRestriction || org.apache.flex.utils.Language.is(node, _typeRestriction);
  this.internalSetTarget(node);
};


/**
 * @private
 * @param {weavejs.api.core.ILinkableCompositeObject} parent
 * @param {Object} pathElement
 */
weavejs.core.LinkableWatcher.prototype.addPathDependency = function(parent, pathElement) {
  var /** @type {weavejs.api.core.ILinkableHashMap} */ lhm = org.apache.flex.utils.Language.as(parent, weavejs.api.core.ILinkableHashMap);
  if (lhm && org.apache.flex.utils.Language.is(pathElement, String))
    return;
  var /** @type {weavejs.api.core.ILinkableDynamicObject} */ ldo = org.apache.flex.utils.Language.as(parent, weavejs.api.core.ILinkableDynamicObject);
  if (ldo)
    pathElement = null;
  if (!this._pathDependencies.get(parent, pathElement)) {
    var /** @type {weavejs.api.core.ILinkableObject} */ child = weavejs.WeaveAPI.SessionManager.getObject(parent, [pathElement]);
    this._pathDependencies.set(parent, pathElement, child);
    var /** @type {weavejs.api.core.ICallbackCollection} */ dependencyCallbacks = this.getDependencyCallbacks(parent);
    dependencyCallbacks.addImmediateCallback(this, org.apache.flex.utils.Language.closure(this.handlePathDependencies, this, 'handlePathDependencies'));
    dependencyCallbacks.addDisposeCallback(this, org.apache.flex.utils.Language.closure(this.handlePathDependencies, this, 'handlePathDependencies'));
  }
};


/**
 * @private
 * @param {weavejs.api.core.ILinkableObject} parent
 * @return {weavejs.api.core.ICallbackCollection}
 */
weavejs.core.LinkableWatcher.prototype.getDependencyCallbacks = function(parent) {
  var /** @type {weavejs.api.core.ILinkableHashMap} */ lhm = org.apache.flex.utils.Language.as(parent, weavejs.api.core.ILinkableHashMap);
  if (lhm)
    return lhm.childListCallbacks;
  return weavejs.WeaveAPI.SessionManager.getCallbackCollection(parent);
};


/**
 * @private
 */
weavejs.core.LinkableWatcher.prototype.handlePathDependencies = function() {
  this._pathDependencies.forEach(org.apache.flex.utils.Language.closure(this.handlePathDependencies_each, this, 'handlePathDependencies_each'), this);
};


/**
 * @private
 * @param {weavejs.api.core.ILinkableObject} parent
 * @param {string} pathElement
 * @param {weavejs.api.core.ILinkableObject} child
 * @return {boolean}
 */
weavejs.core.LinkableWatcher.prototype.handlePathDependencies_each = function(parent, pathElement, child) {
  var /** @type {weavejs.api.core.ISessionManager} */ sm = weavejs.WeaveAPI.SessionManager;
  var /** @type {weavejs.api.core.ILinkableObject} */ newChild = sm.getObject(parent, [pathElement]);
  if (sm.objectWasDisposed(parent) || child != newChild) {
    this.resetPathDependencies();
    this.handlePath();
    return true;
  }
  return false;
};


/**
 * @private
 */
weavejs.core.LinkableWatcher.prototype.resetPathDependencies = function() {
  this._pathDependencies.map.forEach(org.apache.flex.utils.Language.closure(this.resetPathDependencies_each, this, 'resetPathDependencies_each'), this);
  this._pathDependencies = new weavejs.utils.Dictionary2D();
};


/**
 * @private
 * @param {Object} map_child
 * @param {weavejs.api.core.ILinkableObject} parent
 */
weavejs.core.LinkableWatcher.prototype.resetPathDependencies_each = function(map_child, parent) {
  this.getDependencyCallbacks(parent).removeCallback(org.apache.flex.utils.Language.closure(this.handlePathDependencies, this, 'handlePathDependencies'));
};


/**
 * @inheritDoc
 * @export
 */
weavejs.core.LinkableWatcher.prototype.dispose = function() {
  this._targetPath = null;
  this._target = null;
};


Object.defineProperties(weavejs.core.LinkableWatcher.prototype, /** @lends {weavejs.core.LinkableWatcher.prototype} */ {
/** @export */
target: {
get: /** @this {weavejs.core.LinkableWatcher} */ function() {
  return this._foundTarget ? this._target : null;
},
set: /** @this {weavejs.core.LinkableWatcher} */ function(newTarget) {
  var /** @type {weavejs.api.core.ICallbackCollection} */ cc = weavejs.WeaveAPI.SessionManager.getCallbackCollection(this);
  cc.delayCallbacks();
  this.targetPath = null;
  this.internalSetTarget(newTarget);
  cc.resumeCallbacks();
}},
/** @export */
targetPath: {
get: /** @this {weavejs.core.LinkableWatcher} */ function() {
  return this._targetPath ? this._targetPath.concat() : null;
},
set: /** @this {weavejs.core.LinkableWatcher} */ function(path) {
  if (path && path.length == 0)
    path = null;
  if (weavejs.compiler.StandardLib.compare(this._targetPath, path) != 0) {
    var /** @type {weavejs.api.core.ICallbackCollection} */ cc = weavejs.WeaveAPI.SessionManager.getCallbackCollection(this);
    cc.delayCallbacks();
    this.resetPathDependencies();
    this._targetPath = path;
    this.handlePath();
    cc.triggerCallbacks();
    cc.resumeCallbacks();
  }
}}}
);


/**
 * Metadata
 *
 * @type {Object.<string, Array.<Object>>}
 */
weavejs.core.LinkableWatcher.prototype.FLEXJS_CLASS_INFO = { names: [{ name: 'LinkableWatcher', qName: 'weavejs.core.LinkableWatcher'}], interfaces: [weavejs.api.core.ILinkableObject, weavejs.api.core.IDisposableObject] };
