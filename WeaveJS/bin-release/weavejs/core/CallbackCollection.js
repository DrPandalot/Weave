/**
 * Generated by Apache Flex Cross-Compiler from weavejs\core\CallbackCollection.as
 * weavejs.core.CallbackCollection
 *
 * @fileoverview
 *
 * @suppress {checkTypes}
 */

goog.provide('weavejs.core.CallbackCollection');

goog.require('weavejs.Weave');
goog.require('weavejs.core.CallbackEntry');
goog.require('weavejs.core.GroupedCallbackEntry');
goog.require('weavejs.api.core.ICallbackCollection');
goog.require('weavejs.api.core.IDisposableObject');
goog.require('weavejs.api.core.ILinkableObject');



/**
 * @asparam preCallback An optional function to call before each immediate callback.
 *     If specified, the preCallback function will be called immediately before running each
 *     callback using the parameters passed to _runCallbacksImmediately(). This means if there
 *     are five callbacks added, preCallback() gets called five times whenever
 *     _runCallbacksImmediately() is called.  An example usage of this is to make sure a relevant
 *     variable is set to the appropriate value while each callback is running.  The preCallback
 *     function will not be called before grouped callbacks.
 * @constructor
 * @implements {weavejs.api.core.ICallbackCollection}
 * @implements {weavejs.api.core.IDisposableObject}
 * @param {Function=} preCallback
 */
weavejs.core.CallbackCollection = function(preCallback) {
  preCallback = typeof preCallback !== 'undefined' ? preCallback : null;
  
  this._triggerCounter = weavejs.core.CallbackCollection.DEFAULT_TRIGGER_COUNT;
  weavejs.Weave.bindAll(this);
  this._preCallback = preCallback;
  this._callbackEntries = [];
  this._disposeCallbackEntries = [];
};


/**
 * @export
 * @type {boolean}
 */
weavejs.core.CallbackCollection.debug = false;


/**
 * @export
 * @type {weavejs.api.core.ILinkableObject}
 */
weavejs.core.CallbackCollection.prototype._linkableObject;


/**
 * @private
 * @type {string}
 */
weavejs.core.CallbackCollection.prototype._lastTriggerStackTrace;


/**
 * @private
 * @type {Array}
 */
weavejs.core.CallbackCollection.prototype._oldEntries;


/**
 * @private
 * @type {Array}
 */
weavejs.core.CallbackCollection.prototype._callbackEntries;


/**
 * @protected
 * @type {Function}
 */
weavejs.core.CallbackCollection.prototype._preCallback = null;


/**
 * @private
 * @type {number}
 */
weavejs.core.CallbackCollection.prototype._delayCount = 0;


/**
 * @private
 * @type {boolean}
 */
weavejs.core.CallbackCollection.prototype._runCallbacksIsPending = false;


/**
 * @export
 * @const
 * @type {number}
 */
weavejs.core.CallbackCollection.DEFAULT_TRIGGER_COUNT = 1;


/**
 * @private
 * @type {number}
 */
weavejs.core.CallbackCollection.prototype._triggerCounter;


/**
 * @inheritDoc
 * @export
 * @param {Object} relevantContext
 * @param {Function} callback
 * @param {boolean=} runCallbackNow
 * @param {boolean=} alwaysCallLast
 */
weavejs.core.CallbackCollection.prototype.addImmediateCallback = function(relevantContext, callback, runCallbackNow, alwaysCallLast) {
  runCallbackNow = typeof runCallbackNow !== 'undefined' ? runCallbackNow : false;
  alwaysCallLast = typeof alwaysCallLast !== 'undefined' ? alwaysCallLast : false;
  if (callback == null)
    return;
  this.removeCallback(callback);
  var /** @type {weavejs.core.CallbackEntry} */ entry = new weavejs.core.CallbackEntry(relevantContext, callback);
  if (alwaysCallLast)
    entry.schedule = 1;
  this._callbackEntries.push(entry);
  if (runCallbackNow) {
    entry.recursionCount++;
    callback.apply(relevantContext);
    entry.recursionCount--;
  }
};


/**
 * @inheritDoc
 * @export
 */
weavejs.core.CallbackCollection.prototype.triggerCallbacks = function() {
  if (weavejs.core.CallbackCollection.debug)
    this._lastTriggerStackTrace = new Error(weavejs.core.CallbackCollection.STACK_TRACE_TRIGGER).getStackTrace();
  if (this._delayCount > 0) {
    this._triggerCounter++;
    this._runCallbacksIsPending = true;
    return;
  }
  this._runCallbacksImmediately();
};


/**
 * @private
 * @type {boolean}
 */
weavejs.core.CallbackCollection.prototype._runCallbacksCompleted;


/**
 * This function runs callbacks immediately, ignoring any delays.
 * The preCallback function will be called with the specified preCallbackParams arguments.
 * @asparam preCallbackParams The arguments to pass to the preCallback function given in the constructor.
 * @protected
 * @param {...} preCallbackParams
 */
weavejs.core.CallbackCollection.prototype._runCallbacksImmediately = function(preCallbackParams) {
  preCallbackParams = Array.prototype.slice.call(arguments, 0);
  this._triggerCounter++;
  this._runCallbacksIsPending = false;
  this._runCallbacksCompleted = false;
  for (var /** @type {number} */ schedule = 0; schedule < 2; schedule++) {
    for (var /** @type {number} */ i = 0; i < this._callbackEntries.length; i++) {
      if (this._runCallbacksCompleted && this._preCallback == null)
        break;
      var /** @type {weavejs.core.CallbackEntry} */ entry = this._callbackEntries[i];
      if (entry.schedule != schedule)
        continue;
      var /** @type {boolean} */ shouldRemoveEntry;
      if (entry.callback == null)
        shouldRemoveEntry = true;
      else if (org.apache.flex.utils.Language.is(entry.context, weavejs.core.CallbackCollection))
        shouldRemoveEntry = org.apache.flex.utils.Language.as(entry.context, weavejs.core.CallbackCollection)._wasDisposed;
      else
        shouldRemoveEntry = weavejs.Weave.objectWasDisposed(entry.context);
      if (shouldRemoveEntry) {
        entry.dispose();
        var /** @type {Array} */ removed = this._callbackEntries.splice(i--, 1);
        if (weavejs.core.CallbackCollection.debug)
          this._oldEntries = this._oldEntries ? this._oldEntries.concat(removed) : removed;
        continue;
      }
      if (entry.recursionCount == 0 || this._preCallback != null) {
        entry.recursionCount++;
        if (this._preCallback != null)
          this._preCallback.apply(this, preCallbackParams);
        entry.callback.apply(entry.context);
        entry.recursionCount--;
      }
    }
  }
  this._runCallbacksCompleted = true;
};


/**
 * @inheritDoc
 * @export
 * @param {Function} callback
 */
weavejs.core.CallbackCollection.prototype.removeCallback = function(callback) {
  weavejs.core.GroupedCallbackEntry.removeGroupedCallback(this, callback);
  for (var /** @type {number} */ outerLoop = 0; outerLoop < 2; outerLoop++) {
    var /** @type {Array} */ entries = outerLoop == 0 ? this._callbackEntries : this._disposeCallbackEntries;
    for (var /** @type {number} */ index = 0; index < entries.length; index++) {
      var /** @type {weavejs.core.CallbackEntry} */ entry = entries[index];
      if (entry != null && callback === entry.callback) {
        entry.dispose();
      }
    }
  }
};


/**
 * @inheritDoc
 * @export
 */
weavejs.core.CallbackCollection.prototype.delayCallbacks = function() {
  this._delayCount++;
};


/**
 * @inheritDoc
 * @export
 */
weavejs.core.CallbackCollection.prototype.resumeCallbacks = function() {
  if (this._delayCount > 0)
    this._delayCount--;
  if (this._delayCount == 0 && this._runCallbacksIsPending)
    this.triggerCallbacks();
};


/**
 * @inheritDoc
 * @export
 * @param {Object} relevantContext
 * @param {Function} callback
 */
weavejs.core.CallbackCollection.prototype.addDisposeCallback = function(relevantContext, callback) {
  for (var foreachiter0 in this._disposeCallbackEntries) 
  {
  var entry = this._disposeCallbackEntries[foreachiter0];
  
    if (entry.callback === callback)
      return;}
  
  this._disposeCallbackEntries.push(new weavejs.core.CallbackEntry(relevantContext, callback));
};


/**
 * @private
 * @type {Array}
 */
weavejs.core.CallbackCollection.prototype._disposeCallbackEntries;


/**
 * @inheritDoc
 * @export
 */
weavejs.core.CallbackCollection.prototype.dispose = function() {
  if (weavejs.core.CallbackCollection.debug)
    this._oldEntries = this._oldEntries ? this._oldEntries.concat(this._callbackEntries) : this._callbackEntries.concat();
  this._callbackEntries.length = 0;
  this._wasDisposed = true;
  while (this._disposeCallbackEntries.length) {
    var /** @type {weavejs.core.CallbackEntry} */ entry = this._disposeCallbackEntries.shift();
    if (entry.callback != null && !weavejs.Weave.objectWasDisposed(entry.context))
      entry.callback.apply(entry.context);
  }
};


/**
 * @private
 * @type {boolean}
 */
weavejs.core.CallbackCollection.prototype._wasDisposed = false;


/**
 * @inheritDoc
 * @export
 * @param {Object} relevantContext
 * @param {Function} groupedCallback
 * @param {boolean=} triggerCallbackNow
 */
weavejs.core.CallbackCollection.prototype.addGroupedCallback = function(relevantContext, groupedCallback, triggerCallbackNow) {
  triggerCallbackNow = typeof triggerCallbackNow !== 'undefined' ? triggerCallbackNow : false;
  weavejs.core.GroupedCallbackEntry.addGroupedCallback(this, relevantContext, groupedCallback, triggerCallbackNow);
};


/**
 * @export
 * @const
 * @type {string}
 */
weavejs.core.CallbackCollection.STACK_TRACE_TRIGGER = "This is the stack trace from when the callbacks were last triggered.";


Object.defineProperties(weavejs.core.CallbackCollection.prototype, /** @lends {weavejs.core.CallbackCollection.prototype} */ {
/** @export */
triggerCounter: {
get: /** @this {weavejs.core.CallbackCollection} */ function() {
  return this._triggerCounter;
}},
/** @export */
callbacksAreDelayed: {
get: /** @this {weavejs.core.CallbackCollection} */ function() {
  return this._delayCount > 0;
}},
/** @export */
wasDisposed: {
get: /** @this {weavejs.core.CallbackCollection} */ function() {
  return this._wasDisposed;
}}}
);


/**
 * Metadata
 *
 * @type {Object.<string, Array.<Object>>}
 */
weavejs.core.CallbackCollection.prototype.FLEXJS_CLASS_INFO = { names: [{ name: 'CallbackCollection', qName: 'weavejs.core.CallbackCollection'}], interfaces: [weavejs.api.core.ICallbackCollection, weavejs.api.core.IDisposableObject] };
