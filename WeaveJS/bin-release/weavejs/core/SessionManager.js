/**
 * Generated by Apache Flex Cross-Compiler from weavejs\core\SessionManager.as
 * weavejs.core.SessionManager
 *
 * @fileoverview
 *
 * @suppress {checkTypes}
 */

goog.provide('weavejs.core.SessionManager');

goog.require('weavejs.Weave');
goog.require('weavejs.WeaveAPI');
goog.require('weavejs.api.core.DynamicState');
goog.require('weavejs.compiler.StandardLib');
goog.require('weavejs.core.CallbackCollection');
goog.require('weavejs.utils.Dictionary2D');
goog.require('weavejs.utils.Utils');
goog.require('weavejs.utils.WeaveTreeItem');
goog.require('weavejs.api.core.ICallbackCollection');
goog.require('weavejs.api.core.IDisposableObject');
goog.require('weavejs.api.core.ILinkableCompositeObject');
goog.require('weavejs.api.core.ILinkableDynamicObject');
goog.require('weavejs.api.core.ILinkableHashMap');
goog.require('weavejs.api.core.ILinkableObject');
goog.require('weavejs.api.core.ILinkableObjectWithBusyStatus');
goog.require('weavejs.api.core.ILinkableObjectWithNewProperties');
goog.require('weavejs.api.core.ILinkableVariable');
goog.require('weavejs.api.core.ISessionManager');



/**
 * @constructor
 * @implements {weavejs.api.core.ISessionManager}
 */
weavejs.core.SessionManager = function() {
  this.map_child_owner = new weavejs.utils.Utils.WeakMap();
  this.d2d_owner_child = new weavejs.utils.Dictionary2D(true, true);
  this.d2d_child_parent = new weavejs.utils.Dictionary2D(true, true);
  this.d2d_parent_child = new weavejs.utils.Dictionary2D(true, true);
  this._getSessionStateIgnoreList = new weavejs.utils.Utils.WeakMap();
  this.map_ILinkableObject_ICallbackCollection = new weavejs.utils.Utils.WeakMap();
  this.map_disposed = new weavejs.utils.Utils.WeakMap();
  this.map_taskStackTrace = new weavejs.utils.Utils.Map();
  this.d2d_owner_task = new weavejs.utils.Dictionary2D(true, false);
  this.d2d_task_owner = new weavejs.utils.Dictionary2D(false, true);
  this.map_busyTraversal = new weavejs.utils.Utils.WeakMap();
  this.array_busyTraversal = [];
  this.map_unbusyTriggerCounts = new weavejs.utils.Utils.WeakMap();
  this.map_unbusyStackTraces = new weavejs.utils.Utils.WeakMap();
  this._treeCallbacks = new weavejs.core.CallbackCollection();
  this._treeCache = new weavejs.utils.Dictionary2D(true, false, weavejs.utils.WeaveTreeItem);
  this.d2d_lhs_rhs_setState = new weavejs.utils.Dictionary2D(true, true);
};


/**
 * @export
 * @type {boolean}
 */
weavejs.core.SessionManager.prototype.debugBusyTasks = false;


/**
 * @inheritDoc
 * @export
 * @param {Object} linkableParent
 * @param {Object} linkableChildType
 * @param {Function=} callback
 * @param {boolean=} useGroupedCallback
 * @return {*}
 */
weavejs.core.SessionManager.prototype.newLinkableChild = function(linkableParent, linkableChildType, callback, useGroupedCallback) {
  callback = typeof callback !== 'undefined' ? callback : null;
  useGroupedCallback = typeof useGroupedCallback !== 'undefined' ? useGroupedCallback : false;
  if (!weavejs.Weave.isLinkable(linkableParent))
    throw new Error("newLinkableChild(): Parent does not implement ILinkableObject.");
  if (!linkableChildType)
    throw new Error("newLinkableChild(): Child type parameter cannot be null.");
  if (!weavejs.Weave.isLinkable(linkableChildType.prototype)) {
    var /** @type {string} */ childQName = weavejs.Weave.className(linkableChildType);
    if (weavejs.Weave.getDefinition(childQName))
      throw new Error("newLinkableChild(): Child class does not implement ILinkableObject.");
    else
      throw new Error("newLinkableChild(): Child class inaccessible via qualified class name: " + childQName);
  }
  var /** @type {weavejs.api.core.ILinkableObject} */ linkableChild = org.apache.flex.utils.Language.as(new linkableChildType(), weavejs.api.core.ILinkableObject);
  return this.registerLinkableChild(linkableParent, linkableChild, callback, useGroupedCallback);
};


/**
 * @inheritDoc
 * @export
 * @param {Object} linkableParent
 * @param {weavejs.api.core.ILinkableObject} linkableChild
 * @param {Function=} callback
 * @param {boolean=} useGroupedCallback
 * @return {*}
 */
weavejs.core.SessionManager.prototype.registerLinkableChild = function(linkableParent, linkableChild, callback, useGroupedCallback) {
  callback = typeof callback !== 'undefined' ? callback : null;
  useGroupedCallback = typeof useGroupedCallback !== 'undefined' ? useGroupedCallback : false;
  if (!weavejs.Weave.isLinkable(linkableParent))
    throw new Error("registerLinkableChild(): Parent does not implement ILinkableObject.");
  if (!weavejs.Weave.isLinkable(linkableChild))
    throw new Error("registerLinkableChild(): Child parameter cannot be null.");
  if (linkableParent == linkableChild)
    throw new Error("registerLinkableChild(): Invalid attempt to register sessioned property having itself as its parent");
  if (callback != null) {
    var /** @type {weavejs.api.core.ICallbackCollection} */ cc = this.getCallbackCollection(linkableChild);
    if (useGroupedCallback)
      cc.addGroupedCallback(org.apache.flex.utils.Language.as(linkableParent, weavejs.api.core.ILinkableObject), callback);
    else
      cc.addImmediateCallback(org.apache.flex.utils.Language.as(linkableParent, weavejs.api.core.ILinkableObject), callback);
  }
  this.registerDisposableChild(linkableParent, linkableChild);
  if (this.d2d_child_parent.get(linkableChild, linkableParent) === undefined) {
    this.d2d_child_parent.set(linkableChild, linkableParent, true);
    this.d2d_parent_child.set(linkableParent, linkableChild, true);
    var /** @type {weavejs.api.core.ICallbackCollection} */ parentCC = this.getCallbackCollection(org.apache.flex.utils.Language.as(linkableParent, weavejs.api.core.ILinkableObject));
    this.getCallbackCollection(linkableChild).addImmediateCallback(linkableParent, org.apache.flex.utils.Language.closure(parentCC.triggerCallbacks, parentCC, 'triggerCallbacks'), false, true);
  }
  this._treeCallbacks.triggerCallbacks();
  return linkableChild;
};


/**
 * @inheritDoc
 * @export
 * @param {Object} disposableParent
 * @param {Object} disposableChildType
 * @return {*}
 */
weavejs.core.SessionManager.prototype.newDisposableChild = function(disposableParent, disposableChildType) {
  return this.registerDisposableChild(disposableParent, new disposableChildType());
};


/**
 * @inheritDoc
 * @export
 * @param {Object} disposableParent
 * @param {Object} disposableChild
 * @return {*}
 */
weavejs.core.SessionManager.prototype.registerDisposableChild = function(disposableParent, disposableChild) {
  if (!disposableParent)
    throw new Error("registerDisposableChild(): Parent parameter cannot be null.");
  if (!disposableChild)
    throw new Error("registerDisposableChild(): Child parameter cannot be null.");
  if (!this.map_child_owner.has(disposableChild)) {
    this.map_child_owner.set(disposableChild, disposableParent);
    this.d2d_owner_child.set(disposableParent, disposableChild, true);
  }
  return disposableChild;
};


/**
 * Use this function with care.  This will remove child objects from the session state of a parent and
 * stop the child from triggering the parent callbacks.
 * @asparam parent A parent that the specified child objects were previously registered with.
 * @asparam child The child object to unregister from the parent.
 * @export
 * @param {weavejs.api.core.ILinkableObject} parent
 * @param {weavejs.api.core.ILinkableObject} child
 */
weavejs.core.SessionManager.prototype.unregisterLinkableChild = function(parent, child) {
  if (!parent)
    throw new Error("unregisterLinkableChild(): Parent parameter cannot be null.");
  if (!child)
    throw new Error("unregisterLinkableChild(): Child parameter cannot be null.");
  this.d2d_child_parent.remove(child, parent);
  this.d2d_parent_child.remove(parent, child);
  this.getCallbackCollection(child).removeCallback(org.apache.flex.utils.Language.closure(this.getCallbackCollection(parent).triggerCallbacks, this.getCallbackCollection(parent), 'triggerCallbacks'));
  this._treeCallbacks.triggerCallbacks();
};


/**
 * This function will add or remove child objects from the session state of a parent.  Use this function
 * with care because the child will no longer be "sessioned."  The child objects will continue to trigger the
 * callbacks of the parent object, but they will no longer be considered a part of the parent's session state.
 * If you are not careful, this will break certain functionalities that depend on the session state of the parent.
 * @asparam parent A parent that the specified child objects were previously registered with.
 * @asparam child The child object to remove from the session state of the parent.
 * @export
 * @param {weavejs.api.core.ILinkableObject} parent
 * @param {weavejs.api.core.ILinkableObject} child
 */
weavejs.core.SessionManager.prototype.excludeLinkableChildFromSessionState = function(parent, child) {
  if (parent == null || child == null) {
    weavejs.Weave.error("SessionManager.excludeLinkableChildFromSessionState(): Parameters to this function cannot be null.");
    return;
  }
  if (this.d2d_child_parent[child] !== undefined && this.d2d_child_parent[child][parent])
    this.d2d_child_parent[child][parent] = false;
  if (this.d2d_parent_child.get(parent, child))
    this.d2d_parent_child.set(parent, child, false);
};


/**
 * @asprivate
 * This function will return all the child objects that have been registered with a parent.
 * @asparam parent A parent object to get the registered children of.
 * @asreturn An Array containing a list of linkable objects that have been registered as children of the specified parent.
 *         This list includes all children that have been registered, even those that do not appear in the session state.
 * @private
 * @param {weavejs.api.core.ILinkableObject} parent
 * @return {Array}
 */
weavejs.core.SessionManager.prototype._getRegisteredChildren = function(parent) {
  var /** @type {Array} */ result = [];
  var /** @type {Object} */ map_child = this.d2d_parent_child.map.get(parent);
  if (map_child)
    for (var foreachiter0 in weavejs.Weave.toArray(map_child.keys())) 
    {
    var child = weavejs.Weave.toArray(map_child.keys())[foreachiter0];
    
      result.push(child);}
    
  return result;
};


/**
 * @inheritDoc
 * @export
 * @param {weavejs.api.core.ILinkableObject} child
 * @return {weavejs.api.core.ILinkableObject}
 */
weavejs.core.SessionManager.prototype.getLinkableOwner = function(child) {
  return this.map_child_owner.get(child);
};


/**
 * @private
 * @type {weavejs.utils.Dictionary2D}
 */
weavejs.core.SessionManager.prototype._treeCache;


/**
 * @asparam root The linkable object to be placed at the root node of the tree.
 * @asparam objectName The label for the root node.
 * @asreturn A tree of nodes with the properties "data", "label", "children"
 * @export
 * @param {weavejs.api.core.ILinkableObject} root
 * @param {string} objectName
 * @return {weavejs.utils.WeaveTreeItem}
 */
weavejs.core.SessionManager.prototype.getSessionStateTree = function(root, objectName) {
  var /** @type {weavejs.utils.WeaveTreeItem} */ treeItem = this._treeCache.get(root, objectName);
  if (!treeItem.data) {
    treeItem.data = root;
    treeItem.children = org.apache.flex.utils.Language.closure(this.getTreeItemChildren, this, 'getTreeItemChildren');
    var /** @type {weavejs.api.core.ILinkableHashMap} */ lhm = org.apache.flex.utils.Language.as(root, weavejs.api.core.ILinkableHashMap);
    treeItem.dependency = lhm ? lhm.childListCallbacks : root;
  }
  if (objectName)
    treeItem.label = objectName;
  return treeItem;
};


/**
 * @private
 * @param {weavejs.utils.WeaveTreeItem} treeItem
 * @return {Array}
 */
weavejs.core.SessionManager.prototype.getTreeItemChildren = function(treeItem) {
  var /** @type {weavejs.api.core.ILinkableObject} */ object = org.apache.flex.utils.Language.as(treeItem.data, weavejs.api.core.ILinkableObject);
  var /** @type {Array} */ children = [];
  var /** @type {Array} */ names;
  var /** @type {weavejs.api.core.ILinkableObject} */ childObject;
  var /** @type {Object} */ ignoreList = new weavejs.utils.Utils.WeakMap();
  var /** @type {weavejs.api.core.ILinkableHashMap} */ lhm = org.apache.flex.utils.Language.as(object, weavejs.api.core.ILinkableHashMap);
  if (lhm) {
    names = lhm.getNames();
    var /** @type {Array} */ childObjects = lhm.getObjects();
    for (var /** @type {number} */ i = 0; i < names.length; i++) {
      childObject = childObjects[i];
      if (this.d2d_child_parent[childObject] && this.d2d_child_parent[childObject][lhm]) {
        if (ignoreList.has(childObject))
          continue;
        ignoreList.set(childObject, true);
        children.push(this.getSessionStateTree(childObject, names[i]));
      }
    }
  } else {
    var /** @type {weavejs.api.core.ILinkableDynamicObject} */ ldo = org.apache.flex.utils.Language.as(object, weavejs.api.core.ILinkableDynamicObject);
    if (ldo) {
      names = ldo.targetPath ? null : [null];
    } else if (object) {
      names = this.getLinkablePropertyNames(object);
      var /** @type {string} */ className = weavejs.Weave.className(object);
    }
    for (var foreachiter1 in names) 
    {
    var name = names[foreachiter1];
    {
      if (ldo)
        childObject = ldo.internalObject;
      else
        childObject = object[name];
      if (!childObject)
        continue;
      if (this.d2d_child_parent[childObject] && this.d2d_child_parent[childObject][object]) {
        if (ignoreList.has(childObject))
          continue;
        ignoreList.set(childObject, true);
        children.push(this.getSessionStateTree(childObject, name));
      }
    }}
    
  }
  if (children.length == 0)
    children = null;
  return children;
};


/**
 * Adds a grouped callback that will be triggered when the session state tree changes.
 * USE WITH CARE. The groupedCallback should not run computationally-expensive code.
 * @export
 * @param {Object} relevantContext
 * @param {Function} groupedCallback
 * @param {boolean=} triggerCallbackNow
 */
weavejs.core.SessionManager.prototype.addTreeCallback = function(relevantContext, groupedCallback, triggerCallbackNow) {
  triggerCallbackNow = typeof triggerCallbackNow !== 'undefined' ? triggerCallbackNow : false;
  this._treeCallbacks.addGroupedCallback(relevantContext, groupedCallback, triggerCallbackNow);
};


/**
 * @export
 * @param {Function} groupedCallback
 */
weavejs.core.SessionManager.prototype.removeTreeCallback = function(groupedCallback) {
  this._treeCallbacks.removeCallback(groupedCallback);
};


/**
 * @private
 * @type {weavejs.core.CallbackCollection}
 */
weavejs.core.SessionManager.prototype._treeCallbacks;


/**
 * @inheritDoc
 * @export
 * @param {weavejs.api.core.ILinkableObject} source
 * @param {weavejs.api.core.ILinkableObject} destination
 */
weavejs.core.SessionManager.prototype.copySessionState = function(source, destination) {
  var /** @type {Object} */ sessionState = this.getSessionState(source);
  this.setSessionState(destination, sessionState, true);
};


/**
 * @private
 * @param {Object} base
 * @param {Object} diff
 * @return {Object}
 */
weavejs.core.SessionManager.prototype.applyDiffForLinkableVariable = function(base, diff) {
  if (base === null || diff === null || typeof(base) != 'object' || typeof(diff) != 'object' || org.apache.flex.utils.Language.is(diff, Array))
    return diff;
  for (var /** @type {string} */ key in diff) {
    var /** @type {*} */ value = diff[key];
    if (value === undefined)
      delete base[key];
    else
      base[key] = this.applyDiffForLinkableVariable(base[key], value);
  }
  return base;
};


/**
 * @inheritDoc
 * @export
 * @param {weavejs.api.core.ILinkableObject} linkableObject
 * @param {Object} newState
 * @param {boolean=} removeMissingDynamicObjects
 */
weavejs.core.SessionManager.prototype.setSessionState = function(linkableObject, newState, removeMissingDynamicObjects) {
  removeMissingDynamicObjects = typeof removeMissingDynamicObjects !== 'undefined' ? removeMissingDynamicObjects : true;
  if (linkableObject == null) {
    weavejs.Weave.error("SessionManager.setSessionState(): linkableObject cannot be null.");
    return;
  }
  var /** @type {weavejs.api.core.ILinkableVariable} */ lv = org.apache.flex.utils.Language.as(linkableObject, weavejs.api.core.ILinkableVariable);
  if (lv) {
    if (removeMissingDynamicObjects == false && newState && weavejs.Weave.className(newState) == 'Object') {
      lv.setSessionState(this.applyDiffForLinkableVariable(this.copyObject(lv.getSessionState()), newState));
    } else {
      lv.setSessionState(newState);
    }
    return;
  }
  var /** @type {weavejs.api.core.ILinkableCompositeObject} */ lco = org.apache.flex.utils.Language.as(linkableObject, weavejs.api.core.ILinkableCompositeObject);
  if (lco) {
    if (org.apache.flex.utils.Language.is(newState, String))
      newState = [newState];
    if (newState != null && !org.apache.flex.utils.Language.is(newState, Array)) {
      var /** @type {Array} */ array = [];
      for (var /** @type {string} */ key in newState)
        array.push(weavejs.api.core.DynamicState.create(key, null, newState[key]));
      newState = array;
    }
    lco.setSessionState(org.apache.flex.utils.Language.as(newState, Array), removeMissingDynamicObjects);
    return;
  }
  if (newState == null)
    return;
  var /** @type {weavejs.api.core.ICallbackCollection} */ objectCC = this.getCallbackCollection(linkableObject);
  objectCC.delayCallbacks();
  var /** @type {string} */ name;
  var /** @type {Array} */ propertyNames = this.getLinkablePropertyNames(linkableObject);
  var /** @type {boolean} */ foundMissingProperty = false;
  for (var foreachiter2 in propertyNames) 
  {
  name = propertyNames[foreachiter2];
  {
    if (!newState.hasOwnProperty(name)) {
      if (removeMissingDynamicObjects && org.apache.flex.utils.Language.is(linkableObject, weavejs.api.core.ILinkableObjectWithNewProperties))
        foundMissingProperty = true;
      continue;
    }
    var /** @type {weavejs.api.core.ILinkableObject} */ property = null;
    try {
      property = org.apache.flex.utils.Language.as(linkableObject[name], weavejs.api.core.ILinkableObject);
    } catch (e) {
      weavejs.Weave.error('SessionManager.setSessionState(): Unable to get property "' + name + '" of class "' + weavejs.Weave.className(linkableObject) + '"', e);
    }
    if (property == null)
      continue;
    if (!this.d2d_child_parent.get(property, linkableObject))
      continue;
    this.setSessionState(property, newState[name], removeMissingDynamicObjects);
  }}
  
  if (org.apache.flex.utils.Language.is(linkableObject, weavejs.api.core.ILinkableObjectWithNewProperties))
    for (name in newState)
      org.apache.flex.utils.Language.as(linkableObject, weavejs.api.core.ILinkableObjectWithNewProperties).handleMissingSessionStateProperty(newState, name);
  if (foundMissingProperty)
    for (var foreachiter3 in propertyNames) 
    {
    name = propertyNames[foreachiter3];
    
      if (!newState.hasOwnProperty(name))
        org.apache.flex.utils.Language.as(linkableObject, weavejs.api.core.ILinkableObjectWithNewProperties).handleMissingSessionStateProperty(newState, name);}
    
  objectCC.resumeCallbacks();
};


/**
 * @private
 * @type {Object}
 */
weavejs.core.SessionManager.prototype._getSessionStateIgnoreList;


/**
 * @inheritDoc
 * @export
 * @param {weavejs.api.core.ILinkableObject} linkableObject
 * @return {Object}
 */
weavejs.core.SessionManager.prototype.getSessionState = function(linkableObject) {
  if (linkableObject == null) {
    weavejs.Weave.error("SessionManager.getSessionState(): linkableObject cannot be null.");
    return null;
  }
  var /** @type {Object} */ result = null;
  if (org.apache.flex.utils.Language.is(linkableObject, weavejs.api.core.ILinkableVariable)) {
    result = org.apache.flex.utils.Language.as(linkableObject, weavejs.api.core.ILinkableVariable).getSessionState();
  } else if (org.apache.flex.utils.Language.is(linkableObject, weavejs.api.core.ILinkableCompositeObject)) {
    result = org.apache.flex.utils.Language.as(linkableObject, weavejs.api.core.ILinkableCompositeObject).getSessionState();
  } else {
    var /** @type {Object} */ proto = Object['getPrototypeOf'](linkableObject);
    var /** @type {Array} */ propertyNames = Object['getOwnPropertyNames'](proto);
    var /** @type {Array} */ resultNames = [];
    var /** @type {Array} */ resultProperties = [];
    var /** @type {weavejs.api.core.ILinkableObject} */ property = null;
    var /** @type {number} */ i;
    for (var foreachiter4 in propertyNames) 
    {
    var name = propertyNames[foreachiter4];
    {
      try {
        property = null;
        property = org.apache.flex.utils.Language.as(linkableObject[name], weavejs.api.core.ILinkableObject);
      } catch (e) {
        weavejs.Weave.error('Unable to get property "' + name + '" of class "' + weavejs.Weave.className(linkableObject) + '"');
      }
      if (property != null && !this._getSessionStateIgnoreList.get(property)) {
        if (!this.d2d_child_parent.get(property, linkableObject))
          continue;
        this._getSessionStateIgnoreList.set(property, true);
        resultNames.push(name);
        resultProperties.push(property);
      } else {
      }
    }}
    
    if (resultNames.length > 0) {
      result = new Object();
      for (i = 0; i < resultNames.length; i++) {
        var /** @type {Object} */ value = this.getSessionState(resultProperties[i]);
        property = org.apache.flex.utils.Language.as(resultProperties[i], weavejs.api.core.ILinkableObject);
        if (value == null && !org.apache.flex.utils.Language.is(property, weavejs.api.core.ILinkableVariable) && !org.apache.flex.utils.Language.is(property, weavejs.api.core.ILinkableCompositeObject))
          continue;
        result[resultNames[i]] = value;
      }
    }
  }
  this._getSessionStateIgnoreList.set(linkableObject, undefined);
  return result;
};


/**
 * This function gets a list of sessioned property names so accessor functions for non-sessioned properties do not have to be called.
 * @asparam linkableObject An object containing sessioned properties.
 * @asparam filtered If set to true, filters out excluded properties.
 * @asreturn An Array containing the names of the sessioned properties of that object class.
 * @export
 * @param {weavejs.api.core.ILinkableObject} linkableObject
 * @param {boolean=} filtered
 * @return {Array}
 */
weavejs.core.SessionManager.prototype.getLinkablePropertyNames = function(linkableObject, filtered) {
  filtered = typeof filtered !== 'undefined' ? filtered : false;
  if (linkableObject == null) {
    weavejs.Weave.error("SessionManager.getLinkablePropertyNames(): linkableObject cannot be null.");
    return [];
  }
  var /** @type {string} */ name;
  var /** @type {Object} */ proto = Object['getPrototypeOf'](linkableObject);
  var /** @type {Array} */ propertyNames = Object['getOwnPropertyNames'](proto);
  var /** @type {Array} */ linkableNames = [];
  for (var foreachiter5 in propertyNames) 
  {
  name = propertyNames[foreachiter5];
  {
    var /** @type {Object} */ property = linkableObject[name];
    if (weavejs.Weave.isLinkable(property))
      if (!filtered || this.d2d_child_parent.get(property, linkableObject))
        linkableNames.push(name);
  }}
  
  return linkableNames;
};


/**
 * @private
 * @type {Object}
 */
weavejs.core.SessionManager.prototype.map_child_owner;


/**
 * @private
 * @type {weavejs.utils.Dictionary2D}
 */
weavejs.core.SessionManager.prototype.d2d_owner_child;


/**
 * @private
 * @type {weavejs.utils.Dictionary2D}
 */
weavejs.core.SessionManager.prototype.d2d_child_parent;


/**
 * @private
 * @type {weavejs.utils.Dictionary2D}
 */
weavejs.core.SessionManager.prototype.d2d_parent_child;


/**
 * @inheritDoc
 * @export
 * @param {weavejs.api.core.ILinkableObject} root
 * @param {Object=} filter
 * @return {Array}
 */
weavejs.core.SessionManager.prototype.getLinkableDescendants = function(root, filter) {
  filter = typeof filter !== 'undefined' ? filter : null;
  var /** @type {Array} */ result = [];
  if (root)
    this.internalGetDescendants(result, root, filter, new weavejs.utils.Utils.WeakMap(), Number.MAX_VALUE);
  if (result.length > 0 && result[0] == root)
    result.shift();
  return result;
};


/**
 * @private
 * @param {Array} output
 * @param {weavejs.api.core.ILinkableObject} root
 * @param {Object} filter
 * @param {Object} ignoreList
 * @param {number} depth
 */
weavejs.core.SessionManager.prototype.internalGetDescendants = function(output, root, filter, ignoreList, depth) {
  if (root == null || ignoreList.has(root))
    return;
  ignoreList.set(root, true);
  if (filter == null || org.apache.flex.utils.Language.is(root, filter))
    output.push(root);
  if (--depth <= 0)
    return;
  var /** @type {Object} */ map_child = this.d2d_parent_child.map.get(root);
  if (map_child)
    for (var foreachiter6 in weavejs.Weave.toArray(map_child.keys())) 
    {
    var child = weavejs.Weave.toArray(map_child.keys())[foreachiter6];
    
      this.internalGetDescendants(output, child, filter, ignoreList, depth);}
    
};


/**
 * @private
 * @type {Object}
 */
weavejs.core.SessionManager.prototype.map_taskStackTrace;


/**
 * @private
 * @type {weavejs.utils.Dictionary2D}
 */
weavejs.core.SessionManager.prototype.d2d_owner_task;


/**
 * @private
 * @type {weavejs.utils.Dictionary2D}
 */
weavejs.core.SessionManager.prototype.d2d_task_owner;


/**
 * @private
 * @type {Object}
 */
weavejs.core.SessionManager.prototype.map_busyTraversal;


/**
 * @private
 * @type {Array}
 */
weavejs.core.SessionManager.prototype.array_busyTraversal;


/**
 * @private
 * @type {Object}
 */
weavejs.core.SessionManager.prototype.map_unbusyTriggerCounts;


/**
 * @private
 * @type {Object}
 */
weavejs.core.SessionManager.prototype.map_unbusyStackTraces;


/**
 * @private
 * @param {weavejs.api.core.ILinkableObject} disposedObject
 */
weavejs.core.SessionManager.prototype.disposeBusyTaskPointers = function(disposedObject) {
  this.d2d_owner_task.removeAllPrimary(disposedObject);
  this.d2d_task_owner.removeAllSecondary(disposedObject);
};


/**
 * @inheritDoc
 * @export
 * @param {Object} taskToken
 * @param {weavejs.api.core.ILinkableObject} busyObject
 */
weavejs.core.SessionManager.prototype.assignBusyTask = function(taskToken, busyObject) {
  if (this.debugBusyTasks)
    this.map_taskStackTrace.set(taskToken, new Error("Stack trace when task was last assigned"));
  if (this.d2d_task_owner.get(taskToken, busyObject))
    return;
  if (org.apache.flex.utils.Language.is(taskToken, weavejs.Weave.global.Promise) && !weavejs.WeaveAPI.ProgressIndicator.hasTask(taskToken)) {
    var /** @type {Function} */ unassign = this.unassignBusyTask.bind(this, taskToken);
    taskToken.then(unassign, unassign);
  }
  this.d2d_owner_task.set(busyObject, taskToken, true);
  this.d2d_task_owner.set(taskToken, busyObject, true);
};


/**
 * @inheritDoc
 * @export
 * @param {Object} taskToken
 */
weavejs.core.SessionManager.prototype.unassignBusyTask = function(taskToken) {
  if (weavejs.WeaveAPI.ProgressIndicator.hasTask(taskToken)) {
    weavejs.WeaveAPI.ProgressIndicator.removeTask(taskToken);
    return;
  }
  var /** @type {Object} */ map_owner = this.d2d_task_owner.map.get(taskToken);
  if (!map_owner)
    return;
  this.d2d_task_owner.removeAllPrimary(taskToken);
  for (var foreachiter7 in weavejs.Weave.toArray(map_owner.keys())) 
  {
  var owner = weavejs.Weave.toArray(map_owner.keys())[foreachiter7];
  {
    this.d2d_owner_task.remove(owner, taskToken);
    if (this.d2d_owner_task.map.get(owner).size)
      continue;
    this.map_unbusyTriggerCounts.set(owner, this.getCallbackCollection(owner).triggerCounter);
    weavejs.WeaveAPI.StageUtils.startTask(null, org.apache.flex.utils.Language.closure(this.unbusyTrigger, this, 'unbusyTrigger'), weavejs.WeaveAPI.TASK_PRIORITY_IMMEDIATE);
    if (this.debugBusyTasks) {
      var /** @type {Error} */ stackTrace = new Error("Stack trace when last task was unassigned");
      this.map_unbusyStackTraces.set(owner, {assigned:this.map_taskStackTrace.get(taskToken), unassigned:stackTrace, token:taskToken});
    }
  }}
  
};


/**
 * Called the frame after an owner's last busy task is unassigned.
 * Triggers callbacks if they have not been triggered since then.
 * @private
 * @param {number} stopTime
 * @return {number}
 */
weavejs.core.SessionManager.prototype.unbusyTrigger = function(stopTime) {
  while (this.map_unbusyTriggerCounts.size) {
    if (weavejs.Weave.getTimer() > stopTime)
      return 0;
    for (var foreachiter8 in weavejs.Weave.toArray(this.map_unbusyTriggerCounts.entries())) 
    {
    var owner_triggerCount = weavejs.Weave.toArray(this.map_unbusyTriggerCounts.entries())[foreachiter8];
    {
      var /** @type {weavejs.api.core.ILinkableObject} */ owner = owner_triggerCount[0];
      var /** @type {number} */ triggerCount = owner_triggerCount[1];
      this.map_unbusyTriggerCounts['delete'](owner);
      var /** @type {weavejs.api.core.ICallbackCollection} */ cc = this.getCallbackCollection(owner);
      if (org.apache.flex.utils.Language.is(cc, weavejs.core.CallbackCollection) ? org.apache.flex.utils.Language.as(cc, weavejs.core.CallbackCollection).wasDisposed : this.objectWasDisposed(owner))
        continue;
      if (cc.triggerCounter != triggerCount)
        continue;
      if (this.linkableObjectIsBusy(owner))
        continue;
      if (this.debugBusyTasks) {
        var /** @type {Object} */ stackTraces = this.map_unbusyStackTraces.get(owner);
        weavejs.Weave.log('Triggering callbacks because they have not triggered since owner has becoming unbusy:', owner);
        weavejs.Weave.log(stackTraces.assigned);
        weavejs.Weave.log(stackTraces.unassigned);
      }
      cc.triggerCallbacks();
    }}
    
  }
  return 1;
};


/**
 * @inheritDoc
 * @export
 * @param {weavejs.api.core.ILinkableObject} linkableObject
 * @return {boolean}
 */
weavejs.core.SessionManager.prototype.linkableObjectIsBusy = function(linkableObject) {
  var /** @type {boolean} */ busy = false;
  this.array_busyTraversal[this.array_busyTraversal.length] = linkableObject;
  this.map_busyTraversal.set(linkableObject, true);
  outerLoop : for (var /** @type {number} */ i = 0; i < this.array_busyTraversal.length; i++) {
    linkableObject = org.apache.flex.utils.Language.as(this.array_busyTraversal[i], weavejs.api.core.ILinkableObject);
    if (org.apache.flex.utils.Language.is(linkableObject, weavejs.api.core.ILinkableObjectWithBusyStatus)) {
      if (org.apache.flex.utils.Language.as(linkableObject, weavejs.api.core.ILinkableObjectWithBusyStatus).isBusy()) {
        busy = true;
        break;
      }
      continue;
    }
    var /** @type {Object} */ map_task = this.d2d_owner_task.map.get(linkableObject);
    if (map_task) {
      for (var foreachiter9 in weavejs.Weave.toArray(map_task.keys())) 
      {
      var task = weavejs.Weave.toArray(map_task.keys())[foreachiter9];
      {
        if (this.debugBusyTasks) {
          var /** @type {string} */ stackTrace = this.map_taskStackTrace.get(task);
        }
        busy = true;
        break outerLoop;
      }}
      
    }
    var /** @type {Object} */ map_child = this.d2d_parent_child.map.get(linkableObject);
    if (map_child) {
      for (var foreachiter10 in weavejs.Weave.toArray(map_child.keys())) 
      {
      var child = weavejs.Weave.toArray(map_child.keys())[foreachiter10];
      {
        if (!this.map_busyTraversal.get(child)) {
          this.array_busyTraversal[this.array_busyTraversal.length] = child;
          this.map_busyTraversal.set(child, true);
        }
      }}
      
    }
  };
for (var foreachiter11 in this.array_busyTraversal) 
{
linkableObject = this.array_busyTraversal[foreachiter11];

  this.map_busyTraversal.set(linkableObject, false);}

this.array_busyTraversal.length = 0;
return busy;
};


/**
 * @private
 * @type {Object}
 */
weavejs.core.SessionManager.prototype.map_ILinkableObject_ICallbackCollection;


/**
 * @inheritDoc
 * @export
 * @param {weavejs.api.core.ILinkableObject} linkableObject
 * @return {weavejs.api.core.ICallbackCollection}
 */
weavejs.core.SessionManager.prototype.getCallbackCollection = function(linkableObject) {
if (linkableObject == null)
  return null;
if (org.apache.flex.utils.Language.is(linkableObject, weavejs.api.core.ICallbackCollection))
  return org.apache.flex.utils.Language.as(linkableObject, weavejs.api.core.ICallbackCollection);
var /** @type {weavejs.api.core.ICallbackCollection} */ objectCC = this.map_ILinkableObject_ICallbackCollection.get(linkableObject);
if (objectCC == null) {
  objectCC = this.registerDisposableChild(linkableObject, new weavejs.core.CallbackCollection());
  if (weavejs.core.CallbackCollection.debug)
    org.apache.flex.utils.Language.as(objectCC, weavejs.core.CallbackCollection)._linkableObject = linkableObject;
  this.map_ILinkableObject_ICallbackCollection.set(linkableObject, objectCC);
}
return objectCC;
};


/**
 * @inheritDoc
 * @export
 * @param {Object} object
 * @return {boolean}
 */
weavejs.core.SessionManager.prototype.objectWasDisposed = function(object) {
if (object == null)
  return false;
if (org.apache.flex.utils.Language.is(object, weavejs.api.core.ILinkableObject)) {
  var /** @type {weavejs.core.CallbackCollection} */ cc = org.apache.flex.utils.Language.as(this.getCallbackCollection(org.apache.flex.utils.Language.as(object, weavejs.api.core.ILinkableObject)), weavejs.core.CallbackCollection);
  if (cc)
    return cc.wasDisposed;
}
return this.map_disposed.has(object);
};


/**
 * @private
 * @type {Object}
 */
weavejs.core.SessionManager.prototype.map_disposed;


/**
 * @private
 * @const
 * @type {string}
 */
weavejs.core.SessionManager.DISPOSE = "dispose";


/**
 * @inheritDoc
 * @export
 * @param {Object} object
 */
weavejs.core.SessionManager.prototype.disposeObject = function(object) {
var self = this;
if (object != null && !this.map_disposed.get(object)) {
  this.map_disposed.set(object, true);
  this.disposeBusyTaskPointers(org.apache.flex.utils.Language.as(object, weavejs.api.core.ILinkableObject));
  try {
    if (org.apache.flex.utils.Language.is(object, weavejs.api.core.IDisposableObject)) {
      org.apache.flex.utils.Language.as(object, weavejs.api.core.IDisposableObject).dispose();
    } else if (object.hasOwnProperty(weavejs.core.SessionManager.DISPOSE)) {
      object[weavejs.core.SessionManager.DISPOSE]();
    }
  } catch (e) {
    weavejs.Weave.error(e);
  }
  var /** @type {weavejs.api.core.ILinkableObject} */ linkableObject = org.apache.flex.utils.Language.as(object, weavejs.api.core.ILinkableObject);
  if (linkableObject) {
    var /** @type {weavejs.api.core.ICallbackCollection} */ objectCC = this.getCallbackCollection(linkableObject);
    if (objectCC != linkableObject)
      this.disposeObject(objectCC);
  }
  if (this.d2d_child_parent[object] !== undefined) {
    for (var /** @type {Object} */ parent in this.d2d_child_parent[object])
      if (this.d2d_parent_child[parent] !== undefined)
        delete this.d2d_parent_child[parent][object];
    delete this.d2d_child_parent[object];
  }
  var /** @type {Object} */ owner = this.map_child_owner.get(object);
  if (owner != null) {
    this.d2d_owner_child.remove(owner, object);
    this.map_child_owner['delete'](object);
  }
  var /** @type {Object} */ map_child = this.d2d_owner_child.map.get(object);
  if (map_child) {
    this.d2d_owner_child.removeAllPrimary(object);
    this.d2d_parent_child.removeAllPrimary(object);
    for (var foreachiter12 in weavejs.Weave.toArray(map_child.keys())) 
    {
    var child = weavejs.Weave.toArray(map_child.keys())[foreachiter12];
    
      this.disposeObject(child);}
    
  }
  if (weavejs.core.CallbackCollection.debug && linkableObject) {
    var /** @type {Error} */ error = new Error("This is the stack trace from when the object was previously disposed.");
    objectCC.addImmediateCallback(null, function() {
      self.debugDisposedObject(linkableObject, error);
    });
  }
  this._treeCallbacks.triggerCallbacks();
}
};


/**
 * @private
 * @param {weavejs.api.core.ILinkableObject} disposedObject
 * @param {Error} disposedError
 */
weavejs.core.SessionManager.prototype.debugDisposedObject = function(disposedObject, disposedError) {
var /** @type {*} */ obj;
var /** @type {Array} */ ownerPath = [];
do {
  obj = this.getLinkableOwner(obj);
  if (obj)
    ownerPath.unshift(obj);
} while (obj);
var /** @type {Array} */ parents = [];
for (obj in this.d2d_child_parent[disposedObject]) {
  parents.push(obj);
}
var /** @type {Array} */ children = [];
for (obj in this.d2d_parent_child[disposedObject]) {
  children.push(obj);
}
var /** @type {Object} */ sessionState = this.getSessionState(disposedObject);
var /** @type {string} */ msg = "WARNING: An object triggered callbacks after previously being disposed.";
if (org.apache.flex.utils.Language.is(disposedObject, weavejs.api.core.ILinkableVariable))
  msg += ' (value = ' + org.apache.flex.utils.Language.as(disposedObject, weavejs.api.core.ILinkableVariable).getSessionState() + ')';
weavejs.Weave.error(disposedError);
weavejs.Weave.error(msg, disposedObject);
};


/**
 * @asprivate
 * For debugging only.
 * @export
 * @param {weavejs.api.core.ILinkableObject} root
 * @param {weavejs.api.core.ILinkableObject} descendant
 * @return {Array}
 */
weavejs.core.SessionManager.prototype._getPaths = function(root, descendant) {
var /** @type {Array} */ results = [];
for (var /** @type {Object} */ parent in this.d2d_child_parent[descendant]) {
  var /** @type {string} */ name = this._getChildPropertyName(org.apache.flex.utils.Language.as(parent, weavejs.api.core.ILinkableObject), descendant);
  if (name != null) {
    var /** @type {Array} */ result = this._getPaths(root, org.apache.flex.utils.Language.as(parent, weavejs.api.core.ILinkableObject));
    if (result != null) {
      result.push(name);
      results.push(result);
    }
  }
}
if (results.length == 0)
  return root == null ? results : null;
return results;
};


/**
 * internal use only
 * @private
 * @param {weavejs.api.core.ILinkableObject} parent
 * @param {weavejs.api.core.ILinkableObject} child
 * @return {string}
 */
weavejs.core.SessionManager.prototype._getChildPropertyName = function(parent, child) {
if (org.apache.flex.utils.Language.is(parent, weavejs.api.core.ILinkableHashMap))
  return org.apache.flex.utils.Language.as(parent, weavejs.api.core.ILinkableHashMap).getName(child);
for (var foreachiter13 in this.getLinkablePropertyNames(parent)) 
{
var name = this.getLinkablePropertyNames(parent)[foreachiter13];

  if (parent[name] == child)
    return name;}

return null;
};


/**
 * @inheritDoc
 * @export
 * @param {weavejs.api.core.ILinkableObject} root
 * @param {weavejs.api.core.ILinkableObject} descendant
 * @return {Array}
 */
weavejs.core.SessionManager.prototype.getPath = function(root, descendant) {
if (!descendant)
  return null;
var /** @type {weavejs.utils.WeaveTreeItem} */ tree = this.getSessionStateTree(root, null);
var /** @type {Array} */ path = this._getPath(tree, descendant);
return path;
};


/**
 * @private
 * @param {weavejs.utils.WeaveTreeItem} tree
 * @param {weavejs.api.core.ILinkableObject} descendant
 * @return {Array}
 */
weavejs.core.SessionManager.prototype._getPath = function(tree, descendant) {
if (tree.data == descendant)
  return [];
for (var foreachiter14 in tree.children) 
{
var child = tree.children[foreachiter14];
{
  var /** @type {Array} */ path = this._getPath(child, descendant);
  if (path) {
    path.unshift(child.label);
    return path;
  }
}}

return null;
};


/**
 * @inheritDoc
 * @export
 * @param {weavejs.api.core.ILinkableObject} root
 * @param {Array} path
 * @return {weavejs.api.core.ILinkableObject}
 */
weavejs.core.SessionManager.prototype.getObject = function(root, path) {
var /** @type {weavejs.api.core.ILinkableObject} */ object = root;
for (var foreachiter15 in path) 
{
var propertyName = path[foreachiter15];
{
  if (object == null || this.map_disposed.get(object))
    return null;
  if (org.apache.flex.utils.Language.is(object, weavejs.api.core.ILinkableHashMap)) {
    if (org.apache.flex.utils.Language.is(propertyName, Number))
      object = org.apache.flex.utils.Language.as(object, weavejs.api.core.ILinkableHashMap).getObjects()[propertyName];
    else
      object = org.apache.flex.utils.Language.as(object, weavejs.api.core.ILinkableHashMap).getObject(String(propertyName));
  } else if (org.apache.flex.utils.Language.is(object, weavejs.api.core.ILinkableDynamicObject)) {
    object = org.apache.flex.utils.Language.as(object, weavejs.api.core.ILinkableDynamicObject).internalObject;
  } else {
    if (this.getLinkablePropertyNames(object).indexOf(propertyName) < 0)
      return null;
    object = org.apache.flex.utils.Language.as(object[propertyName], weavejs.api.core.ILinkableObject);
  }
}}

return this.map_disposed.get(object) ? null : object;
};


/**
 * @private
 * @type {weavejs.utils.Dictionary2D}
 */
weavejs.core.SessionManager.prototype.d2d_lhs_rhs_setState;


/**
 * @inheritDoc
 * @export
 * @param {weavejs.api.core.ILinkableObject} primary
 * @param {weavejs.api.core.ILinkableObject} secondary
 */
weavejs.core.SessionManager.prototype.linkSessionState = function(primary, secondary) {
var self = this;
if (primary == null || secondary == null) {
  weavejs.Weave.error("SessionManager.linkSessionState(): Parameters to this function cannot be null.");
  return;
}
if (primary == secondary) {
  weavejs.Weave.error("Warning! Attempt to link session state of an object with itself");
  return;
}
if (org.apache.flex.utils.Language.is(this.d2d_lhs_rhs_setState.get(primary, secondary), Function))
  return;
if (weavejs.core.CallbackCollection.debug)
  var /** @type {Error} */ stackTrace = new Error();
var /** @type {Function} */ setPrimary = function() {
  self.setSessionState(primary, self.getSessionState(secondary), true);
};
var /** @type {Function} */ setSecondary = function() {
  self.setSessionState(secondary, self.getSessionState(primary), true);
};
this.d2d_lhs_rhs_setState.set(primary, secondary, setPrimary);
this.d2d_lhs_rhs_setState.set(secondary, primary, setSecondary);
this.getCallbackCollection(secondary).addImmediateCallback(primary, setPrimary);
this.getCallbackCollection(primary).addImmediateCallback(secondary, setSecondary, true);
};


/**
 * @inheritDoc
 * @export
 * @param {weavejs.api.core.ILinkableObject} first
 * @param {weavejs.api.core.ILinkableObject} second
 */
weavejs.core.SessionManager.prototype.unlinkSessionState = function(first, second) {
if (first == null || second == null) {
  weavejs.Weave.error("SessionManager.unlinkSessionState(): Parameters to this function cannot be null.");
  return;
}
var /** @type {Function} */ setFirst = org.apache.flex.utils.Language.as(this.d2d_lhs_rhs_setState.remove(first, second), Function);
var /** @type {Function} */ setSecond = org.apache.flex.utils.Language.as(this.d2d_lhs_rhs_setState.remove(second, first), Function);
this.getCallbackCollection(second).removeCallback(setFirst);
this.getCallbackCollection(first).removeCallback(setSecond);
};


/**
 * @export
 * @const
 * @type {string}
 */
weavejs.core.SessionManager.DIFF_DELETE = 'delete';


/**
 * @private
 * @param {Object} object
 * @return {Object}
 */
weavejs.core.SessionManager.prototype.copyObject = function(object) {
if (object === null || typeof(object) != 'object')
  return object;
else
  return weavejs.Weave.copyObject(object);
};


/**
 * @inheritDoc
 * @export
 * @param {Object} oldState
 * @param {Object} newState
 * @return {*}
 */
weavejs.core.SessionManager.prototype.computeDiff = function(oldState, newState) {
var /** @type {string} */ type = typeof(oldState);
var /** @type {*} */ diffValue;
if (typeof(newState) != type)
  return this.copyObject(newState);
if (type == 'xml') {
  throw new Error("XML is not supported as a primitive session state type.");
} else if (type == 'number') {
  if (isNaN(org.apache.flex.utils.Language.as(oldState, Number)) && isNaN(org.apache.flex.utils.Language.as(newState, Number)))
    return undefined;
  if (oldState != newState)
    return newState;
  return undefined;
} else if (oldState === null || newState === null || type != 'object') {
  if (oldState !== newState)
    return this.copyObject(newState);
  return undefined;
} else if (org.apache.flex.utils.Language.is(oldState, Array) && org.apache.flex.utils.Language.is(newState, Array)) {
  if (!weavejs.api.core.DynamicState.isDynamicStateArray(oldState) && !weavejs.api.core.DynamicState.isDynamicStateArray(newState)) {
    if (weavejs.compiler.StandardLib.compare(oldState, newState) == 0)
      return undefined;
    return weavejs.Weave.copyObject(newState);
  }
  var /** @type {number} */ i;
  var /** @type {Object} */ typedState;
  var /** @type {boolean} */ changeDetected = false;
  var /** @type {Object} */ oldLookup = {};
  var /** @type {string} */ objectName;
  var /** @type {string} */ className;
  var /** @type {Object} */ sessionState;
  for (i = 0; i < oldState.length; i++) {
    typedState = oldState[i];
    objectName = typedState[weavejs.api.core.DynamicState.OBJECT_NAME];
    oldLookup[objectName || ''] = typedState;
  }
  if (oldState.length != newState.length)
    changeDetected = true;
  var /** @type {Array} */ result = [];
  for (i = 0; i < newState.length; i++) {
    typedState = newState[i];
    objectName = typedState[weavejs.api.core.DynamicState.OBJECT_NAME];
    className = typedState[weavejs.api.core.DynamicState.CLASS_NAME];
    sessionState = typedState[weavejs.api.core.DynamicState.SESSION_STATE];
    var /** @type {Object} */ oldTypedState = oldLookup[objectName || ''];
    delete oldLookup[objectName || ''];
    if (oldTypedState != null && oldTypedState[weavejs.api.core.DynamicState.CLASS_NAME] == className) {
      className = null;
      diffValue = this.computeDiff(oldTypedState[weavejs.api.core.DynamicState.SESSION_STATE], sessionState);
      if (diffValue === undefined) {
        result.push(objectName);
        if (!changeDetected && oldState[i][weavejs.api.core.DynamicState.OBJECT_NAME] != objectName)
          changeDetected = true;
        continue;
      }
      sessionState = diffValue;
    } else {
      sessionState = this.copyObject(sessionState);
    }
    result.push(weavejs.api.core.DynamicState.create(objectName || null, className, sessionState));
    changeDetected = true;
  }
  for (objectName in oldLookup) {
    result.push(weavejs.api.core.DynamicState.create(objectName || null, weavejs.core.SessionManager.DIFF_DELETE));
    changeDetected = true;
  }
  if (changeDetected)
    return result;
  return undefined;
} else {
  var /** @type {*} */ diff = undefined;
  for (var /** @type {string} */ oldName in oldState) {
    diffValue = this.computeDiff(oldState[oldName], newState[oldName]);
    if (diffValue !== undefined) {
      if (!diff)
        diff = {};
      if (newState.hasOwnProperty(oldName))
        diff[oldName] = diffValue;
      else
        diff[oldName] = undefined;
    }
  }
  for (var /** @type {string} */ newName in newState) {
    if (oldState[newName] === undefined) {
      if (!diff)
        diff = {};
      diff[newName] = this.copyObject(newState[newName]);
    }
  }
  return diff;
}
};


/**
 * @inheritDoc
 * @export
 * @param {Object} baseDiff
 * @param {Object} diffToAdd
 * @return {Object}
 */
weavejs.core.SessionManager.prototype.combineDiff = function(baseDiff, diffToAdd) {
var /** @type {string} */ baseType = typeof(baseDiff);
var /** @type {string} */ diffType = typeof(diffToAdd);
if (baseDiff == null || diffToAdd == null || baseType != diffType || baseType != 'object') {
  baseDiff = this.copyObject(diffToAdd);
} else if (org.apache.flex.utils.Language.is(baseDiff, Array) && org.apache.flex.utils.Language.is(diffToAdd, Array)) {
  var /** @type {number} */ i;
  if (weavejs.api.core.DynamicState.isDynamicStateArray(baseDiff) || weavejs.api.core.DynamicState.isDynamicStateArray(diffToAdd)) {
    var /** @type {Object} */ typedState;
    var /** @type {string} */ objectName;
    var /** @type {Object} */ baseLookup = {};
    for (i = 0; i < baseDiff.length; i++) {
      typedState = baseDiff[i];
      if (org.apache.flex.utils.Language.is(typedState, String) || typedState == null)
        objectName = org.apache.flex.utils.Language.as(typedState, String);
      else
        objectName = org.apache.flex.utils.Language.as(typedState[weavejs.api.core.DynamicState.OBJECT_NAME], String);
      baseLookup[objectName] = typedState;
      baseDiff[i] = objectName;
    }
    for (i = 0; i < diffToAdd.length; i++) {
      typedState = diffToAdd[i];
      if (org.apache.flex.utils.Language.is(typedState, String) || typedState == null)
        objectName = org.apache.flex.utils.Language.as(typedState, String);
      else
        objectName = org.apache.flex.utils.Language.as(typedState[weavejs.api.core.DynamicState.OBJECT_NAME], String);
      if (baseLookup.hasOwnProperty(objectName)) {
        for (var /** @type {number} */ j = org.apache.flex.utils.Language.as(baseDiff, Array).indexOf(objectName); j < baseDiff.length - 1; j++)
          baseDiff[j] = baseDiff[j + 1];
        baseDiff[baseDiff.length - 1] = objectName;
      } else {
        baseDiff.push(objectName);
      }
      var /** @type {Object} */ oldTypedState = baseLookup[objectName];
      if (org.apache.flex.utils.Language.is(oldTypedState, String) || oldTypedState == null) {
        baseLookup[objectName] = this.copyObject(typedState);
      } else if (!(org.apache.flex.utils.Language.is(typedState, String) || typedState == null)) {
        var /** @type {string} */ className = typedState[weavejs.api.core.DynamicState.CLASS_NAME];
        if (className && className != oldTypedState[weavejs.api.core.DynamicState.CLASS_NAME]) {
          baseLookup[objectName] = weavejs.Weave.copyObject(typedState);
        } else {
          oldTypedState[weavejs.api.core.DynamicState.SESSION_STATE] = this.combineDiff(oldTypedState[weavejs.api.core.DynamicState.SESSION_STATE], typedState[weavejs.api.core.DynamicState.SESSION_STATE]);
        }
      }
    }
    for (i = 0; i < baseDiff.length; i++)
      baseDiff[i] = baseLookup[baseDiff[i]];
  } else {
    i = baseDiff.length = diffToAdd.length;
    while (i--) {
      var /** @type {Object} */ value = diffToAdd[i];
      if (value === null || typeof(value) != 'object')
        baseDiff[i] = value;
      else
        baseDiff[i] = this.combineDiff(baseDiff[i], value);
    }
  }
} else {
  for (var /** @type {string} */ newName in diffToAdd)
    baseDiff[newName] = this.combineDiff(baseDiff[newName], diffToAdd[newName]);
}
return baseDiff;
};


/**
 * @export
 */
weavejs.core.SessionManager.prototype.testDiff = function() {
var /** @type {Array} */ states = [[{objectName:'a', className:'aClass', sessionState:'aVal'}, {objectName:'b', className:'bClass', sessionState:'bVal1'}], [{objectName:'b', className:'bClass', sessionState:'bVal2'}, {objectName:'a', className:'aClass', sessionState:'aVal'}], [{objectName:'a', className:'aNewClass', sessionState:'aVal'}, {objectName:'b', className:'bClass', sessionState:null}], [{objectName:'b', className:'bClass', sessionState:null}]];
var /** @type {Array} */ diffs = [];
var /** @type {Array} */ combined = [];
var /** @type {*} */ baseDiff = null;
for (var /** @type {number} */ i = 1; i < states.length; i++) {
  var /** @type {*} */ diff = this.computeDiff(states[i - 1], states[i]);
  diffs.push(diff);
  baseDiff = this.combineDiff(baseDiff, diff);
  combined.push(weavejs.Weave.copyObject(baseDiff));
}
weavejs.Weave.log('diffs', diffs);
weavejs.Weave.log('combined', combined);
};


/**
 * Metadata
 *
 * @type {Object.<string, Array.<Object>>}
 */
weavejs.core.SessionManager.prototype.FLEXJS_CLASS_INFO = { names: [{ name: 'SessionManager', qName: 'weavejs.core.SessionManager'}], interfaces: [weavejs.api.core.ISessionManager] };
