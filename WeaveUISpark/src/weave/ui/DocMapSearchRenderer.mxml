<?xml version="1.0" encoding="utf-8"?>
<!--
/* ***** BEGIN LICENSE BLOCK *****
 *
 * This file is part of Weave.
 *
 * The Initial Developer of Weave is the Institute for Visualization
 * and Perception Research at the University of Massachusetts Lowell.
 * Portions created by the Initial Developer are Copyright (C) 2008-2015
 * the Initial Developer. All Rights Reserved.
 *
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this file,
 * You can obtain one at http://mozilla.org/MPL/2.0/.
 * 
 * ***** END LICENSE BLOCK ***** */
-->
<s:ItemRenderer
		 xmlns:fx="http://ns.adobe.com/mxml/2009"
		 xmlns:s="library://ns.adobe.com/flex/spark"
		 xmlns:ui="weave.ui.*">
	<s:Group>
		<s:layout>
			<s:VerticalLayout gap="0"/>
		</s:layout>
		<s:BorderContainer borderStyle="inset" backgroundAlpha="1" width="100%" minHeight="0">
			<s:Group width="100%">
				<s:layout>
					<s:HorizontalLayout verticalAlign="middle" paddingLeft="4" paddingRight="4"/>
				</s:layout>
				<s:Image id="moveGrip" creationComplete="moveGrip.source = MoveIcon;"/>
				<s:TextInput id="searchBox"  width="100%" borderVisible="false"/>
				<s:Label id="resultCountLabel" text="({resultList.dataProvider ? resultList.dataProvider.length : 0})" 
						 includeInLayout="{!!resultList.dataProvider}"
						 visible="{!!resultList.dataProvider}"/>
			</s:Group>
		</s:BorderContainer>
		<s:List id="resultList" change="onSelection()" allowMultipleSelection="true" visible="{resultList.dataProvider.length > 0}">
			<s:layout>
				<s:TileLayout requestedColumnCount="3" requestedRowCount="3"/>
			</s:layout>
			<s:itemRenderer>
				<fx:Component>
					<s:ItemRenderer>
						<s:Group doubleClickEnabled="true" doubleClick="onDoubleClick()" rollOver="onMouseEnter()" rollOut="onMouseOut()">
							<s:layout>
								<s:HorizontalLayout paddingBottom="2" paddingTop="2" paddingRight="2" paddingLeft="2"/>
							</s:layout>
							<s:BitmapImage scaleMode="letterbox" id="bitmapImage" width="64" height="64"/>
							<s:Label id="title" 
									 includeInLayout="{outerDocument.showLabels}" 
									 visible="{outerDocument.showLabels}"/>
						</s:Group>
						
						<fx:Script>
							<![CDATA[
								import flash.events.MouseEvent;
								import flash.net.navigateToURL;
								
								import weave.Weave;
								import weave.api.data.IQualifiedKey;
								override public function set data(value:Object):void
								{
									super.data = value;
									var key:IQualifiedKey = value as IQualifiedKey;
									var query:DocMapSearchQuery = outerDocument.query;
									bitmapImage.source = query.getImage(key);
									title.text = query.getTitle(key);
								}
								
								public function get key():IQualifiedKey
								{
									return data as IQualifiedKey; 
								}
								
								private function onDoubleClick():void
								{
									var url:String = outerDocument.query.getUrl(key);
									navigateToURL(new URLRequest(url), '_blank');
								}
								
								private function onMouseEnter():void
								{
									Weave.defaultProbeKeySet.replaceKeys([key]);
								}
								
								private function onMouseOut():void
								{
									Weave.defaultProbeKeySet.clearKeys();	
								}
							]]>
						</fx:Script>
					</s:ItemRenderer>
				</fx:Component>
			</s:itemRenderer>
		</s:List>
	</s:Group>
	<fx:Script>
	<![CDATA[
		import spark.filters.GlowFilter;
		import weave.data.DataSources.DocumentMapDataSource;
		import weave.utils.VectorUtils;
		import mx.events.DragEvent;
		import mx.collections.ArrayCollection;
		
		import weave.Weave;
		import weave.api.getCallbackCollection;
		import weave.api.linkBindableProperty;
		import weave.api.unlinkBindableProperty;
		
		[Embed(source="/weave/resources/images/panMode.png")]
		private static var MoveIcon:Class;
		
		[Bindable] public var showLabels:Boolean = false;
		[Bindable] public var showThumbnails:Boolean = true;
		
		override protected function createChildren():void
		{
			super.createChildren();
			resultList.dataProvider = new ArrayCollection();
			Weave.defaultSelectionKeySet.addGroupedCallback(this, updateSelection, true);
			moveGrip.addEventListener(MouseEvent.MOUSE_DOWN, onMouseDown);
		}
		
		private function onMouseDown(event:MouseEvent):void
		{
			stage.addEventListener(MouseEvent.MOUSE_UP, onMouseUp);
			startDrag();
		}
		
		private function onMouseUp(event:MouseEvent):void
		{
			stopDrag();
			stage.removeEventListener(MouseEvent.MOUSE_UP, onMouseUp);
			dispatchEvent(new DragEvent(DragEvent.DRAG_COMPLETE, true, true, this));
		}
		
		public function get query():DocMapSearchQuery
		{
			return data as DocMapSearchQuery;
		}
		
		override public function set data(value:Object):void
		{
			if (query == value)
				return;
			
			if (query)
			{
				unlinkBindableProperty(query.queryString, searchBox, 'text');
				getCallbackCollection(query).removeCallback(handleQuery);
			}
			
			super.data = value as DocMapSearchQuery;
			
			if (query)
			{
				linkBindableProperty(query.queryString, searchBox, 'text', 500);
				getCallbackCollection(query).addGroupedCallback(this, handleQuery);
				
				handleQuery();
				updateSelection();
			}
		}
		
		private function updateSelection():void
		{
			resultList.selectedItems = Vector.<Object>(Weave.defaultSelectionKeySet.keys);
		}
		
		private function onSelection():void
		{
			Weave.defaultSelectionKeySet.replaceKeys(VectorUtils.copy(resultList.selectedItems));
		}
		
		private function handleQuery():void
		{
			if (query.collectionName.value && query.getDataSource())
				searchBox.errorString = null;
			else
				searchBox.errorString = !query.collectionName.value ? lang("No document collection selected") : lang("No data source selected");
			
			var keys:Array = query.getKeys();
			_vscroll = resultList.scroller.verticalScrollBar.value;
			(resultList.dataProvider as ArrayCollection).source = query.getKeys();
			invalidateDisplayList();
//			resultList.selectedItems = query.getKeys();
		}
		
		private var _vscroll:Number = NaN;
		
		override protected function updateDisplayList(w:Number, h:Number):void
		{
			super.updateDisplayList(w, h);
			if (isFinite(_vscroll))
			{
				resultList.scroller.verticalScrollBar.value = _vscroll;
				_vscroll = NaN;
				resultList.validateNow();
			}
		}
		
	]]>
	</fx:Script>
</s:ItemRenderer>
