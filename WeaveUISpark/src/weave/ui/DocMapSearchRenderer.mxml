<?xml version="1.0" encoding="utf-8"?>
<s:ItemRenderer
		 xmlns:fx="http://ns.adobe.com/mxml/2009"
		 xmlns:s="library://ns.adobe.com/flex/spark"
		 xmlns:ui="weave.ui.*">
	<s:Group>
		<s:layout>
			<s:VerticalLayout/>
		</s:layout>
		<s:Group width="100%">
			<s:layout>
				<s:HorizontalLayout/>
			</s:layout>
			<s:Image id="moveGrip" creationComplete="moveGrip.source = MoveIcon;"/>
			<s:TextInput id="searchBox"  width="100%"/>
			<s:Label text="({resultList.dataProvider ? resultList.dataProvider.length : 0})" 
					 includeInLayout="{!!resultList.dataProvider}"
					 visible="{!!resultList.dataProvider}"/>
		</s:Group>
		<s:List id="resultList" change="onSelection()" allowMultipleSelection="true">
			<s:layout>
				<s:TileLayout requestedColumnCount="3" requestedRowCount="3"/>
			</s:layout>
			<s:itemRenderer>
				<fx:Component>
					<s:ItemRenderer>
						<s:Group doubleClickEnabled="true" doubleClick="onDoubleClick()" rollOver="onMouseEnter()" rollOut="onMouseOut()">
							<s:layout>
								<s:HorizontalLayout paddingBottom="2" paddingTop="2" paddingRight="2" paddingLeft="2"/>
							</s:layout>
							<s:BitmapImage scaleMode="letterbox" id="bitmapImage" width="96" height="96"/>
							<s:Label id="title" 
									 includeInLayout="{outerDocument.showLabels}" 
									 visible="{outerDocument.showLabels}"/>
						</s:Group>
						
						<fx:Script>
							<![CDATA[
								import flash.events.MouseEvent;
								import flash.net.navigateToURL;
								
								import weave.Weave;
								import weave.api.data.IQualifiedKey;
								override public function set data(value:Object):void
								{
									super.data = value;
									var key:IQualifiedKey = value as IQualifiedKey;
									var query:DocMapSearchQuery = outerDocument.query;
									bitmapImage.source = query.getImage(key);
									title.text = query.getTitle(key);
								}
								
								public function get key():IQualifiedKey
								{
									return data as IQualifiedKey; 
								}
								
								private function onDoubleClick():void
								{
									var url:String = outerDocument.query.getUrl(key);
									navigateToURL(new URLRequest(url), '_blank');
								}
								
								private function onMouseEnter():void
								{
									Weave.defaultProbeKeySet.replaceKeys([key]);
								}
								
								private function onMouseOut():void
								{
									Weave.defaultProbeKeySet.clearKeys();	
								}
							]]>
						</fx:Script>
					</s:ItemRenderer>
				</fx:Component>
			</s:itemRenderer>
		</s:List>
	</s:Group>
	<fx:Script>
	<![CDATA[
		import weave.utils.VectorUtils;
		import mx.collections.ArrayCollection;
		
		import weave.Weave;
		import weave.api.getCallbackCollection;
		import weave.api.linkBindableProperty;
		import weave.api.unlinkBindableProperty;
		
		[Embed(source="/weave/resources/images/panMode.png")]
		private static var MoveIcon:Class;
		
		[Bindable] public var showLabels:Boolean = false;
		[Bindable] public var showThumbnails:Boolean = true;
		
		override protected function createChildren():void
		{
			super.createChildren();
			
			moveGrip.addEventListener(MouseEvent.MOUSE_DOWN, startMove);
			
			Weave.defaultSelectionKeySet.addGroupedCallback(this, updateSelection, true);
		}
		
		private function startMove(event:MouseEvent):void
		{
			
		}
		
		public function get query():DocMapSearchQuery
		{
			return data as DocMapSearchQuery;
		}
		
		override public function set data(value:Object):void
		{
			if (query == value)
				return;
			
			if (query)
			{
				unlinkBindableProperty(query.queryString, searchBox, 'text');
				getCallbackCollection(query).removeCallback(handleQuery);
			}
			
			super.data = value as DocMapSearchQuery;
			
			if (query)
			{
				linkBindableProperty(query.queryString, searchBox, 'text');
				getCallbackCollection(query).addGroupedCallback(this, handleQuery);
			}
		}
		
		private function updateSelection():void
		{
//			resultList.selectedItems = Weave.defaultSelectionKeySet.keys;
		}
		
		private function onSelection():void
		{
			Weave.defaultSelectionKeySet.replaceKeys(VectorUtils.copy(resultList.selectedItems));
		}
		
		private function handleQuery():void
		{
			var keys:Array = query.getKeys();
			resultList.dataProvider = new ArrayCollection(query.getKeys());
//			resultList.selectedItems = query.getKeys();
		}
	]]>
	</fx:Script>
</s:ItemRenderer>
