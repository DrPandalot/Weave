<?xml version="1.0" encoding="utf-8"?>
<!--
/* ***** BEGIN LICENSE BLOCK *****
 *
 * This file is part of Weave.
 *
 * The Initial Developer of Weave is the Institute for Visualization
 * and Perception Research at the University of Massachusetts Lowell.
 * Portions created by the Initial Developer are Copyright (C) 2008-2015
 * the Initial Developer. All Rights Reserved.
 *
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this file,
 * You can obtain one at http://mozilla.org/MPL/2.0/.
 * 
 * ***** END LICENSE BLOCK ***** */
-->
<s:ItemRenderer
		 xmlns:fx="http://ns.adobe.com/mxml/2009"
		 xmlns:s="library://ns.adobe.com/flex/spark"
		 xmlns:ui="weave.ui.*">
	<fx:Declarations>
		<s:TileLayout id="tileResultLayout" requestedColumnCount="3" requestedRowCount="3"/>
		<s:VerticalLayout id="verticalResultLayout" requestedRowCount="6"/>
	</fx:Declarations>
	<s:Group>
		<s:layout>
			<s:VerticalLayout gap="0" horizontalAlign="center"/>
		</s:layout>
		<s:BorderContainer borderStyle="inset" backgroundAlpha="1" width="100%" minHeight="0">
			<s:Group width="100%">
				<s:layout>
					<s:HorizontalLayout verticalAlign="middle" paddingLeft="4" paddingRight="4"/>
				</s:layout>
				<s:Image id="moveGrip" creationComplete="moveGrip.source = MoveIcon;"/>
				<s:TextInput id="searchBox"  width="100%" borderVisible="false"/>
				<s:Label id="resultCountLabel" text="({resultList.dataProvider ? resultList.dataProvider.length : 0})" 
						 includeInLayout="{!!resultList.dataProvider}"
						 visible="{!!resultList.dataProvider}"/>
			</s:Group>
		</s:BorderContainer>
		<s:List layout="{showAsList ? verticalResultLayout : tileResultLayout}" 
				id="resultList" change="onSelection()" allowMultipleSelection="true" 
				visible="{resultList.dataProvider.length > 0}" 
				typicalItem="false"
				width="{paneWidth || NaN}"
				height="{paneHeight || NaN}">
			<s:itemRenderer>
				<fx:Component>
					<s:ItemRenderer>
						<s:Group id="mainGroup" doubleClickEnabled="true" doubleClick="onDoubleClick()" rollOver="onMouseEnter()" rollOut="onMouseOut()">
							<s:layout>
								<s:HorizontalLayout paddingBottom="2" paddingTop="2" paddingRight="2" paddingLeft="2"/>
							</s:layout>
							<s:Group id="bitmapGroup">
								<s:BitmapImage scaleMode="letterbox" id="bitmapImage" width="{outerDocument.thumbnailSize}" height="{outerDocument.thumbnailSize}"/>
							</s:Group>
							<s:TextArea id="title"
									 editable="false"
									 selectable="true"
									 borderVisible="false"
									 includeInLayout="{outerDocument.showAsList}"
									 height="{outerDocument.thumbnailSize}"
									 verticalScrollPolicy="off"
									 horizontalScrollPolicy="off"
									 visible="{outerDocument.showAsList}"/>
						</s:Group>
						<fx:Script>
							<![CDATA[
								import mx.core.UIComponent;
								import mx.events.ToolTipEvent;
								
								import spark.components.BorderContainer;
								
								import weave.Weave;
								import weave.api.data.IQualifiedKey;
								import weave.utils.BitmapUtils;
								
								override protected function childrenCreated():void
								{
									super.childrenCreated();
									
									bitmapGroup.toolTip = ' ';
									bitmapGroup.addEventListener(ToolTipEvent.TOOL_TIP_SHOWN, onToolTipShown);
									bitmapGroup.addEventListener(ToolTipEvent.TOOL_TIP_HIDE, onToolTipHide);
								}
								
								private static var staticBitmapBorder:BorderContainer;
								private static var staticBitmap:BitmapImage;
								private function onToolTipShown(event:ToolTipEvent):void
								{
									var bitmapData:BitmapData = bitmapImage.source as BitmapData;
									if (bitmapData)
									{
										if (!staticBitmapBorder)
										{
											staticBitmapBorder = new BorderContainer();
											staticBitmap = new BitmapImage();
											staticBitmapBorder.addElement(staticBitmap);
										}
										staticBitmap.source = bitmapData;
										staticBitmapBorder.x = 0;
										staticBitmapBorder.y = 0;
										staticBitmapBorder.width = bitmapData.width + 2;
										staticBitmapBorder.height = bitmapData.height + 2;
										(event.toolTip as UIComponent).addChild(staticBitmapBorder);
										
										// reposition so it's on the screen
										var p:Point = event.toolTip.localToGlobal(new Point(0, 0));
										var stage:Stage = event.toolTip.stage as Stage;
										var sw:Number = stage.stageWidth;
										var sh:Number = stage.stageHeight;
										if (p.x + bitmapData.width > sw)
											p.x = stage.mouseX - bitmapData.width;
										if (p.y + bitmapData.height > sh)
											p.y = stage.mouseY - bitmapData.height;
										p = event.toolTip.parent.globalToLocal(p);
										event.toolTip.x = p.x;
										event.toolTip.y = p.y;
									}
									else
									{
										event.toolTip.visible = false;
									}
								}
								private function onToolTipHide(event:ToolTipEvent):void
								{
									if ((event.toolTip as UIComponent).contains(staticBitmapBorder))
										(event.toolTip as UIComponent).removeChild(staticBitmapBorder);
								}
								
								override public function set data(value:Object):void
								{
									super.data = value;
									var query:DocMapSearchQuery = outerDocument.query;
									bitmapImage.source = key ? query.getImage(key) : BitmapUtils.MISSING_IMAGE;
									title.text = key ? query.getTitle(key) : "Of Cabbages And Kings: A Talk of Many Things";
								}
								
								public function get key():IQualifiedKey
								{
									return data as IQualifiedKey; 
								}
								
								private function onDoubleClick():void
								{
									var url:String = outerDocument.query.getUrl(key);
									navigateToURL(new URLRequest(url), '_blank');
								}
								
								private function onMouseEnter():void
								{
									Weave.defaultProbeKeySet.replaceKeys([key]);
								}
								
								private function onMouseOut():void
								{
									Weave.defaultProbeKeySet.clearKeys();	
								}
							]]>
						</fx:Script>
					</s:ItemRenderer>
				</fx:Component>
			</s:itemRenderer>
		</s:List>
	</s:Group>
	<fx:Script>
	<![CDATA[
		import spark.filters.GlowFilter;
		import weave.data.DataSources.DocumentMapDataSource;
		import weave.utils.VectorUtils;
		import mx.events.DragEvent;
		import mx.collections.ArrayCollection;
		
		import weave.Weave;
		import weave.api.getCallbackCollection;
		import weave.api.linkBindableProperty;
		import weave.api.unlinkBindableProperty;
		
		[Embed(source="/weave/resources/images/panMode.png")]
		private static var MoveIcon:Class;

		[Bindable] public var thumbnailSize:int = 64;
		[Bindable] public var showAsList:Boolean = false;
		[Bindable] public var paneHeight:Number = 0;
		[Bindable] public var paneWidth:Number = 0;
		
		override protected function createChildren():void
		{
			super.createChildren();
			resultList.dataProvider = new ArrayCollection();
			Weave.defaultSelectionKeySet.addGroupedCallback(this, updateSelection, true);
			moveGrip.addEventListener(MouseEvent.MOUSE_DOWN, onMouseDown);
		}
		
		private function onMouseDown(event:MouseEvent):void
		{
			stage.addEventListener(MouseEvent.MOUSE_UP, onMouseUp);
			startDrag();
		}
		
		private function onMouseUp(event:MouseEvent):void
		{
			stopDrag();
			stage.removeEventListener(MouseEvent.MOUSE_UP, onMouseUp);
			dispatchEvent(new DragEvent(DragEvent.DRAG_COMPLETE, true, true, this));
		}
		
		public function get query():DocMapSearchQuery
		{
			return data as DocMapSearchQuery;
		}
		
		override public function set data(value:Object):void
		{
			if (query == value)
				return;
			
			if (query)
			{
				unlinkBindableProperty(query.queryString, searchBox, 'text');
				unlinkBindableProperty(query.thumbnailSize, this, 'thumbnailSize');
				unlinkBindableProperty(query.showAsList, this, 'showAsList');
				unlinkBindableProperty(query.paneWidth, this, 'paneWidth');
				unlinkBindableProperty(query.paneHeight, this, 'paneHeight');
				getCallbackCollection(query).removeCallback(handleQuery);
				getCallbackCollection(query.thumbnailSize).removeCallback(handleSizeChange);
			}
			
			super.data = value as DocMapSearchQuery;
			
			if (query)
			{
				linkBindableProperty(query.queryString, searchBox, 'text', 500);
				linkBindableProperty(query.thumbnailSize, this, 'thumbnailSize');
				linkBindableProperty(query.showAsList, this, 'showAsList');
				linkBindableProperty(query.paneWidth, this, 'paneWidth');
				linkBindableProperty(query.paneHeight, this, 'paneHeight');
				getCallbackCollection(query).addGroupedCallback(this, handleQuery);
				getCallbackCollection(query.thumbnailSize).addGroupedCallback(this, handleSizeChange, true);
				
				handleQuery();
				updateSelection();
			}
		}

		private function handleSizeChange():void
		{
			if (!resultList)
			{
				callLater(handleSizeChange);
				return;
			}
			resultList.typicalItem = !resultList.typicalItem;
		}
		
		private function updateSelection():void
		{
			resultList.selectedItems = Vector.<Object>(Weave.defaultSelectionKeySet.keys);
		}
		
		private function onSelection():void
		{
			Weave.defaultSelectionKeySet.replaceKeys(VectorUtils.copy(resultList.selectedItems));
		}
		
		private function handleQuery():void
		{
			if (query.collectionName.value && query.getDataSource())
				searchBox.errorString = null;
			else
				searchBox.errorString = !query.collectionName.value ? lang("No document collection selected") : lang("No data source selected");
			
			var keys:Array = query.getKeys();
			_vscroll = resultList.scroller.verticalScrollBar.value;
			(resultList.dataProvider as ArrayCollection).source = query.getKeys();
			invalidateDisplayList();
//			resultList.selectedItems = query.getKeys();
		}
		
		private var _vscroll:Number = NaN;
		
		override protected function updateDisplayList(w:Number, h:Number):void
		{
			super.updateDisplayList(w, h);
			if (isFinite(_vscroll))
			{
				resultList.scroller.verticalScrollBar.value = _vscroll;
				_vscroll = NaN;
				resultList.validateNow();
			}
		}
		
	]]>
	</fx:Script>
</s:ItemRenderer>
