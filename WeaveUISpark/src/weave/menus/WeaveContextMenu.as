/*
Weave (Web-based Analysis and Visualization Environment)
Copyright (C) 2008-2011 University of Massachusetts Lowell

This file is a part of Weave.

Weave is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License, Version 3,
as published by the Free Software Foundation.

Weave is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with Weave.  If not, see <http://www.gnu.org/licenses/>.
*/

package weave.menus
{
	import flash.events.ContextMenuEvent;
	import flash.ui.ContextMenu;
	import flash.ui.ContextMenuItem;
	import flash.utils.Dictionary;
	import flash.utils.getQualifiedClassName;
	
	/**
	 * Uses WeaveMenuItem to define dynamic ContextMenus.
	 * 
	 * @see weave.menus.WeaveMenuItem
	 */
	public class WeaveContextMenu
	{
		/**
		 * Creates a dynamic ContextMenu.
		 * @param dataProvider Either a single WeaveMenuItem
		 *                     or an Array of WeaveMenuItems (or params to pass to the WeaveMenuItem constructor)
		 *                     or a Function returning such an Array.
		 * @return A dynamic ContextMenu derived from the dataProvider.
		 * @see weave.menus.WeaveMenuItem
		 */
		public static function create(dataProvider:Object):ContextMenu
		{
			if (getQualifiedClassName(dataProvider) == 'Object')
				dataProvider = new WeaveMenuItem(dataProvider);
			if (dataProvider is Array || dataProvider is Function)
				dataProvider = new WeaveMenuItem({children: dataProvider});
			if (dataProvider is WeaveMenuItem)
				return new WeaveContextMenu(dataProvider as WeaveMenuItem).contextMenu;
			return null;
		}
		
		private var _contextMenu:ContextMenu;
		private var root:WeaveMenuItem;
		private var cmi_to_wmi:Dictionary = new Dictionary(); // cmi -> wmi
		
		public function WeaveContextMenu(root:WeaveMenuItem)
		{
			this.root = root;
			_contextMenu = new ContextMenu();
			_contextMenu.addEventListener(ContextMenuEvent.MENU_SELECT, handleMenuSelect);
			_contextMenu.hideBuiltInItems();
		}
		
		/**
		 * The ContextMenu generated by this object.
		 */
		public function get contextMenu():ContextMenu
		{
			return _contextMenu;
		}
		
		private function handleMenuSelect(e:*):void
		{
			var cmi_index:int = -1;
			var cmi:ContextMenuItem;
			for each (var wmi:WeaveMenuItem in root.children)
			{
				if (!cmi)
					cmi = getCustomItem(++cmi_index);
				
				if (wmi.type == WeaveMenuItem.TYPE_SEPARATOR)
				{
					cmi.separatorBefore = true;
					continue;
				}
				
				cmi_to_wmi[cmi] = wmi;
				cmi.caption = wmi.label;
				cmi.visible = wmi.shown;
				cmi.enabled = wmi.enabled;
				cmi = null;
			}
			
			// hide remaining items
			while (++cmi_index < _contextMenu.customItems.length)
				(_contextMenu.customItems[cmi_index] as ContextMenuItem).visible = false;
		}
		
		private function getCustomItem(i:int):ContextMenuItem
		{
			while (!_contextMenu.customItems || _contextMenu.customItems.length <= i)
			{
				var items:Array = _contextMenu.customItems;
				var cmi:ContextMenuItem = new ContextMenuItem('');
				cmi.addEventListener(ContextMenuEvent.MENU_ITEM_SELECT, handleMenuItemSelect);
				items.push(cmi);
				_contextMenu.customItems = items;
			}
			return _contextMenu.customItems[i];
		}
		
		private function handleMenuItemSelect(event:ContextMenuEvent):void
		{
			(cmi_to_wmi[event.target] as WeaveMenuItem).click();
		}
	}
}
