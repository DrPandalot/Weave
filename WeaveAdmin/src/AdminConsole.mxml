<?xml version="1.0" encoding="utf-8"?>
<!--
/* ***** BEGIN LICENSE BLOCK *****
 *
 * This file is part of Weave.
 *
 * The Initial Developer of Weave is the Institute for Visualization
 * and Perception Research at the University of Massachusetts Lowell.
 * Portions created by the Initial Developer are Copyright (C) 2008-2015
 * the Initial Developer. All Rights Reserved.
 *
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this file,
 * You can obtain one at http://mozilla.org/MPL/2.0/.
 * 
 * ***** END LICENSE BLOCK ***** */
-->
<mx:Application xmlns:mx="http://www.adobe.com/2006/mxml"
				xmlns:managers="weave.ui.admin.managers.*"
				xmlns:admin="weave.ui.admin.*"
				xmlns:ui="weave.ui.*"
				creationPolicy="all"
				layout="absolute"
				backgroundColor="#7B96B6"
				creationComplete="handleCreationComplete()"
				activate="if (Admin.instance.userHasAuthenticated) Admin.service.keepAlive()"
				applicationComplete="handleApplicationComplete();">
	<mx:Style>
		{ fillAlphas: 1, 1, 1, 1; }
	</mx:Style>
	<mx:Panel
		headerHeight="25"
		title="Administration Console for Weave {version}"
		width="100%"
		height="100%"
		borderAlpha="0.5" backgroundColor="#DBDBDB"
		bottom="10" top="10" right="10" left="10"
		paddingLeft="8" paddingRight="8" paddingTop="8" paddingBottom="8">
		<mx:VDividedBox width="100%" height="100%">
			<ui:CustomViewStack width="100%" height="100%" selectedIndex="{Admin.service.initialized ? (Admin.instance.userHasAuthenticated ? MAIN_VIEW : (Admin.instance.databaseConfigExists ? LOGIN_VIEW : SETUP_VIEW)) : MIGRATE_VIEW}">
				
				<!-- main interface -->
				<mx:VBox id="mainInterface" width="100%" height="100%">
					<mx:HBox width="100%" verticalAlign="middle">
						<mx:HBox width="100%" verticalAlign="middle" visible="{Admin.instance.activeConnectionName != ConnectionInfo.DIRECTORY_SERVICE_CONNECTION_NAME}">
							<mx:Label fontWeight="bold" text="Import data:"/>
							<mx:Button label="SQL" click="WizardPanel.createWizard(this, new SQLImportWizard())" toolTip="{lang('This publishes an existing SQL table through the Weave server. This will not create any new tables in the database. This will just allow Weave users to access the data.')}"/>
							<mx:Button label="CSV" click="WizardPanel.createWizard(this, new CSVImportWizard())" toolTip="{lang('This uploads and publishes data from a CSV file on your computer.')}"/>
							<mx:Button label="SHP + DBF" click="WizardPanel.createWizard(this, new SHPImportWizard())" toolTip="{lang('This uploads and publishes shape data from files on your computer.')}"/>
							
							<mx:HRule width="100%"/>
							
							<mx:Button label="Open Weave" click="Admin.instance.openWeavePopup();" toolTip="This will open Weave in a new browser window which allows you to save a new client configuration."/>
							<mx:Button label="Recover last session" click="Admin.instance.openWeavePopup(null, true);" toolTip="This will open Weave with your last configuration."/>
							
							<mx:HRule width="100%"/>
						</mx:HBox>
						<mx:Label text="{'Signed in as: ' + Admin.instance.activeConnectionName}" textAlign="right"/>
						<mx:Button label="Sign out" enabled="{Admin.instance.databaseConfigExists == true}"
								   click="Admin.instance.activeConnectionName = Admin.instance.activePassword = '';"/>
					</mx:HBox>
					<mx:HRule width="100%"/>
					<ui:CustomTabNavigator tabWidth="160" id="tabNavigator" width="100%" height="100%" paddingBottom="8" paddingLeft="8" paddingRight="8" paddingTop="8" fontSize="10">
						<managers:ClientConfigurationManager id="clientConfigManager"/>
						<managers:MetadataManager id="metadataManager"/>
						<managers:SQLConnectionManager id="sqlConnectionManager"/>
					</ui:CustomTabNavigator>
					<mx:HBox id="resdHacks" visible='false' includeInLayout="false" width="100%">
						<mx:Spacer width="100%"/>
						<mx:Button label="{lang('ACS Header Tool')}" click='openAcsHeaderTool()'/>
						<mx:Button label="{lang('Edit translations')}" click="DraggablePanel.openStaticInstance(TranslationPanel);"/>
					</mx:HBox>
				</mx:VBox>
				
				<!-- login interface -->
				<mx:Box horizontalAlign="center" verticalAlign="middle" show="loginPanel.connectionInput.setFocus()">
					<ui:LoginPopup id="loginPanel" loginEnabled="{loginEnabled}" login="{login}"/>
				</mx:Box>
				
				<!-- first time setup interface -->
				<mx:VBox>
					<ui:Paragraph text="{lang('Before you can continue, you must set up at least one database connection and specify where to store Weave configuration information.')}"/>
					<managers:SQLConnectionManager/>
				</mx:VBox>
				
				<!-- old version migration interface -->
	            <mx:VBox>
	                <admin:MigrationPanel width="100%" height="100%"/>
	            </mx:VBox>
				
			</ui:CustomViewStack>
			<mx:TextArea id="messageTextArea" editable="false"
						 width="100%" height="0%" visible="{messageTextArea.height > 0}"
						 keyDown="if (event.keyCode == Keyboard.DELETE) WeaveAdminService.clearMessageLog(); messageTextArea.height = 0;"/>
		</mx:VDividedBox>
	</mx:Panel>
	
	<mx:Script>
		<![CDATA[
			import mx.binding.utils.BindingUtils;
			import mx.managers.PopUpManager;
			import mx.rpc.events.ResultEvent;
			
			import weave.Weave;
			import weave.api.getCallbackCollection;
			import weave.api.reportError;
			import weave.services.Admin;
			import weave.services.WeaveAdminService;
			import weave.services.addAsyncResponder;
			import weave.services.beans.ConnectionInfo;
			import weave.ui.DraggablePanel;
			import weave.ui.ErrorLogPanel;
			import weave.ui.TranslationPanel;
			import weave.ui.WeaveProgressBar;
			import weave.ui.admin.WizardPanel;
			import weave.ui.admin.wizards.CSVImportWizard;
			import weave.ui.admin.wizards.SHPImportWizard;
			import weave.ui.admin.wizards.SQLImportWizard;

			private const MAIN_VIEW:int = 0;
			private const LOGIN_VIEW:int = 1;
			private const SETUP_VIEW:int = 2;
            private const MIGRATE_VIEW:int = 3;
			
			private var _weaveTrace:Function = weaveTraceImpl; // reference this here so it gets compiled
			
			private static const version:String = Weave.properties.version.value;
			
			private function handleCreationComplete():void
			{
				addAsyncResponder(
					Admin.service.getVersion(),
					function(event:ResultEvent, _:*):void {
						if (event.result != version)
							reportError(lang(
								"Server and client versions do not match:\n" +
								"\tServer: {0}\n" +
								"\tClient: {1}\n" +
								"Please try clearing your browser cache or redeploying the WAR file.",
								event.result,
								version
							));
					}
				);

				WeaveAdminService.messageLogCallbacks.addImmediateCallback(this, handleMessageLog, true);
				function handleMessageLog():void
				{
					
					messageTextArea.text = WeaveAdminService.messageLog.join('\n\n');
					messageTextArea.validateProperties();
					messageTextArea.verticalScrollPosition = messageTextArea.maxVerticalScrollPosition;
					if (WeaveAdminService.messageLog.length && messageTextArea.height < 64)
					{
						// Set height explicitly because if we set percentHeight and then
						// the user resizes the division, the percentHeight will be ignored.
						messageTextArea.height = 128;
					}
				}
				
				BindingUtils.bindSetter(adjustInterface, Admin.instance, "activeConnectionName");
				BindingUtils.bindSetter(adjustInterface, Admin.instance, "currentUserIsSuperuser");
				function adjustInterface(..._):void
				{
					var isSuperuser:Boolean = Admin.instance.currentUserIsSuperuser;
					if (isSuperuser)
					{
						if (tabNavigator != sqlConnectionManager.parent)
							tabNavigator.addChild(sqlConnectionManager);
					}
					else if (sqlConnectionManager.parent)
					{
						sqlConnectionManager.parent.removeChild(sqlConnectionManager);
					}
					
					resdHacks.visible = resdHacks.includeInLayout = (Admin.instance.activeConnectionName == 'resd');
				}
				
				PopUpManager.createPopUp(this, WeaveProgressBar);
				getCallbackCollection(Admin.entityCache).addImmediateCallback(this, handleEntityCache);
			}
			
			private function handleApplicationComplete():void
			{
				WeaveAPI.initializeJavaScript();
				WeaveAPI.callExternalWeaveReady();
				getCallbackCollection(WeaveAPI.ErrorManager).addGroupedCallback(this, ErrorLogPanel.openErrorLog, WeaveAPI.ErrorManager.errors.length > 0);
			}
			
			private function loginEnabled(user:String, pass:String):Boolean
			{
				return user && pass && user != ConnectionInfo.DIRECTORY_SERVICE_CONNECTION_NAME;
			}
			
			private function login(user:String, pass:String):void
			{
				// disable while authenticating
				enabled = false;
				
				// authenticate with server
				addAsyncResponder(Admin.service.authenticate(user, pass), handleResult, handleFault);
				function handleResult(..._):void
				{
					enabled = true;
					loginPanel.connectionInput.text = '';
					loginPanel.passwordInput.text = '';
				}
				function handleFault(..._):void
				{
					enabled = true;
				}
			}
			
			private function handleEntityCache():void
			{
				if (Admin.instance.getFocusEntityId() != -1)
					tabNavigator.selectedChild = metadataManager;
			}
			
			private function openAcsHeaderTool():void
			{
				var success:Boolean = JavaScript.exec('return !!window.open("http://demo.iweave.com/HeaderTool.swf", "_blank")');
				if (!success)
					reportError("Popup was blocked by web browser");
			}
		]]>
	</mx:Script>
</mx:Application>
