<?xml version="1.0" encoding="utf-8"?>
<!--
/*
    Weave (Web-based Analysis and Visualization Environment)
    Copyright (C) 2008-2011 University of Massachusetts Lowell

    This file is a part of Weave.

    Weave is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License, Version 3,
    as published by the Free Software Foundation.

    Weave is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with Weave.  If not, see <http://www.gnu.org/licenses/>.
*/
-->
<admin:WizardViewStack
			xmlns:mx="http://www.adobe.com/2006/mxml"
			xmlns:ui="weave.ui.*"
			xmlns:admin="weave.ui.admin.*"
			xmlns="weave.ui.admin.wizards.*" 
			label="Import CSV data to Weave"
			creationComplete="handleCreationComplete()"
			>
	<!--<mx:Label fontWeight="bold" text="Add existing SQL data to a DataTable entry in SQLConfig.xml"/>-->
	<mx:VBox id="csvUploadPage" label="Import a CSV file to SQL">
		<ui:Indent group="{tableSelector.indentGroup}" label="CSV file" >
			<!-- csvFileNameInput editable because user may want to type the name of a file already on the server -->
			<ui:TextInputWithPrompt id="csvFileNameInput" prompt="Select a CSV file." change="enableAllWidgets(csvFileNameInput.text.length > 0)" editable="true"/>
			<mx:Button label="Upload File" click="browseAndUpload();"/>
			<mx:Button label="Choose File on Server" click="openServerBrowser();" />
			<mx:Text text="{fileStatus.text}" id="fileStatus"/>
		</ui:Indent>
		<mx:VBox visible="{csvFileNameInput.asTextInput().text.length > 0}">
			<admin:SQLTableSelectorDialog id="tableSelector" showTableCombo="false" tableOverwriteCheckVisible="{AdminInterface.instance.currentUserIsSuperuser}"/>
		</mx:VBox>
	</mx:VBox>
	<mx:VBox id="optionalSettingsPage" label="Configure data for Weave">
		<ui:Indent label="{Strings.table_display_name}">
			<ui:TextInputWithPrompt id="dataTableNameInput" prompt="Enter a table name" text="{tableSelector.activeTable}" toolTip="{Strings.tip_csv_table_display_name}"/>
			<mx:CheckBox label="Overwrite" id="dataTableOverwriteCheck" selected="false"/>
		</ui:Indent>
		<ui:Indent label="Null flag values" toolTip="Specify flag values to treat as missing data, separated by commas">
			<mx:TextInput id="nullFlagInput" editable="true"/>
		</ui:Indent>
		<mx:CheckBox id="generateKeyColumn" selected="true"
					 label="Generate a new primary key column"
					 toolTip="Checking this box will generate a new unique key for each row."/>
		<mx:VBox paddingLeft="{paddingIndent}" visible="{!generateKeyColumn.selected}">
			<ui:Indent label="Key column" grouped="false">
				<ui:CustomComboBox id="csvKeyColumnCombo" text="" editable="true" toolTip="{Strings.tip_key_column_dropdown}"/><!-- editable because user may have typed in a file name manually -->
			</ui:Indent>
			
			<mx:Label text="What do these keys correspond to?"/>
			<admin:GeometryCollectionDialog id="geometrySelector"
											paddingLeft="{paddingIndent}"
											keyType="{dataTableNameInput.asTextInput().text}"/>
			
			<mx:CheckBox id="secondaryKeyColumnCheckBox" label="Format data for Dimension Slider" selected="false"/>
			<ui:Indent label="Secondary key column"
					   paddingLeft="{paddingIndent}"
					   grouped="false"
					   visible="{secondaryKeyColumnCheckBox.selected}"
					   includeInLayout="{secondaryKeyColumnCheckBox.selected}">
				<ui:CustomComboBox id="csvSecondaryKeyColumnCombo" selectedIndex="-1" editable="true" toolTip="Select a secondary key column for use with the Dimension Slider" />
			</ui:Indent>
			
			<mx:CheckBox id="generateFilterColumns" label="Generate filtered column queries" selected="false"/>					
			<ui:IndentTextInput paddingLeft="{paddingIndent}" visible="{generateFilterColumns.selected}" label="Columns to use as filters" id="filterColumnsInput"/>
		</mx:VBox>
	</mx:VBox>
	<mx:VBox id="dublinCorePage" width="100%" label="Specify Dublin Core metadata">
		<mx:TextArea width="100%" borderThickness="0" editable="false" wordWrap="true" text="Please fill in this form to add basic Dublin Core metadata elements to the newly imported data set. You can add more elements later in the metadata tab of the data table view."/>
		<mx:LinkButton label="Click for Dublin Core Reference" click="navigateToURL(new URLRequest('http://dublincore.org/documents/usageguide/elements.shtml'))" />
		<mx:Form>
			<mx:FormItem label="Title">
				<mx:TextInput id="dcTitleTextInput" toolTip="The name given to the resource. Typically, a Title will be a name by which the resource is formally known."/>
			</mx:FormItem>
			<mx:FormItem label="Subject">
				<mx:TextInput id="dcSubjectTextInput" toolTip="The topic of the content of the resource. Typically, a Subject will be expressed as keywords or key phrases or classification codes that describe the topic of the resource. Recommended best practice is to select a value from a controlled vocabulary or formal classification scheme."/>
			</mx:FormItem>
			<mx:FormItem label="Description">
				<mx:TextArea id="dcDescriptionTextInput"  toolTip="An account of the content of the resource. Description may include but is not limited to: an abstract, table of contents, reference to a graphical representation of content or a free-text account of the content."/>
			</mx:FormItem>
		</mx:Form>
	</mx:VBox>
	<mx:Script>
		<![CDATA[
			import mx.managers.PopUpManager;
			import mx.rpc.events.FaultEvent;
			import mx.rpc.events.ResultEvent;
			
			import weave.Strings;
			import weave.api.WeaveAPI;
			import weave.services.AdminInterface;
			import weave.services.DelayedAsyncInvocation;
			import weave.services.WeaveAdminService;
			import weave.ui.admin.ServerCSVFileViewer;
			
			private static const paddingIndent:int = 20;
			
			private var _csvFileReference:FileReference = new FileReference();
			private var _serverFileBrowser:ServerCSVFileViewer = null;
			
			private function handleCreationComplete():void
			{
				_csvFileReference.addEventListener(Event.SELECT, csvFileSelectedHandler);
				_csvFileReference.addEventListener(Event.COMPLETE, csvFileLoadCompleteHandler);
				_csvFileReference.addEventListener(IOErrorEvent.IO_ERROR, fileErrorHandler);
					
				backEnabled = false;
				nextEnabled = false;
				finishEnabled = false;
			}
			
			private function csvFileSelectedHandler(event:Event):void
			{
				_csvFileReference.load();
			}
			
			private function csvFileLoadCompleteHandler(event:Event):void
			{
				if (_csvFileReference.data == null)
					return;
				
				AdminInterface.instance.uploadFile(_csvFileReference);
				
				csvFileNameInput.text = _csvFileReference.name;
				
				// when file is loaded locally, get csv column names
				var csvData:String = _csvFileReference.data.toString();
				var firstRow:Array = WeaveAPI.CSVParser.parseCSV(csvData)[0];
				csvKeyColumnCombo.dataProvider = firstRow;
				csvSecondaryKeyColumnCombo.dataProvider = firstRow;
				csvSecondaryKeyColumnCombo.selectedIndex = -1;
				filterColumnsInput.text = WeaveAPI.CSVParser.createCSVFromArrays([firstRow]);
				
				var tableName:String = _csvFileReference.name;
				
				//clip the ".csv"
				tableName = tableName.substring(0, tableName.lastIndexOf("."));
				
				tableSelector.activeTable = tableName;
				enableAllWidgets();
				
			}
			
			private function fileErrorHandler(event:IOErrorEvent):void
			{
				var fileRef:FileReference = event.target as FileReference;
				WeaveAdminService.messageDisplay(
					"File upload failed",
					"File: " + fileRef.name + "\n" + "Size: " + fileRef.size + "\n" + event.text,
					true
				);
			}

			private function browseAndUpload():void
			{
				try
				{
					var fileTypes:Array = [new FileFilter("CSV Files", "*.csv")];
					_csvFileReference.browse(fileTypes);
				}
				catch (e:Error)
				{
					trace(e.getStackTrace());
				}
			}
			private function openServerBrowser():void
			{
				_serverFileBrowser = ServerCSVFileViewer.createServerFileViewer(this);
				_serverFileBrowser.selectButton.addEventListener(MouseEvent.CLICK, serverFileBrowserSelectFile);				
			}
			private function serverFileBrowserSelectFile(e:MouseEvent):void
			{
				var tableName:String = _serverFileBrowser.datagrid.selectedItem.name;
				
				AdminInterface.instance.service.getCSVColumnNames(tableName).addAsyncResponder(handleGetCSVColumnNames);
				
				csvFileNameInput.text = tableName;
				tableName = tableName.substring(0,tableName.lastIndexOf("."));
				tableSelector.activeTable = tableName;
				
				PopUpManager.removePopUp(_serverFileBrowser);
				enableAllWidgets();
			}
			private function handleGetCSVColumnNames(e:ResultEvent, token:Object = null):void
			{
				csvKeyColumnCombo.dataProvider = e.result;
				csvSecondaryKeyColumnCombo.dataProvider = e.result;
			}
			
			
			/**
			 * Adds the new CSV file to the server configuration, then adds the Dublin Core metadata (if any).
			 */
			override public function finish():void
			{
				var keyColumn:String = generateKeyColumn.selected ? '' : csvKeyColumnCombo.text;
				var secondKeyColumn:String = secondaryKeyColumnCheckBox.selected ? csvSecondaryKeyColumnCombo.text : null;
				var configTableName:String = dataTableNameInput.text
				var geometryCollection:String = generateKeyColumn.selected ? '' : geometrySelector.selectedGeometryCollection;
				var keyType:String = generateKeyColumn.selected ? configTableName : geometrySelector.selectedKeyType;
				var query:DelayedAsyncInvocation = AdminInterface.instance.importCSV(
						csvFileNameInput.text,
						keyColumn,
						secondKeyColumn,
						tableSelector.activeSchema,
						tableSelector.activeTable,
						tableSelector.tableOverwriteCheck.selected,
						configTableName,
						dataTableOverwriteCheck.selected,
						geometryCollection,
						keyType,
						nullFlagInput.text,
						(generateFilterColumns.selected && filterColumnsInput.text) ? filterColumnsInput.text.split(",") : null
					);
				
				controlBarEnabled = false;
				query.addAsyncResponder(handleImportCSV, handleFault);
				function handleImportCSV(event:ResultEvent, token:Object = null):void
				{
					selectedChild = dublinCorePage;
					commitDublinCoreElements();
					controlBarEnabled = true;
				}
				function handleFault(event:FaultEvent, token:Object = null):void
				{
					controlBarEnabled = true;
				}
			}
			
			private function commitDublinCoreElements():void
			{
				var elements:Object = new Object();
				if (dcTitleTextInput.text)
					elements["title"] = dcTitleTextInput.text;
				if (dcSubjectTextInput.text)
					elements["subject"] = dcSubjectTextInput.text;
				if (dcDescriptionTextInput.text)
					elements["description"] = dcDescriptionTextInput.text;
				
				//An assumtion is made that this text (dataTableNameInput.text) will not change,
				//and still represents the correct dataset name at the time this code is run. -Curran
				var datasetName:String = dataTableNameInput.text;
				
				AdminInterface.instance.addDCElements(datasetName, elements);
			}
			
			private function enableAllWidgets(enable:Boolean = true):void
			{
				tableSelector.enabled = enable;
				optionalSettingsPage.enabled = enable;
				backEnabled = enable;
				nextEnabled = enable;
				finishEnabled = enable;
			}
		]]>
	</mx:Script>
</admin:WizardViewStack>
