<?xml version="1.0" encoding="utf-8"?>
<!--
/* ***** BEGIN LICENSE BLOCK *****
 *
 * This file is part of Weave.
 *
 * The Initial Developer of Weave is the Institute for Visualization
 * and Perception Research at the University of Massachusetts Lowell.
 * Portions created by the Initial Developer are Copyright (C) 2008-2015
 * the Initial Developer. All Rights Reserved.
 *
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this file,
 * You can obtain one at http://mozilla.org/MPL/2.0/.
 * 
 * ***** END LICENSE BLOCK ***** */
-->
<!---
	Check linkableObjectIsBusy() to see if this component is busy with an RPC call.
	@author adufilie
-->
<mx:VBox xmlns:mx="http://www.adobe.com/2006/mxml"
				xmlns:ui="weave.ui.*"
				xmlns="weave.ui.admin.managers.*" implements="weave.api.core.ILinkableObject" 
				>
	<ui:Indent label="{lang('Server Type')}" group="{indentGroup}">
		<ui:CustomComboBox id="dbmsCombo" prompt="{lang('Select server type...')}" valueCommit="if (UIUtils.hasFocus(dbmsCombo)) generate()" initialize="dbmsCombo.dataProvider = ConnectionInfo.dbmsList;" width="{inputWidth}" selectedIndex="-1"/>
	</ui:Indent>
	<ui:Indent id="sqliteIndent" label="{lang('SQLite Database File')}" group="{indentGroup}" visible="{dbmsCombo.text == ConnectionInfo.SQLITE}" includeInLayout="{dbmsCombo.text == ConnectionInfo.SQLITE}">
		<mx:TextInput id="sqliteDBFile" change="generate()" width="{inputWidth}" />
		<ui:HelpComponent id="sqliteDBHelp">
			Enter the absolute file path of the SQLite Database file on the server.
		</ui:HelpComponent>
	</ui:Indent>
	<mx:VBox width="100%" visible="{dbmsCombo.text != ConnectionInfo.SQLITE}" includeInLayout="{dbmsCombo.text != ConnectionInfo.SQLITE}">
		<ui:IndentTextInput label="{lang('Server IP')}" id="ipInput" change="generate()" text="{hostIP}" inputWidth="{inputWidth}" group="{indentGroup}"/>
		<ui:IndentTextInput label="{lang('Server Port')}" id="portInput" change="generate()" text="{getDefaultPort(dbmsCombo.text)}" inputWidth="{inputWidth}" group="{indentGroup}"/>
		<ui:Indent id="sqlDatabaseName" label="{isSQLServer(dbmsCombo.text) ? 'Instance name' : 'Database name'}" group="{indentGroup}">
			<mx:TextInput id="databaseInput" change="generate()" width="{inputWidth}"/>
			<mx:Label id="optionalText" text="(Optional)"/>
			<ui:HelpComponent id="optionalHelp">
				This field is optional.
				You can specify the name of a default database to connect to.
				For SQL Server, this is an instance name.
				Similarly in PostGreSQL, databases are different from schemas.
				MySQL does not differentiate between the two.
			</ui:HelpComponent>
			<!--
				This field is required only for MS SQLServer connections.
				If you had a Server Name \'LocalMachine\\Example\', then this field should be entered as Example.
				If there is no instance name for your server, you may leave this blank.
			-->
		</ui:Indent>
		<ui:CustomCheckBox id="useDirectoryService" label="{lang('Use pass-through authentication')}" valueCommit="generate()"/>
		<ui:IndentTextInput label="{lang('Domain')}" id="domainInput" change="generate()" inputWidth="{inputWidth}" group="{indentGroup}"
							visible="{isSQLServer(dbmsCombo.text) || !dbmsCombo.selectedItem}" includeInLayout="{isSQLServer(dbmsCombo.text) || !dbmsCombo.selectedItem}"/>
		<ui:IndentTextInput label="{lang('User Name')}" id="userInput" change="generate()" inputWidth="{inputWidth}" group="{indentGroup}"
							visible="{!useDirectoryService.selected}" includeInLayout="{!useDirectoryService.selected}"/>
		<ui:IndentTextInput label="{lang('Password')}" id="passInput" change="generate()" displayAsPassword="false" inputWidth="{inputWidth}" group="{indentGroup}"
							visible="{!useDirectoryService.selected}" includeInLayout="{!useDirectoryService.selected}"/>
	</mx:VBox>
	<mx:Script>
		<![CDATA[
			import mx.utils.URLUtil;
			
			import weave.api.getCallbackCollection;
			import weave.compiler.StandardLib;
			import weave.core.UIUtils;
			import weave.services.beans.ConnectionInfo;
			
			[Bindable] public var inputWidth:int = 250;
			
			[Bindable] public var indentGroup:Object = this;
			
			[Bindable] public var connectString:String = '';
			
			private const hostIP:String = URLUtil.getServerName(WeaveAPI.topLevelApplication.url);
			
			private function getDefaultPort(dbms:String):int
			{
				return ConnectionInfo.getDefaultPort(dbms);
			}
			
			private function isSQLServer(dbms:String):Boolean
			{
				return dbms == ConnectionInfo.SQLSERVER;
			}
			
			public function resetFields(resetConnectString:Boolean = true):void
			{
				dbmsCombo.selectedIndex = -1;
				sqliteDBFile.text = "";
				ipInput.text = hostIP;
				databaseInput.text = "";
				userInput.text = "";
				passInput.text = "";
				useDirectoryService.selected = false;
				if (resetConnectString)
					generate();
			}
			
			private function generate(callingLater:Boolean = false):void
			{
				if (!callingLater)
				{
					callLater(generate, [true]);
					return;
				}
				
				// force binding to trigger
				connectString = '';
				
				var isSQLite:Boolean = dbmsCombo.text == ConnectionInfo.SQLITE;
				if (isSQLite)
					connectString = getConnectString(dbmsCombo.text, "", "", sqliteDBFile.text, "", "", "");
				else
					connectString = getConnectString(
						dbmsCombo.text,
						ipInput.text,
						portInput.text,
						databaseInput.text,
						useDirectoryService.selected ? "" : userInput.text,
						useDirectoryService.selected ? "" : passInput.text,
						isSQLServer(dbmsCombo.text) ? domainInput.text : ""
					);
				
				triggerCallbacks();
			}
			
			private function triggerCallbacks():void
			{
				getCallbackCollection(this).triggerCallbacks();
			}
			
			/**
			 * @param dbms The name of a DBMS (MySQL, PostGreSQL, Microsoft SQL Server)
			 * @param ip The IP address of the DBMS.
			 * @param port The port the DBMS is on (optional, can be "" to use default).
			 * @param database The name of a database to connect to (can be "" for MySQL)
			 * @param user The username to use when connecting.
			 * @param pass The password associated with the username.
			 * @param domain The domain paramter for a SQLServer connection.
			 * @return A connect string that can be used in the getConnection() function.
			 */
			private function getConnectString(dbms:String, ip:String, port:String, database:String, user:String, pass:String, domain:String):String
			{
				var host:String;
				if (!port)
					host = ip; // default port for specific dbms will be used
				else
					host = ip + ":" + port;
				
				// in format strings: {0}=dbms,{1}=host,{2}=database,{3}=user,{4}=pass,{5}=domain
				
				var format:String = null;
				if (dbms == ConnectionInfo.SQLSERVER)
				{
					dbms = "sqlserver"; // this will be put in the format string
					if (user || pass)
						format = "jdbc:jtds:{0}://{1}/;instance={2};user={3};password={4};domain={5}";
					else
						format = "jdbc:jtds:{0}://{1}/;instance={2}";
				}
				else if (dbms == ConnectionInfo.SQLITE)
				{
					format = "jdbc:{0}:{2}";
					// jdbc:sqlite:C:\\path\\to\\file.db
				}
				else if (dbms == ConnectionInfo.ORACLE)
				{
					if (user || pass)
						format = "jdbc:{0}:thin:{3}/{4}@{1}:{2}";
					else
						format = "jdbc:{0}:thin:{1}:{2}";
					//"jdbc:oracle:thin:<user>/<password>@<host>:<port>:<instance>"
				}
				else // MySQL or PostGreSQL
				{
					if (user || pass)
						format = "jdbc:{0}://{1}/{2}?user={3}&password={4}";
					else
						format = "jdbc:{0}://{1}/{2}";
				}
				
				// MySQL connect string uses % as an escape character, so we must use URLEncoder.
				// PostGreSQL does not support % as an escape character, and does not work with the & character.
				if (dbms == ConnectionInfo.MYSQL)
				{
					database = encodeURIComponent(database);
					user = encodeURIComponent(user);
					pass = encodeURIComponent(pass);
				}
				
				var result:String = StandardLib.substitute(format, dbms.toLowerCase(), host, database, user, pass, domain);
				
				return result;
			}
		]]>
	</mx:Script>
</mx:VBox>
