<?xml version="1.0" encoding="utf-8"?>
<!--
/*
    Weave (Web-based Analysis and Visualization Environment)
    Copyright (C) 2008-2011 University of Massachusetts Lowell

    This file is a part of Weave.

    Weave is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License, Version 3,
    as published by the Free Software Foundation.

    Weave is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with Weave.  If not, see <http://www.gnu.org/licenses/>.
*/
-->
<mx:HDividedBox xmlns:mx="http://www.adobe.com/2006/mxml"
				xmlns:ui="weave.ui.*"
				xmlns="weave.ui.admin.managers.*" 
				width="100%" height="100%" 
				label="Connections{dataChanged ? '*' : ''}"
				creationComplete="handleCreationComplete()" xmlns:admin="weave.ui.admin.*"
				>
	<mx:VBox height="100%">
		<ui:TreeWithSearch id="treeWithSearch" prompt="Search connections"/>
		<mx:HBox width="100%">
			<mx:Spacer width="100%"/>
			<mx:Button label="Remove" click="removeConnection()" enabled="{treeWithSearch.tree.selectedItem != null}"/>
			<mx:Button label="Refresh" click="refresh()"/>
		</mx:HBox>
	</mx:VBox>
	
	<mx:TabNavigator id="tabNavigator" paddingBottom="8" paddingLeft="8" paddingRight="8" paddingTop="8" width="100%" height="100%">
		<mx:Canvas id="simpleSetting" label="Database connections{dataChanged ? '*' : ''}" width="100%" height="100%">
			<mx:VBox id="simpleSettingVBox" width="100%" height="100%" paddingBottom="5" paddingTop="5" paddingLeft="5" paddingRight="5" horizontalGap="0" verticalAlign="top">
				
				<ui:Indent label="Connection name">
					<mx:TextInput id="connectionNameInput" change="{dataChanged=true}" width="130"/>
					<mx:CheckBox label="Overwrite" id="configOverwrite"/>
				</ui:Indent>
				<ui:IndentTextInput id="connectionPasswordInput" label="Password" change="{dataChanged=true}" displayAsPassword="false" inputWidth="130"/>
				<ui:Indent label="User Folder Name">
					<mx:TextInput id="folderNameInput" width="130"/>
					<ui:HelpComponent>Specify the folder in docroot to store user-created configurations</ui:HelpComponent>
				</ui:Indent>
				<mx:CheckBox change="{dataChanged=true}" label="Grant Superuser Permissions" id="superuserCheckbox"/>
				
				<mx:Spacer height="8"/>
				
				<mx:HBox>
					<mx:Label text="SQL Connection Info"/>
					<ui:HelpComponent>
						Use these fields to generate a SQL Connect String below.  The values from these individual fields are not saved.
					</ui:HelpComponent>
				</mx:HBox>
				<ui:Indent indent="32">
					<admin:ConnectStringGenerator id="connectStringGenerator"/>
				</ui:Indent>
				
				<mx:Spacer height="8"/>
				
				<ui:Indent label="SQL Connect String">
					<ui:HelpComponent>
						This is automatically generated using the SQL Connection Info fields above. Advanced users may modify this value directly.
					</ui:HelpComponent>
					<mx:TextInput id="connectStringInput" change="{dataChanged=true}" width="100%" text="{connectStringGenerator.connectString}"/>
				</ui:Indent>

				<mx:Spacer height="8"/>
				
				<mx:HBox>
					<mx:Button label="Save this database connection" click="saveConnectionInfo()"/>
					<mx:Button label="Clear fields" click="clearConnectionFields(true)" />
				</mx:HBox>
			</mx:VBox>
		</mx:Canvas>
		<mx:Canvas id="migrateTab" label="Configuration storage location" width="100%" height="100%">
			<mx:VBox height="100%" paddingBottom="5" paddingTop="5" paddingLeft="5" paddingRight="5" horizontalGap="0" verticalAlign="top" minWidth="500">
				<mx:Label id="lblAre" text='You are currently using the "{Admin.instance.databaseConfigInfo.connection}" connection to store configuration data.'/>
				<mx:Spacer/>
				<!--<mx:Label text="You may optionally migrate the configuration data to a new database with the controls below."/>-->
				<ui:AutoResizingTextArea width="100%" editable="false" borderStyle="none" selectable="false" id="lblMay" text="You may switch to a different location, but the existing configuration data will not be copied over. That functionality may be available in a future Weave update."/>
				<mx:Label id="lblPlease" text="Please specify where the configuration data should be stored."/>
				<ui:Indent label="Connection to use">
					<ui:CustomComboBox id="migrateConnectionCombo" dataProvider="{Admin.instance.connectionNames}" width="200"/>
				</ui:Indent>
				<ui:IndentTextInput label="Password" id="migratePasswordInput" displayAsPassword="true"/>
				<ui:IndentTextInput label="Schema to use" id="migrateSchemaInput" text="{Admin.instance.databaseConfigInfo.schema}"/>
				<mx:Button id="migrateButton" label="Store Weave configuration at this location" click="saveDatabaseConfigInfo()" />
			</mx:VBox>
		</mx:Canvas>
		<!--		<mx:Canvas label="etc" width="100%" height="100%">
		<mx:TextArea x="55.5" y="76" width="413" height="221" editable="false" selectable="false">
		<mx:text><![CDATA[Controls for editing the item selected in the tree on the left.  Most used/simplest settings should be highlighted, more advanced controls available via more tabs if needed]]></mx:text>
		</mx:TextArea>
		</mx:Canvas>-->
	</mx:TabNavigator>	
	<mx:Script>
		<![CDATA[
			import mx.binding.utils.BindingUtils;
			import mx.rpc.events.ResultEvent;
			
			import weave.api.WeaveAPI;
			import weave.services.Admin;
			import weave.services.addAsyncResponder;
			import weave.services.beans.ConnectionInfo;
			import weave.services.beans.DatabaseConfigInfo;
			import weave.utils.PopUpUtils;
			
			[Bindable]
			private var serverConfigEntryWasModified:Boolean = false;
			
			[Bindable]
			private var dataChanged:Boolean = false;

			private function handleCreationComplete():void
			{
				connectionNameInput.setFocus();
				clearConnectionFields(true);
				BindingUtils.bindSetter(handleConnectionNames, Admin.instance, "connectionNames");
				treeWithSearch.tree.addEventListener(Event.CHANGE, handleTreeSelection);
				BindingUtils.bindSetter(handleDBConfig, Admin.instance, "databaseConfigInfo");
			}
			
			private function handleDBConfig(dbInfo:DatabaseConfigInfo):void
			{
				var configured:Boolean = dbInfo && dbInfo.connection;
				lblAre.visible = lblAre.includeInLayout = configured;
				lblMay.visible = lblMay.includeInLayout = configured;
				lblPlease.visible = lblPlease.includeInLayout = !configured;
				migrateConnectionCombo.selectedItem = Admin.instance.databaseConfigInfo.connection;
			}
			
			public function handleConnectionNames(names:Array):void
			{
				treeWithSearch.generateFlatTreeFromLabels(names);
				if (names.length == 0)
				{
					superuserCheckbox.selected = true;
					superuserCheckbox.enabled = false;
				}
				else
				{
					superuserCheckbox.enabled = true;
					if (!Admin.instance.databaseConfigExists)
						tabNavigator.selectedChild = migrateTab;
				}
				migrateTab.enabled = names.length > 0;
				handleDBConfig(Admin.instance.databaseConfigInfo);
			}
			
			private function handleTreeSelection(event:Event):void
			{
				if (dataChanged)
				{
					function cancel():void
					{
						treeWithSearch.tree.selectedItem = null;
					}
					// ask user to confirm
					PopUpUtils.confirm(
						this,
						'Discard changes',
						'Discard unsaved changes?',
						loadDatabaseInfo, cancel,
						'Discard', 'Cancel'
					);
				}
				else
					loadDatabaseInfo();
			}
			
			private function loadDatabaseInfo():void
			{
				if (treeWithSearch.tree.selectedItem == null)
					return;
				
				tabNavigator.selectedChild = simpleSetting;
				
				var name:String = treeWithSearch.tree.selectedItem.label;
				addAsyncResponder(Admin.service.getConnectionInfo(name), handleResult);

				function handleResult(event:ResultEvent, token:Object = null):void
				{
					clearConnectionFields(false);
					var info:ConnectionInfo = new ConnectionInfo(event.result);
					connectionNameInput.text = info.name;
					connectionPasswordInput.text = info.pass;
					superuserCheckbox.selected = info.is_superuser;
					folderNameInput.text = info.folderName;
					connectStringInput.text = info.connectString;
				}
				
				dataChanged = false;
			}
			
			private function get hostUrl():String
			{
				var result:Array = WeaveAPI.topLevelApplication.url.split("http://");
				result = (result.pop() as String).split("/");
				return result[0] as String;
			}
			
			private const hostIP:String = hostUrl.split(':')[0];
			
			protected function clearConnectionFields(resetConnectString:Boolean):void
			{
				connectionNameInput.text = "";
				connectionPasswordInput.text = "";
				folderNameInput.text = "";
				configOverwrite.selected = false;
				superuserCheckbox.selected = (Admin.instance.connectionNames.length == 0);
				connectStringGenerator.resetFields(resetConnectString);
				connectStringInput.text = connectStringGenerator.connectString;
			}
			
			private function saveConnectionInfo():void
			{
				var info:ConnectionInfo = new ConnectionInfo(null);
				info.name = connectionNameInput.text;
				info.pass = connectionPasswordInput.text;
				info.is_superuser = superuserCheckbox.selected;
				info.folderName = folderNameInput.text;
				info.connectString = connectStringInput.text
				
				Admin.service.saveConnectionInfo(info, configOverwrite.selected);
				dataChanged = false;
			}
			
			private function saveDatabaseConfigInfo():void
			{
				Admin.service.setDatabaseConfigInfo(
					   migrateConnectionCombo.text,
					   migratePasswordInput.text,
					   migrateSchemaInput.text
					);
			}
			
			private function removeConnection():void
			{
				var connectionLabel:String;
				
				if (treeWithSearch.tree.selectedItem == null)
					return;
				
				connectionLabel = treeWithSearch.tree.selectedItem.label;
				
				PopUpUtils.confirm(
					this,
					"Confirm delete",
					'Delete connection "' + connectionLabel + '"?',
					del, null,
					'Delete', 'Cancel'
				);
				function del():void
				{
					Admin.service.removeConnectionInfo(treeWithSearch.tree.selectedItem.label);
				}
			}
			
			private function refresh():void
			{
				Admin.service.getConnectionNames();
				Admin.service.getDatabaseConfigInfo();
			}
		]]>
	</mx:Script>
</mx:HDividedBox>
