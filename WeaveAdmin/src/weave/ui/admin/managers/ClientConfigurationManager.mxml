<?xml version="1.0" encoding="utf-8"?>
<!--
/* ***** BEGIN LICENSE BLOCK *****
 *
 * This file is part of Weave.
 *
 * The Initial Developer of Weave is the Institute for Visualization
 * and Perception Research at the University of Massachusetts Lowell.
 * Portions created by the Initial Developer are Copyright (C) 2008-2015
 * the Initial Developer. All Rights Reserved.
 *
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this file,
 * You can obtain one at http://mozilla.org/MPL/2.0/.
 * 
 * ***** END LICENSE BLOCK ***** */
-->
<mx:HBox xmlns:mx="http://www.adobe.com/2006/mxml"
				xmlns:ui="weave.ui.*"
				xmlns="weave.ui.admin.managers.*" 
				width="100%" height="100%"
				verticalAlign="middle"
				label="Visualizations"
				creationComplete="handleCreationComplete()" xmlns:admin="weave.ui.admin.*">
	<ui:CustomTabNavigator id="tabNav" height="100%" paddingLeft="8" paddingRight="8" paddingBottom="8" paddingTop="8">
		<mx:VBox label="My files" id="userView">
			<mx:HBox>
				<mx:Button label="Open selected file" click="openSelectedFile(userFolderTreeWithSearch)" enabled="{userFolderTreeWithSearch.tree.selectedItem != null}"/>
				<mx:Button label="Delete selected file" click="removeClientConfigFile()" enabled="{userFolderTreeWithSearch.tree.selectedItem != null}"/>
				<mx:Button label="Create new file" click="createFile()"/>
			</mx:HBox>
			<ui:TreeWithSearch id="userFolderTreeWithSearch" prompt="Search"
							   doubleClickEnabled="true" doubleClick="if (userFolderTreeWithSearch.tree.contains(event.target as DisplayObject)) openSelectedFile(userFolderTreeWithSearch)"
							   toolTip="Double-click a file name to open it with Weave."/>
			<mx:HBox width="100%">
				<mx:Spacer width="100%"/>
				<mx:Button label="Refresh" click="Admin.service.getWeaveFileNames(false)"/>
			</mx:HBox>
		</mx:VBox>
		<mx:VBox label="All files" id="sharedView">
			<mx:HBox>
				<mx:Button label="Open selected file" click="openSelectedFile(sharedTreeWithSearch)" enabled="{sharedTreeWithSearch.tree.selectedItem != null}"/>
			</mx:HBox>
			<ui:TreeWithSearch id="sharedTreeWithSearch" prompt="Search"
							   doubleClickEnabled="true" doubleClick="if (sharedTreeWithSearch.tree.contains(event.target as DisplayObject)) openSelectedFile(sharedTreeWithSearch)"
							   toolTip="Double-click a file name to open it with Weave."/>
			<mx:HBox width="100%">
				<mx:Spacer width="100%"/>
				<mx:Button label="Refresh" click="Admin.service.getWeaveFileNames(true)"/>
			</mx:HBox>
		</mx:VBox>
	</ui:CustomTabNavigator>
	<admin:WeaveFileInfoDisplay id="weaveFileInfo" width="100%"/>
	
<!--	<ui:CustomTabNavigator paddingBottom="8" paddingLeft="8" paddingRight="8" paddingTop="8" width="100%" height="100%">
		<mx:Canvas label="Settings" width="100%" height="100%">
			<mx:VBox width="100%" height="100%">
				<mx:VBox width="100%">
					<mx:Label text="This space for rent"/>
				</mx:VBox>
			</mx:VBox>
		</mx:Canvas>
	</ui:CustomTabNavigator>
-->
	<mx:Script>
		<![CDATA[
			import mx.binding.utils.BindingUtils;
			import mx.controls.Alert;
			import mx.controls.Tree;
			
			import weave.services.Admin;
			import weave.utils.EventUtils;
			import weave.utils.PopUpUtils;
			
			
			private function handleCreationComplete():void
			{
				BindingUtils.bindSetter(function(i:int):void {
					previewSelectedFile([userFolderTreeWithSearch, sharedTreeWithSearch][i]);
				}, tabNav, 'selectedIndex');
				BindingUtils.bindSetter(function(files:Array):void {
					sharedTreeWithSearch.generateFlatTreeFromLabels(files);
					previewSelectedFile(sharedTreeWithSearch, tabNav.selectedChild == sharedView);
				}, Admin.instance, "weaveFileNames");
				BindingUtils.bindSetter(function(files:Array):void {
					userFolderTreeWithSearch.generateFlatTreeFromLabels(files);
					previewSelectedFile(userFolderTreeWithSearch, tabNav.selectedChild == userView);
				}, Admin.instance, "privateWeaveFileNames");
				
				userFolderTreeWithSearch.tree.addEventListener(Event.CHANGE, handleListChange);
				sharedTreeWithSearch.tree.addEventListener(Event.CHANGE, handleListChange);
			}
			
			private const handleListChange:Function = EventUtils.generateDelayedCallback(this, _handleListChange, 100, true);DEFAULT_MAX_HEIGHT;
			
			private function _handleListChange(event:Event):void
			{
				var tree:Tree = event.currentTarget as Tree;
				if (tree.selectedItem)
				{
					if (tree == sharedTreeWithSearch.tree)
						userFolderTreeWithSearch.tree.selectedItem = null;
					else
						sharedTreeWithSearch.tree.selectedItem = null;
				}
				previewSelectedFile(tree.owner as TreeWithSearch);
			};
			
			private function openSelectedFile(component:TreeWithSearch):void
			{
				var item:Object = component.tree.selectedItem;
				if (item)
					Admin.instance.openWeavePopup(item.label);
			}
			
			private function previewSelectedFile(component:TreeWithSearch, clearIfNoSelection:Boolean = true):void
			{
				var item:Object = component.tree.selectedItem;
				if (item)
					weaveFileInfo.updatePreview(item.label);
				else if (clearIfNoSelection)
					weaveFileInfo.clearPreview();
			}
			
			private function createFile():void
			{
				Admin.instance.openWeavePopup();
			}
			
			private function removeClientConfigFile():void
			{
				if (userFolderTreeWithSearch.tree.selectedItem == null)
				{
					Alert.show("No file is selected.", "Error");
					return;
				}
				
				var fileName:String = userFolderTreeWithSearch.tree.selectedItem.label;
				
				if (fileName != "" && fileName != null)
				{
					// ask user to confirm
					PopUpUtils.confirm(
						this,
						"Confirm Delete",
						'Delete file "'+fileName+'"?',
						del, null,
						'Delete', 'Cancel'
					);
					fileName = fileName.split("/").pop();
					
					function del():void
					{
						Admin.service.removeWeaveFile(fileName);
					}
				}
				else
				{
					Alert.show("No File was selected","Error");
				}
			}
			
		]]>
	</mx:Script>
	
</mx:HBox>
