<?xml version="1.0" encoding="utf-8"?>
<!--
/*
	Weave (Web-based Analysis and Visualization Environment)
	Copyright (C) 2008-2011 University of Massachusetts Lowell
	
	This file is a part of Weave.
	
	Weave is free software: you can redistribute it and/or modify
	it under the terms of the GNU General Public License, Version 3,
	as published by the Free Software Foundation.
	
	Weave is distributed in the hope that it will be useful,
	but WITHOUT ANY WARRANTY; without even the implied warranty of
	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
	GNU General Public License for more details.
	
	You should have received a copy of the GNU General Public License
	along with Weave.  If not, see <http://www.gnu.org/licenses/>.
*/
-->
<mx:VBox xmlns:fx="http://ns.adobe.com/mxml/2009" 
		 xmlns:s="library://ns.adobe.com/flex/spark" 
		 xmlns:mx="library://ns.adobe.com/flex/mx"
		 xmlns="weave.ui.admin.*"
		 xmlns:ui="weave.ui.*"
		 width="100%">
	<fx:Metadata>
		[Event(name="change", type="flash.events.Event")]
	</fx:Metadata>
	<ui:Indent label="{lang('Key column')}" grouped="false" id="keyColumnIndent">
		<ui:CustomComboBox id="keyColumnCombo" valueCommit="dispatchChangeEvent();" dataProvider="{columnNames}" editable="{keyColumnEditable}"/>
		<ui:HelpComponent>
			Select the column whose values uniquely identify the rows in the table.  If there is no such column, you can either use the option to generate a new primary key column, or one of the advanced options below.
		</ui:HelpComponent>
	</ui:Indent>
	<mx:VBox visible="{Boolean(keyColumnCombo.text)}" includeInLayout="{Boolean(keyColumnCombo.text)}" width="100%">
		<KeyTypeDialog id="keyTypeSelector" defaultKeyType="{defaultKeyType}"/>
		
		<mx:RadioButtonGroup id="radioGroup" change="dispatchChangeEvent();"/>
		<mx:RadioButton label="{lang('Publish data columns as-is')}" selected="true" group="{radioGroup}"/>
		
		<mx:RadioButton id="secondaryKeyColumnRadio" label="{lang('Format data for Dimension Slider')}" selected="false" group="{radioGroup}"/>
		<ui:Indent label="{lang('Secondary key column')}"
				   paddingLeft="{paddingIndent}"
				   grouped="false"
				   visible="{secondaryKeyColumnRadio.selected}"
				   includeInLayout="{secondaryKeyColumnRadio.selected}">
			<ui:CustomComboBox id="secondaryKeyColumnCombo"
							   valueCommit="dispatchChangeEvent();"
							   dataProvider="{columnNames}"
							   selectedIndex="-1"
							   editable="{keyColumnEditable}"
							   toolTip="{lang('Select a secondary key column for use with the Dimension Slider')}" />
		</ui:Indent>
		
		<mx:HBox>
			<mx:RadioButton id="generateFilterColumnsRadio" label="{lang('Generate filtered column queries')}" selected="false" group="{radioGroup}"/>
			<ui:HelpComponent>
				This option is to be used when the new data table has a column that refers to keys in another data table but the keys do not uniquely identify rows in the new table.
				
				Other columns in the new table can be used to generate SQL queries that will return different subsets of the rows.  The key column will be used to uniquely identify rows in the subsets.
			</ui:HelpComponent>
		</mx:HBox>
		<ui:Indent label="{lang('Columns to use as filters')}" paddingLeft="{paddingIndent}" width="100%" visible="{generateFilterColumnsRadio.selected}">
			<mx:TextInput id="filterColumnsInput" width="100%" text="{toCSV(columnNames)}" change="dispatchEvent(event)"/>
			<ui:HelpComponent>
				Enter the names of columns to be used to break the data into subsets. Separate multiple column names by commas.
			</ui:HelpComponent>
		</ui:Indent>
	</mx:VBox>
	<fx:Script>
		<![CDATA[
			import weave.api.WeaveAPI;
			
			private static const paddingIndent:int = 20;
			
			[Bindable] public var defaultKeyType:String = '';
			[Bindable] public var keyColumnEditable:Boolean = false;
			
			private var _names:Array;
			
			private function dispatchChangeEvent():void
			{
				dispatchEvent(new Event(Event.CHANGE));
			}
			
			[Bindable] public function set columnNames(names:Array):void
			{
				_names = names;
				keyColumnCombo.selectedIndex = 0;
				keyColumnCombo.invalidateProperties();
				keyColumnCombo.validateNow();
				secondaryKeyColumnCombo.selectedIndex = -1;
				dispatchChangeEvent();
			}
			public function get columnNames():Array
			{
				return _names;
			}
			
			private function toCSV(array:Array):String
			{
				return WeaveAPI.CSVParser.createCSV([array]);
			}
		]]>
	</fx:Script>
</mx:VBox>
